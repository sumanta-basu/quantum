/* Generated by Cython 3.0.8 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "dwave/optimization/include/dwave-optimization/array.hpp",
            "dwave/optimization/include/dwave-optimization/graph.hpp",
            "dwave/optimization/include/dwave-optimization/state.hpp"
        ],
        "extra_compile_args": [
            "-std=c++20",
            "-g1"
        ],
        "extra_link_args": [
            "-std=c++20",
            "-g1"
        ],
        "include_dirs": [
            "dwave/optimization/include/"
        ],
        "language": "c++",
        "name": "dwave.optimization.model",
        "sources": [
            "dwave/optimization/model.pyx"
        ]
    },
    "module_name": "dwave.optimization.model"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"

    #if PY_MAJOR_VERSION >= 3
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj)
    #else
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj, NULL)
    #endif
    

    #if PY_MAJOR_VERSION <= 2
    #define PyDict_GetItemWithError _PyDict_GetItemWithError
    #endif
    

    #if (PY_VERSION_HEX < 0x030700b1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030600)) && !defined(PyContextVar_Get)
    #define PyContextVar_Get(var, d, v)         ((d) ?             ((void)(var), Py_INCREF(d), (v)[0] = (d), 0) :             ((v)[0] = NULL, 0)         )
    #endif
    
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_8" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030008F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__dwave__optimization__model
#define __PYX_HAVE_API__dwave__optimization__model
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <memory>
#include <vector>
#include <optional>
#include <string.h>
#include <string>
#include <span>
#include <variant>
#include "dwave-optimization/state.hpp"
#include "dwave-optimization/array.hpp"
#include "dwave-optimization/graph.hpp"
#include <stdio.h>
#include <stddef.h>
#include "pythread.h"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <typeinfo>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "dwave/optimization/model.pyx",
  "<stringsource>",
  "contextvars.pxd",
  "dwave/optimization/model.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_5dwave_12optimization_5model_Model;
struct __pyx_obj_5dwave_12optimization_5model_States;
struct __pyx_obj_5dwave_12optimization_5model_Symbol;
struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol;
struct __pyx_obj_5dwave_12optimization_5model_StateView;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides;
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr;

/* "dwave/optimization/libcpp/array.pxd":63
 *         Py_ssize_t step
 * 
 * ctypedef Array* ArrayPtr  # Cython gets confused when templating pointers             # <<<<<<<<<<<<<<
 */
typedef dwave::optimization::Array *__pyx_t_5dwave_12optimization_6libcpp_5array_ArrayPtr;
struct __pyx_opt_args_7cpython_11contextvars_get_value;
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default;

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value {
  int __pyx_n;
  PyObject *default_value;
};

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default {
  int __pyx_n;
  PyObject *default_value;
};

/* "dwave/optimization/model.pxd":28
 * 
 * 
 * cdef class Model:             # <<<<<<<<<<<<<<
 *     cpdef bool is_locked(self) noexcept
 *     cpdef Py_ssize_t num_decisions(self) noexcept
 */
struct __pyx_obj_5dwave_12optimization_5model_Model {
  PyObject_HEAD
  struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *__pyx_vtab;
  PyObject *__dict__;
  PyObject *__weakref__;
  dwave::optimization::Graph _graph;
  PyObject *objective;
  struct __pyx_obj_5dwave_12optimization_5model_States *states;
  Py_ssize_t _lock_count;
  PyObject *_data_sources;
};


/* "dwave/optimization/model.pxd":55
 * 
 * 
 * cdef class States:             # <<<<<<<<<<<<<<
 *     """The states/solutions of the model."""
 * 
 */
struct __pyx_obj_5dwave_12optimization_5model_States {
  PyObject_HEAD
  struct __pyx_vtabstruct_5dwave_12optimization_5model_States *__pyx_vtab;
  PyObject *_model_ref;
  std::vector<dwave::optimization::State>  _states;
  Py_ssize_t _view_count;
  PyObject *_future;
  PyObject *_result_hook;
};


/* "dwave/optimization/model.pxd":84
 * 
 * 
 * cdef class Symbol:             # <<<<<<<<<<<<<<
 *     # Inheriting nodes must call this method from their __init__()
 *     cdef void initialize_node(self, Model model, cppNode* node_ptr) noexcept
 */
struct __pyx_obj_5dwave_12optimization_5model_Symbol {
  PyObject_HEAD
  struct __pyx_vtabstruct_5dwave_12optimization_5model_Symbol *__pyx_vtab;
  struct __pyx_obj_5dwave_12optimization_5model_Model *model;
  dwave::optimization::Node *node_ptr;
  std::shared_ptr<bool>  expired_ptr;
};


/* "dwave/optimization/model.pxd":110
 * # extension base class, so to support that we assume all ArraySymbols are
 * # also Symbols (probably a fair assumption)
 * cdef class ArraySymbol(Symbol):             # <<<<<<<<<<<<<<
 *     # Inheriting nodes must call this method from their __init__()
 *     cdef void initialize_array(self, cppArray* array_ptr) noexcept
 */
struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol {
  struct __pyx_obj_5dwave_12optimization_5model_Symbol __pyx_base;
  dwave::optimization::Array *array_ptr;
};


/* "dwave/optimization/model.pxd":120
 * 
 * 
 * cdef class StateView:             # <<<<<<<<<<<<<<
 *     cdef readonly Py_ssize_t index  # which state we're accessing
 *     cdef readonly ArraySymbol symbol
 */
struct __pyx_obj_5dwave_12optimization_5model_StateView {
  PyObject_HEAD
  Py_ssize_t index;
  struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *symbol;
};


/* "dwave/optimization/model.pyx":53
 * 
 * 
 * @contextlib.contextmanager             # <<<<<<<<<<<<<<
 * def locked(model):
 *     """Context manager that hold a locked model and unlocks it when the context is exited."""
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked {
  PyObject_HEAD
  PyObject *__pyx_v_model;
};


/* "dwave/optimization/model.pyx":162
 *             800
 *         """
 *         return sum(sym.state_size() for sym in self.iter_decisions())             # <<<<<<<<<<<<<<
 * 
 *     def disjoint_bit_sets(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_sets):
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_sym;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "dwave/optimization/model.pyx":164
 *         return sum(sym.state_size() for sym in self.iter_decisions())
 * 
 *     def disjoint_bit_sets(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_sets):             # <<<<<<<<<<<<<<
 *         """Create a disjoint-sets symbol as a decision variable.
 * 
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets {
  PyObject_HEAD
  PyObject *__pyx_v_DisjointBitSet;
  PyObject *__pyx_v_main;
};


/* "dwave/optimization/model.pyx":196
 *         from dwave.optimization.symbols import DisjointBitSets, DisjointBitSet  # avoid circular import
 *         main = DisjointBitSets(self, primary_set_size, num_disjoint_sets)
 *         sets = tuple(DisjointBitSet(main, i) for i in range(num_disjoint_sets))             # <<<<<<<<<<<<<<
 *         return main, sets
 * 
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets *__pyx_outer_scope;
  Py_ssize_t __pyx_genexpr_arg_0;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_t_0;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
};


/* "dwave/optimization/model.pyx":507
 *         return self._lock_count > 0
 * 
 *     def iter_constraints(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all constraints in the model.
 * 
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints {
  PyObject_HEAD
  Py_ssize_t __pyx_v_i;
  struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self;
  Py_ssize_t __pyx_t_0;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
};


/* "dwave/optimization/model.pyx":523
 *             yield symbol_from_ptr(self, self._graph.constraints()[i])
 * 
 *     def iter_decisions(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all decision variables in the model.
 * 
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions {
  PyObject_HEAD
  Py_ssize_t __pyx_v_num_decisions;
  Py_ssize_t __pyx_v_seen_decisions;
  struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self;
  struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_symbol;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "dwave/optimization/model.pyx":550
 *                     return
 * 
 *     def iter_symbols(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all symbols in the model.
 * 
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols {
  PyObject_HEAD
  Py_ssize_t __pyx_v_i;
  struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self;
  Py_ssize_t __pyx_t_0;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
};


/* "dwave/optimization/model.pyx":804
 *             184
 *         """
 *         return sum(sym.state_size() for sym in self.iter_symbols())             # <<<<<<<<<<<<<<
 * 
 *     def to_file(self, **kwargs):
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr {
  PyObject_HEAD
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_sym;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "dwave/optimization/model.pyx":1189
 * 
 *         # todo: caching
 *         return all(p.equals(q) for p, q in zip(self.iter_predecessors(), other.iter_predecessors()))             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool expired(self) noexcept:
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr {
  PyObject_HEAD
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_p;
  PyObject *__pyx_v_q;
};


/* "dwave/optimization/model.pyx":1266
 *         pass
 * 
 *     def iter_predecessors(self):             # <<<<<<<<<<<<<<
 *         """Iterate over a node's predecessors in the model.
 * 
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors {
  PyObject_HEAD
  std::vector<dwave::optimization::Node *> ::const_iterator __pyx_v_end;
  std::vector<dwave::optimization::Node *> ::const_iterator __pyx_v_it;
  struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self;
};


/* "dwave/optimization/model.pyx":1289
 *             inc(it)
 * 
 *     def iter_successors(self):             # <<<<<<<<<<<<<<
 *         """Iterate over a node's successors in the model.
 * 
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors {
  PyObject_HEAD
  std::vector<dwave::optimization::Node::SuccessorView> ::const_iterator __pyx_v_end;
  std::vector<dwave::optimization::Node::SuccessorView> ::const_iterator __pyx_v_it;
  struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self;
};


/* "dwave/optimization/model.pyx":1472
 * # various ways if it ever becomes a problem.
 * _node_subclasses = dict()
 * def _register_node_subclasses():             # <<<<<<<<<<<<<<
 *     def register(cls):
 *         if cls.__name__ in _node_subclasses:
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses {
  PyObject_HEAD
  PyObject *__pyx_v_register;
};


/* "dwave/optimization/model.pyx":1563
 *                 index.append(slice(None))
 * 
 *             if all(isinstance(idx, (slice, numbers.Integral)) for idx in index):             # <<<<<<<<<<<<<<
 *                 # Basic indexing
 *                 # https://numpy.org/doc/stable/user/basics.indexing.html#basic-indexing
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr {
  PyObject_HEAD
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_idx;
};


/* "dwave/optimization/model.pyx":1569
 * 
 *             elif all(isinstance(idx, ArraySymbol)
 *                      or idx.start is None and idx.stop is None and idx.step is None             # <<<<<<<<<<<<<<
 *                      for idx in index):
 *                 # Advanced indexing
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr {
  PyObject_HEAD
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_idx;
};


/* "dwave/optimization/model.pyx":1576
 *                 return dwave.optimization.symbols.AdvancedIndexing(self, *index)
 * 
 *             elif all(isinstance(idx, (ArraySymbol, slice, numbers.Integral)) for idx in index):             # <<<<<<<<<<<<<<
 *                 # Combined indexing
 *                 # https://numpy.org/doc/stable/user/basics.indexing.html#combining-advanced-and-basic-indexing
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr {
  PyObject_HEAD
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_idx;
};


/* "dwave/optimization/model.pyx":1722
 *             return Reshape(self, shape[0])
 * 
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         """Return the shape of the symbol.
 * 
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape {
  PyObject_HEAD
  std::span<Py_ssize_t const >  __pyx_v_shape;
};


/* "dwave/optimization/model.pyx":1738
 *         # but I think it's better to follow NumPy and return a tuple
 *         shape = self.array_ptr.shape()
 *         return tuple(shape[i] for i in range(shape.size()))             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape *__pyx_outer_scope;
  std::span<Py_ssize_t const > ::size_type __pyx_genexpr_arg_0;
  std::span<Py_ssize_t const > ::size_type __pyx_v_i;
  std::span<Py_ssize_t const > ::size_type __pyx_t_0;
  std::span<Py_ssize_t const > ::size_type __pyx_t_1;
  std::span<Py_ssize_t const > ::size_type __pyx_t_2;
};


/* "dwave/optimization/model.pyx":1860
 *         return sizeinfo.max.value() * self.array_ptr.itemsize()
 * 
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         """Return the stride length, in bytes, for traversing a symbol.
 * 
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides {
  PyObject_HEAD
  std::span<Py_ssize_t const >  __pyx_v_strides;
};


/* "dwave/optimization/model.pyx":1877
 *         """
 *         strides = self.array_ptr.strides()
 *         return tuple(strides[i] for i in range(strides.size()))             # <<<<<<<<<<<<<<
 * 
 *     def sum(self):
 */
struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides *__pyx_outer_scope;
  std::span<Py_ssize_t const > ::size_type __pyx_genexpr_arg_0;
  std::span<Py_ssize_t const > ::size_type __pyx_v_i;
  std::span<Py_ssize_t const > ::size_type __pyx_t_0;
  std::span<Py_ssize_t const > ::size_type __pyx_t_1;
  std::span<Py_ssize_t const > ::size_type __pyx_t_2;
};



/* "dwave/optimization/model.pyx":62
 * 
 * 
 * cdef class Model:             # <<<<<<<<<<<<<<
 *     """Nonlinear model.
 * 
 */

struct __pyx_vtabstruct_5dwave_12optimization_5model_Model {
  bool (*is_locked)(struct __pyx_obj_5dwave_12optimization_5model_Model *, int __pyx_skip_dispatch);
  Py_ssize_t (*num_decisions)(struct __pyx_obj_5dwave_12optimization_5model_Model *, int __pyx_skip_dispatch);
  Py_ssize_t (*num_nodes)(struct __pyx_obj_5dwave_12optimization_5model_Model *, int __pyx_skip_dispatch);
  Py_ssize_t (*num_constraints)(struct __pyx_obj_5dwave_12optimization_5model_Model *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *__pyx_vtabptr_5dwave_12optimization_5model_Model;


/* "dwave/optimization/model.pyx":893
 * 
 * 
 * cdef class States:             # <<<<<<<<<<<<<<
 *     r"""States of a symbol in a model.
 * 
 */

struct __pyx_vtabstruct_5dwave_12optimization_5model_States {
  void (*attach_states)(struct __pyx_obj_5dwave_12optimization_5model_States *, std::vector<dwave::optimization::State> );
  std::vector<dwave::optimization::State>  (*detach_states)(struct __pyx_obj_5dwave_12optimization_5model_States *);
  PyObject *(*resolve)(struct __pyx_obj_5dwave_12optimization_5model_States *, int __pyx_skip_dispatch);
  Py_ssize_t (*size)(struct __pyx_obj_5dwave_12optimization_5model_States *, int __pyx_skip_dispatch);
  struct __pyx_obj_5dwave_12optimization_5model_Model *(*_model)(struct __pyx_obj_5dwave_12optimization_5model_States *);
};
static struct __pyx_vtabstruct_5dwave_12optimization_5model_States *__pyx_vtabptr_5dwave_12optimization_5model_States;


/* "dwave/optimization/model.pyx":1157
 * 
 * 
 * cdef class Symbol:             # <<<<<<<<<<<<<<
 *     """Base class for symbols.
 * 
 */

struct __pyx_vtabstruct_5dwave_12optimization_5model_Symbol {
  void (*initialize_node)(struct __pyx_obj_5dwave_12optimization_5model_Symbol *, struct __pyx_obj_5dwave_12optimization_5model_Model *, dwave::optimization::Node *);
  bool (*expired)(struct __pyx_obj_5dwave_12optimization_5model_Symbol *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5dwave_12optimization_5model_Symbol *__pyx_vtabptr_5dwave_12optimization_5model_Symbol;


/* "dwave/optimization/model.pyx":1530
 * # extension base class, so to support that we assume all ArraySymbols are
 * # also Symbols (probably a fair assumption)
 * cdef class ArraySymbol(Symbol):             # <<<<<<<<<<<<<<
 *     """Base class for symbols that can be interpreted as an array."""
 * 
 */

struct __pyx_vtabstruct_5dwave_12optimization_5model_ArraySymbol {
  struct __pyx_vtabstruct_5dwave_12optimization_5model_Symbol __pyx_base;
  void (*initialize_array)(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *, dwave::optimization::Array *);
};
static struct __pyx_vtabstruct_5dwave_12optimization_5model_ArraySymbol *__pyx_vtabptr_5dwave_12optimization_5model_ArraySymbol;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* pep479.proto */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* RaiseUnboundLocalError.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* RaiseClosureNameError.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* RaiseKeywordRequired.proto */
static void __Pyx_RaiseKeywordRequired(const char* func_name, PyObject* kw_name);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* ModInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_mod_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* PySequenceMultiply.proto */
#define __Pyx_PySequence_Multiply_Left(mul, seq)  __Pyx_PySequence_Multiply(seq, mul)
static CYTHON_INLINE PyObject* __Pyx_PySequence_Multiply(PyObject *seq, Py_ssize_t mul);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
#define __Pyx_HasAttr(o, n)  PyObject_HasAttrWithError(o, n)
#else
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);
#endif

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_8
#define __PYX_HAVE_RT_ImportType_proto_3_0_8
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_8 {
   __Pyx_ImportType_CheckSize_Error_3_0_8 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_8 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_8 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size);
#endif

/* ClassMethod.proto */
#include "descrobject.h"
CYTHON_UNUSED static PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* pybytes_as_double.proto */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj);
static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);
static CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
    as_c_string = PyBytes_AS_STRING(obj);
    size = PyBytes_GET_SIZE(obj);
#else
    if (PyBytes_AsStringAndSize(obj, &as_c_string, &size) < 0) {
        return (double)-1;
    }
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}
static CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
    as_c_string = PyByteArray_AS_STRING(obj);
    size = PyByteArray_GET_SIZE(obj);
#else
    as_c_string = PyByteArray_AsString(obj);
    if (as_c_string == NULL) {
        return (double)-1;
    }
    size = PyByteArray_Size(obj);
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}

/* pyunicode_as_double.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
static const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {
    int last_was_punctuation;
    Py_ssize_t i;
    last_was_punctuation = 1;
    for (i=start; i <= end; i++) {
        Py_UCS4 chr = PyUnicode_READ(kind, data, i);
        int is_punctuation = (chr == '_') | (chr == '.');
        *buffer = (char)chr;
        buffer += (chr != '_');
        if (unlikely(chr > 127)) goto parse_failure;
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {
    int matches = 1;
    Py_UCS4 chr;
    Py_UCS4 sign = PyUnicode_READ(kind, data, start);
    int is_signed = (sign == '-') | (sign == '+');
    start += is_signed;
    length -= is_signed;
    switch (PyUnicode_READ(kind, data, start)) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'a') | (chr == 'A');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'n') | (chr == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'f') | (chr == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+3);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+4);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+5);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+6);
            matches &= (chr == 't') | (chr == 'T');
            chr = PyUnicode_READ(kind, data, start+7);
            matches &= (chr == 'y') | (chr == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {
    double value;
    const char *last;
    char *end;
    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);
    const int kind = PyUnicode_KIND(obj);
    const void* data = PyUnicode_DATA(obj);
    start = 0;
    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))
        start++;
    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))
        length--;
    length -= start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    if (length < 40) {
        char number[40];
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}
#endif
static CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))
        return (double)-1;
    if (likely(PyUnicode_IS_ASCII(obj))) {
        const char *s;
        Py_ssize_t length;
        s = PyUnicode_AsUTF8AndSize(obj, &length);
        return __Pyx__PyBytes_AsDouble(obj, s, length);
    }
    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);
#else
    return __Pyx_SlowPyString_AsDouble(obj);
#endif
}

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CoroutineBase.proto */
struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct __pyx_CoroutineObject {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
#define __Pyx_Generator_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(PyObject *module);

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_0_8(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self); /* proto*/
static bool __pyx_f_5dwave_12optimization_5model_5Model_is_locked(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static Py_ssize_t __pyx_f_5dwave_12optimization_5model_5Model_num_constraints(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static Py_ssize_t __pyx_f_5dwave_12optimization_5model_5Model_num_decisions(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static Py_ssize_t __pyx_f_5dwave_12optimization_5model_5Model_num_nodes(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_5dwave_12optimization_5model_6States_attach_states(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, std::vector<dwave::optimization::State>  __pyx_v_states); /* proto*/
static std::vector<dwave::optimization::State>  __pyx_f_5dwave_12optimization_5model_6States_detach_states(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self); /* proto*/
static struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_f_5dwave_12optimization_5model_6States__model(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_5dwave_12optimization_5model_6States_resolve(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static Py_ssize_t __pyx_f_5dwave_12optimization_5model_6States_size(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_5dwave_12optimization_5model_6Symbol_initialize_node(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_model, dwave::optimization::Node *__pyx_v_node_ptr); /* proto*/
static bool __pyx_f_5dwave_12optimization_5model_6Symbol_expired(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_5dwave_12optimization_5model_11ArraySymbol_initialize_array(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, dwave::optimization::Array *__pyx_v_array_ptr); /* proto*/

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.memory" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "libcpp.optional" */

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "dwave.optimization.libcpp" */

/* Module declarations from "dwave.optimization.libcpp.state" */

/* Module declarations from "dwave.optimization.libcpp.array" */

/* Module declarations from "dwave.optimization.libcpp.graph" */

/* Module declarations from "cpython.version" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "cpython.exc" */

/* Module declarations from "cpython.module" */

/* Module declarations from "cpython.mem" */

/* Module declarations from "cpython.tuple" */

/* Module declarations from "cpython.list" */

/* Module declarations from "cpython.sequence" */

/* Module declarations from "cpython.mapping" */

/* Module declarations from "cpython.iterator" */

/* Module declarations from "cpython.number" */

/* Module declarations from "cpython.int" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.bool" */

/* Module declarations from "cpython.long" */

/* Module declarations from "cpython.float" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.complex" */

/* Module declarations from "cpython.string" */

/* Module declarations from "libc.stddef" */

/* Module declarations from "cpython.unicode" */

/* Module declarations from "cpython.pyport" */

/* Module declarations from "cpython.dict" */

/* Module declarations from "cpython.instance" */

/* Module declarations from "cpython.function" */

/* Module declarations from "cpython.method" */

/* Module declarations from "cpython.weakref" */

/* Module declarations from "cpython.getargs" */

/* Module declarations from "cpython.pythread" */

/* Module declarations from "cpython.pystate" */

/* Module declarations from "cpython.cobject" */

/* Module declarations from "cpython.oldbuffer" */

/* Module declarations from "cpython.set" */

/* Module declarations from "cpython.buffer" */

/* Module declarations from "cpython.bytes" */

/* Module declarations from "cpython.pycapsule" */

/* Module declarations from "cpython.contextvars" */

/* Module declarations from "cpython" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "dwave.optimization.symbols" */
static PyObject *(*__pyx_fuse_0__pyx_f_5dwave_12optimization_7symbols_symbol_from_ptr)(struct __pyx_obj_5dwave_12optimization_5model_Model *, dwave::optimization::Node *); /*proto*/
static PyObject *(*__pyx_fuse_1__pyx_f_5dwave_12optimization_7symbols_symbol_from_ptr)(struct __pyx_obj_5dwave_12optimization_5model_Model *, dwave::optimization::Array *); /*proto*/

/* Module declarations from "dwave.optimization.model" */
static PyObject *__pyx_f_5dwave_12optimization_5model___pyx_unpickle_StateView__set_state(struct __pyx_obj_5dwave_12optimization_5model_StateView *, PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "dwave.optimization.model"
extern int __pyx_module_is_main_dwave__optimization__model;
int __pyx_module_is_main_dwave__optimization__model = 0;

/* Implementation of "dwave.optimization.model" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_filter;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_ReferenceError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_super;
/* #### Code section: string_decls ### */
static const char __pyx_k_G[] = "G";
static const char __pyx_k_I[] = "<I";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k__3[] = ".";
static const char __pyx_k__8[] = " ";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_it[] = "it";
static const char __pyx_k_n0[] = "n0";
static const char __pyx_k_n1[] = "n1";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_rb[] = "rb";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_wb[] = "wb";
static const char __pyx_k_zf[] = "zf";
static const char __pyx_k_Add[] = "Add";
static const char __pyx_k_All[] = "All";
static const char __pyx_k_Max[] = "Max";
static const char __pyx_k_Min[] = "Min";
static const char __pyx_k_NOT[] = "NOT";
static const char __pyx_k_Sum[] = "Sum";
static const char __pyx_k__11[] = "/";
static const char __pyx_k__12[] = "\n";
static const char __pyx_k__18[] = ",";
static const char __pyx_k__19[] = ":";
static const char __pyx_k__23[] = "";
static const char __pyx_k__30[] = "*";
static const char __pyx_k_abc[] = "abc";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_cid[] = "cid";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_inf[] = "inf";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_pid[] = "pid";
static const char __pyx_k_ptr[] = "ptr";
static const char __pyx_k_ref[] = "ref";
static const char __pyx_k_rhs[] = "rhs";
static const char __pyx_k_set[] = "set";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_w_b[] = "w+b";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_DWNL[] = "DWNL";
static const char __pyx_k_Prod[] = "Prod";
static const char __pyx_k__179[] = "?";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_fadj[] = "fadj";
static const char __pyx_k_fcls[] = "fcls";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_json[] = "json";
static const char __pyx_k_list[] = "list";
static const char __pyx_k_load[] = "load";
static const char __pyx_k_lock[] = "lock";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_pptr[] = "pptr";
static const char __pyx_k_pred[] = "pred";
static const char __pyx_k_prod[] = "prod";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_save[] = "save";
static const char __pyx_k_seek[] = "seek";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_sets[] = "sets";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Equal[] = "Equal";
static const char __pyx_k_MAYBE[] = "MAYBE";
static const char __pyx_k_Model[] = "Model";
static const char __pyx_k_UTF_8[] = "UTF-8";
static const char __pyx_k_all_2[] = "all";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_ascii[] = "ascii";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_dwave[] = "dwave";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_fname[] = "fname";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_lists[] = "lists";
static const char __pyx_k_loads[] = "loads";
static const char __pyx_k_match[] = "match";
static const char __pyx_k_maybe[] = "maybe";
static const char __pyx_k_model[] = "model";
static const char __pyx_k_nodes[] = "nodes/";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_Square[] = "Square";
static const char __pyx_k_States[] = "States";
static const char __pyx_k_Symbol[] = "Symbol";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_binary[] = "binary";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_equals[] = "equals";
static const char __pyx_k_filter[] = "filter";
static const char __pyx_k_future[] = "future";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_islice[] = "islice";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_linear[] = "linear";
static const char __pyx_k_lineno[] = "lineno";
static const char __pyx_k_locked[] = "locked";
static const char __pyx_k_main_2[] = "main";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_resize[] = "resize";
static const char __pyx_k_rstrip[] = "rstrip";
static const char __pyx_k_search[] = "search";
static const char __pyx_k_states[] = "/states/";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_symbol[] = "symbol";
static const char __pyx_k_unlock[] = "unlock";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_DiGraph[] = "DiGraph";
static const char __pyx_k_Reshape[] = "Reshape";
static const char __pyx_k_ZipFile[] = "ZipFile";
static const char __pyx_k_adjlist[] = "adjlist";
static const char __pyx_k_but_got[] = " but got ";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_encoder[] = "encoder";
static const char __pyx_k_expired[] = "expired";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_getinfo[] = "getinfo";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_instead[] = " instead";
static const char __pyx_k_integer[] = "integer";
static const char __pyx_k_ndarray[] = "ndarray";
static const char __pyx_k_node_id[] = "node_id";
static const char __pyx_k_numbers[] = "numbers";
static const char __pyx_k_padding[] = "padding";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_resolve[] = "resolve";
static const char __pyx_k_strides[] = "strides";
static const char __pyx_k_symbols[] = "symbols";
static const char __pyx_k_to_file[] = "to_file";
static const char __pyx_k_version[] = "version";
static const char __pyx_k_weakref[] = "weakref";
static const char __pyx_k_zipfile[] = "zipfile";
static const char __pyx_k_zipinfo[] = "zipinfo";
static const char __pyx_k_Absolute[] = "Absolute";
static const char __pyx_k_Constant[] = "Constant";
static const char __pyx_k_Integral[] = "Integral";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_Multiply[] = "Multiply";
static const char __pyx_k_Negative[] = "Negative";
static const char __pyx_k_Subtract[] = "Subtract";
static const char __pyx_k_add_edge[] = "add_edge";
static const char __pyx_k_add_node[] = "add_node";
static const char __pyx_k_constant[] = "constant";
static const char __pyx_k_expected[] = "expected";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_max_size[] = "max_size";
static const char __pyx_k_min_size[] = "min_size";
static const char __pyx_k_minimize[] = "minimize";
static const char __pyx_k_networkx[] = "networkx";
static const char __pyx_k_operator[] = "operator";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_register[] = "register";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_sizeinfo[] = "sizeinfo";
static const char __pyx_k_subclass[] = "subclass";
static const char __pyx_k_tempfile[] = "tempfile";
static const char __pyx_k_writestr[] = "writestr";
static const char __pyx_k_LessEqual[] = "LessEqual";
static const char __pyx_k_Model_set[] = "Model.set";
static const char __pyx_k_StateView[] = "StateView";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_array_npy[] = "array.npy";
static const char __pyx_k_classname[] = "classname";
static const char __pyx_k_directory[] = "directory";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_from_file[] = "from_file";
static const char __pyx_k_functools[] = "functools";
static const char __pyx_k_has_state[] = "has_state";
static const char __pyx_k_info_json[] = "info.json";
static const char __pyx_k_into_file[] = "into_file";
static const char __pyx_k_is_locked[] = "is_locked";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_num_nodes[] = "num_nodes";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_quadratic[] = "quadratic";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_set_state[] = "set_state";
static const char __pyx_k_DEFINITELY[] = "DEFINITELY";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_Model_list[] = "Model.list";
static const char __pyx_k_Model_lock[] = "Model.lock";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_array_like[] = "array_like";
static const char __pyx_k_contextlib[] = "contextlib";
static const char __pyx_k_header_len[] = "header_len";
static const char __pyx_k_initialize[] = "initialize";
static const char __pyx_k_model_info[] = "model_info";
static const char __pyx_k_num_states[] = "num_states";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_separators[] = "separators";
static const char __pyx_k_state_size[] = "state_size";
static const char __pyx_k_subclasses[] = "__subclasses__";
static const char __pyx_k_ArraySymbol[] = "ArraySymbol";
static const char __pyx_k_JSONEncoder[] = "JSONEncoder";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_SetVariable[] = "SetVariable";
static const char __pyx_k_States_size[] = "States.size";
static const char __pyx_k_adj_adjlist[] = "adj.adjlist";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_constraints[] = "constraints";
static const char __pyx_k_force_zip64[] = "force_zip64";
static const char __pyx_k_from_future[] = "from_future";
static const char __pyx_k_header_data[] = "_header_data";
static const char __pyx_k_lower_bound[] = "lower_bound";
static const char __pyx_k_num_symbols[] = "num_symbols";
static const char __pyx_k_read_prefix[] = "read_prefix";
static const char __pyx_k_reset_state[] = "reset_state";
static const char __pyx_k_result_hook[] = "result_hook";
static const char __pyx_k_state_index[] = "state_index";
static const char __pyx_k_to_networkx[] = "to_networkx";
static const char __pyx_k_upper_bound[] = "upper_bound";
static const char __pyx_k_version_txt[] = "version.txt";
static const char __pyx_k_DisjointList[] = "DisjointList";
static const char __pyx_k_ListVariable[] = "ListVariable";
static const char __pyx_k_Model_binary[] = "Model.binary";
static const char __pyx_k_Model_unlock[] = "Model.unlock";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_States_clear[] = "States.clear";
static const char __pyx_k_allow_pickle[] = "allow_pickle";
static const char __pyx_k_check_header[] = "check_header";
static const char __pyx_k_from_zipfile[] = "_from_zipfile";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_into_zipfile[] = "_into_zipfile";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_iter_symbols[] = "iter_symbols";
static const char __pyx_k_maybe_equals[] = "maybe_equals";
static const char __pyx_k_objective_id[] = "objective_id";
static const char __pyx_k_optimization[] = "optimization";
static const char __pyx_k_predecessors[] = "predecessors";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_BasicIndexing[] = "BasicIndexing";
static const char __pyx_k_DisjointLists[] = "DisjointLists";
static const char __pyx_k_Model_integer[] = "Model.integer";
static const char __pyx_k_Model_to_file[] = "Model.to_file";
static const char __pyx_k_States_resize[] = "States.resize";
static const char __pyx_k_Symbol_equals[] = "Symbol.equals";
static const char __pyx_k_TemporaryFile[] = "TemporaryFile";
static const char __pyx_k_basic_indices[] = "basic_indices";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_d_a_zA_z_Node[] = "\\d+([a-zA-z]+Node)";
static const char __pyx_k_header_data_2[] = "header_data";
static const char __pyx_k_nodetypes_txt[] = "nodetypes.txt";
static const char __pyx_k_num_decisions[] = "num_decisions";
static const char __pyx_k_only_decision[] = "only_decision";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_shares_memory[] = "shares_memory";
static const char __pyx_k_split_indices[] = "_split_indices";
static const char __pyx_k_BinaryVariable[] = "BinaryVariable";
static const char __pyx_k_DisjointBitSet[] = "DisjointBitSet";
static const char __pyx_k_Model_constant[] = "Model.constant";
static const char __pyx_k_Model_minimize[] = "Model.minimize";
static const char __pyx_k_QuadraticModel[] = "QuadraticModel";
static const char __pyx_k_ReferenceError[] = "ReferenceError";
static const char __pyx_k_States_resolve[] = "States.resolve";
static const char __pyx_k_States_to_file[] = "States.to_file";
static const char __pyx_k_Symbol_expired[] = "Symbol.expired";
static const char __pyx_k_add_constraint[] = "add_constraint";
static const char __pyx_k_contextmanager[] = "contextmanager";
static const char __pyx_k_disjoint_lists[] = "disjoint_lists";
static const char __pyx_k_iter_decisions[] = "iter_decisions";
static const char __pyx_k_max_num_states[] = "max_num_states";
static const char __pyx_k_objective_buff[] = "objective_buff";
static const char __pyx_k_objective_json[] = "objective.json";
static const char __pyx_k_seen_decisions[] = "seen_decisions";
static const char __pyx_k_ArraySymbol_all[] = "ArraySymbol.all";
static const char __pyx_k_ArraySymbol_max[] = "ArraySymbol.max";
static const char __pyx_k_ArraySymbol_min[] = "ArraySymbol.min";
static const char __pyx_k_ArraySymbol_sum[] = "ArraySymbol.sum";
static const char __pyx_k_DisjointBitSets[] = "DisjointBitSets";
static const char __pyx_k_IntegerVariable[] = "IntegerVariable";
static const char __pyx_k_Model_from_file[] = "Model.from_file";
static const char __pyx_k_Model_into_file[] = "Model.into_file";
static const char __pyx_k_Model_is_locked[] = "Model.is_locked";
static const char __pyx_k_Model_num_nodes[] = "Model.num_nodes";
static const char __pyx_k_collections_abc[] = "collections.abc";
static const char __pyx_k_iter_successors[] = "iter_successors";
static const char __pyx_k_node_subclasses[] = "_node_subclasses";
static const char __pyx_k_num_constraints[] = "num_constraints";
static const char __pyx_k_predecessor_ids[] = "predecessor_ids";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_quadratic_model[] = "quadratic_model";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_AdvancedIndexing[] = "AdvancedIndexing";
static const char __pyx_k_ArraySymbol_ndim[] = "ArraySymbol.ndim";
static const char __pyx_k_ArraySymbol_prod[] = "ArraySymbol.prod";
static const char __pyx_k_ArraySymbol_size[] = "ArraySymbol.size";
static const char __pyx_k_Model_state_size[] = "Model.state_size";
static const char __pyx_k_States_from_file[] = "States.from_file";
static const char __pyx_k_States_into_file[] = "States.into_file";
static const char __pyx_k_Symbol_has_state[] = "Symbol.has_state";
static const char __pyx_k_advanced_indices[] = "advanced_indices";
static const char __pyx_k_constraints_json[] = "constraints.json";
static const char __pyx_k_iter_constraints[] = "iter_constraints";
static const char __pyx_k_primary_set_size[] = "primary_set_size";
static const char __pyx_k_ArraySymbol_shape[] = "ArraySymbol.shape";
static const char __pyx_k_ArraySymbol_state[] = "ArraySymbol.state";
static const char __pyx_k_Model_num_symbols[] = "Model.num_symbols";
static const char __pyx_k_Model_to_networkx[] = "Model.to_networkx";
static const char __pyx_k_States_initialize[] = "States.initialize";
static const char __pyx_k_Symbol_state_size[] = "Symbol.state_size";
static const char __pyx_k_disjoint_bit_sets[] = "disjoint_bit_sets";
static const char __pyx_k_iter_predecessors[] = "iter_predecessors";
static const char __pyx_k_num_disjoint_sets[] = "num_disjoint_sets";
static const char __pyx_k_size_is_unbounded[] = "size is unbounded";
static const char __pyx_k_to_be_a_subset_of[] = " to be a subset of ";
static const char __pyx_k_topological_index[] = "topological_index";
static const char __pyx_k_Model__header_data[] = "Model._header_data";
static const char __pyx_k_Model_iter_symbols[] = "Model.iter_symbols";
static const char __pyx_k_Model_set_line_767[] = "Model.set (line 767)";
static const char __pyx_k_States_from_future[] = "States.from_future";
static const char __pyx_k_Symbol_reset_state[] = "Symbol.reset_state";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_index_out_of_range[] = "index out of range: ";
static const char __pyx_k_num_disjoint_lists[] = "num_disjoint_lists";
static const char __pyx_k_state_from_zipfile[] = "_state_from_zipfile";
static const char __pyx_k_state_into_zipfile[] = "_state_into_zipfile";
static const char __pyx_k_ArraySymbol_reshape[] = "ArraySymbol.reshape";
static const char __pyx_k_ArraySymbol_strides[] = "ArraySymbol.strides";
static const char __pyx_k_Model_list_line_565[] = "Model.list (line 565)";
static const char __pyx_k_Model_lock_line_584[] = "Model.lock (line 584)";
static const char __pyx_k_Model_num_decisions[] = "Model.num_decisions";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_Symbol_maybe_equals[] = "Symbol.maybe_equals";
static const char __pyx_k_decision_state_size[] = "decision_state_size";
static const char __pyx_k_Model_add_constraint[] = "Model.add_constraint";
static const char __pyx_k_Model_disjoint_lists[] = "Model.disjoint_lists";
static const char __pyx_k_Model_iter_decisions[] = "Model.iter_decisions";
static const char __pyx_k_Symbol__from_zipfile[] = "Symbol._from_zipfile";
static const char __pyx_k_Symbol__into_zipfile[] = "Symbol._into_zipfile";
static const char __pyx_k_Symbol_shares_memory[] = "Symbol.shares_memory";
static const char __pyx_k_shape_locals_genexpr[] = "shape.<locals>.genexpr";
static const char __pyx_k_value_cannot_be_None[] = "value cannot be None";
static const char __pyx_k_Model___reduce_cython[] = "Model.__reduce_cython__";
static const char __pyx_k_Model_binary_line_108[] = "Model.binary (line 108)";
static const char __pyx_k_Model_num_constraints[] = "Model.num_constraints";
static const char __pyx_k_Model_quadratic_model[] = "Model.quadratic_model";
static const char __pyx_k_States_clear_line_967[] = "States.clear (line 967)";
static const char __pyx_k_States_size_line_1135[] = "States.size (line 1135)";
static const char __pyx_k_equals_locals_genexpr[] = "equals.<locals>.genexpr";
static const char __pyx_k_unexpected_index_type[] = "unexpected index type";
static const char __pyx_k_ArraySymbol_state_size[] = "ArraySymbol.state_size";
static const char __pyx_k_Model_integer_line_331[] = "Model.integer (line 331)";
static const char __pyx_k_Model_iter_constraints[] = "Model.iter_constraints";
static const char __pyx_k_States___reduce_cython[] = "States.__reduce_cython__";
static const char __pyx_k_Symbol___reduce_cython[] = "Symbol.__reduce_cython__";
static const char __pyx_k_Symbol_iter_successors[] = "Symbol.iter_successors";
static const char __pyx_k_pyx_unpickle_StateView[] = "__pyx_unpickle_StateView";
static const char __pyx_k_strides_locals_genexpr[] = "strides.<locals>.genexpr";
static const char __pyx_k_Model___setstate_cython[] = "Model.__setstate_cython__";
static const char __pyx_k_Model_constant_line_127[] = "Model.constant (line 127)";
static const char __pyx_k_Model_disjoint_bit_sets[] = "Model.disjoint_bit_sets";
static const char __pyx_k_Model_minimize_line_628[] = "Model.minimize (line 628)";
static const char __pyx_k_States_resize_line_1088[] = "States.resize (line 1088)";
static const char __pyx_k_ArraySymbol_maybe_equals[] = "ArraySymbol.maybe_equals";
static const char __pyx_k_Model_num_nodes_line_697[] = "Model.num_nodes (line 697)";
static const char __pyx_k_States___setstate_cython[] = "States.__setstate_cython__";
static const char __pyx_k_Symbol___setstate_cython[] = "Symbol.__setstate_cython__";
static const char __pyx_k_Symbol_iter_predecessors[] = "Symbol.iter_predecessors";
static const char __pyx_k_Symbol_topological_index[] = "Symbol.topological_index";
static const char __pyx_k_dwave_optimization_model[] = "dwave.optimization.model";
static const char __pyx_k_getitem___locals_genexpr[] = "__getitem__.<locals>.genexpr";
static const char __pyx_k_register_node_subclasses[] = "_register_node_subclasses";
static const char __pyx_k_Model_decision_state_size[] = "Model.decision_state_size";
static const char __pyx_k_Model_state_size_line_789[] = "Model.state_size (line 789)";
static const char __pyx_k_StateView___reduce_cython[] = "StateView.__reduce_cython__";
static const char __pyx_k_state_size_locals_genexpr[] = "state_size.<locals>.genexpr";
static const char __pyx_k_unexpected_predecessor_id[] = "unexpected predecessor id";
static const char __pyx_k_ArraySymbol_size_line_1740[] = "ArraySymbol.size (line 1740)";
static const char __pyx_k_Model_num_symbols_line_717[] = "Model.num_symbols (line 717)";
static const char __pyx_k_Model_to_networkx_line_817[] = "Model.to_networkx (line 817)";
static const char __pyx_k_Symbol__state_from_zipfile[] = "Symbol._state_from_zipfile";
static const char __pyx_k_Symbol__state_into_zipfile[] = "Symbol._state_into_zipfile";
static const char __pyx_k_dwave_optimization_symbols[] = "dwave.optimization.symbols";
static const char __pyx_k_ArraySymbol___reduce_cython[] = "ArraySymbol.__reduce_cython__";
static const char __pyx_k_ArraySymbol_shape_line_1722[] = "ArraySymbol.shape (line 1722)";
static const char __pyx_k_ArraySymbol_state_line_1757[] = "ArraySymbol.state (line 1757)";
static const char __pyx_k_Model_iter_symbols_line_550[] = "Model.iter_symbols (line 550)";
static const char __pyx_k_StateView___setstate_cython[] = "StateView.__setstate_cython__";
static const char __pyx_k_Model_add_constraint_line_87[] = "Model.add_constraint (line 87)";
static const char __pyx_k_Model_num_decisions_line_678[] = "Model.num_decisions (line 678)";
static const char __pyx_k_Symbol_reset_state_line_1356[] = "Symbol.reset_state (line 1356)";
static const char __pyx_k_dwave_optimization_model_pyx[] = "dwave/optimization/model.pyx";
static const char __pyx_k_ArraySymbol___setstate_cython[] = "ArraySymbol.__setstate_cython__";
static const char __pyx_k_ArraySymbol_reshape_line_1695[] = "ArraySymbol.reshape (line 1695)";
static const char __pyx_k_ArraySymbol_strides_line_1860[] = "ArraySymbol.strides (line 1860)";
static const char __pyx_k_Model_disjoint_lists_line_199[] = "Model.disjoint_lists (line 199)";
static const char __pyx_k_Model_iter_decisions_line_523[] = "Model.iter_decisions (line 523)";
static const char __pyx_k_unexpected_adj_adjlist_format[] = "unexpected adj.adjlist format";
static const char __pyx_k_Model_num_constraints_line_660[] = "Model.num_constraints (line 660)";
static const char __pyx_k_Model_quadratic_model_line_740[] = "Model.quadratic_model (line 740)";
static const char __pyx_k_ArraySymbol__state_from_zipfile[] = "ArraySymbol._state_from_zipfile";
static const char __pyx_k_ArraySymbol__state_into_zipfile[] = "ArraySymbol._state_into_zipfile";
static const char __pyx_k_Convert_the_model_to_a_NetworkX[] = "Convert the model to a NetworkX graph.\n        \n        Note:\n            Currently requires the installation of a GNU compiler.  \n        \n        Returns:\n            A :obj:`NetworkX <networkx:networkx.Graph>` graph.\n            \n        Examples:\n            This example converts a model to a graph. \n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> c = model.constant(8)\n            >>> i = model.integer((20, 30))\n            >>> g = model.to_networkx()   # doctest: +SKIP\n        ";
static const char __pyx_k_Iterate_over_all_constraints_in[] = "Iterate over all constraints in the model.\n        \n        Examples:\n            This example adds a single constraint to a model and iterates over it.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer()\n            >>> c = model.constant(5)\n            >>> model.add_constraint(i <= c)\n            >>> constraints = next(model.iter_constraints())\n        ";
static const char __pyx_k_Iterate_over_all_symbols_in_the[] = "Iterate over all symbols in the model.\n        \n        Examples:\n            This example iterates over a model's symbols.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer(1, lower_bound=10)\n            >>> c = model.constant([[2, 3], [5, 6]])\n            >>> symbol_1, symbol_2 = model.iter_symbols()\n        ";
static const char __pyx_k_Model_iter_constraints_line_507[] = "Model.iter_constraints (line 507)";
static const char __pyx_k_Nonlinear_models_are_especially[] = "Nonlinear models are especially suited for use with decision variables that \nrepresent a common logic, such as subsets of choices or permutations of ordering. \nFor example, in a \n`traveling salesperson problem <https://en.wikipedia.org/wiki/Travelling_salesman_problem>`_ \npermutations of the variables representing cities can signify the order of the \nroute being optimized and in a \n`knapsack problem <https://en.wikipedia.org/wiki/Knapsack_problem>`_ the \nvariables representing items can be divided into subsets of packed and not \npacked.\n";
static const char __pyx_k_Number_of_model_states_Examples[] = "Number of model states.\n        \n        Examples:\n            This example adds three uninitialized states to a model and\n            verifies the number of model states.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> model.states.resize(3)\n            >>> model.states.size()\n            3\n        ";
static const char __pyx_k_Number_of_nodes_in_the_directed[] = "Number of nodes in the directed acyclic graph for the model.\n        \n        See also:\n            :meth:`.num_symbols`\n        \n        Examples:\n            This example add a single (size 20) decision symbol and \n            a single (size 3) constant symbol checks the number of \n            nodes in the model.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> c = model.constant([1, 5, 8.4])\n            >>> i = model.integer(20, upper_bound=100)\n            >>> model.num_nodes()\n            2\n        ";
static const char __pyx_k_cannot_load_states_into_a_model[] = "cannot load states into a model with mismatched decisions";
static const char __pyx_k_copy_False_is_not_yet_supported[] = "copy=False is not (yet) supported";
static const char __pyx_k_has_not_implemented_state_deser[] = " has not implemented state deserialization";
static const char __pyx_k_has_not_implemented_state_seria[] = " has not implemented state serialization";
static const char __pyx_k_register_node_subclasses_locals[] = "_register_node_subclasses.<locals>.register";
static const char __pyx_k_self__graph_cannot_be_converted[] = "self._graph cannot be converted to a Python object for pickling";
static const char __pyx_k_self_array_ptr_self_expired_ptr[] = "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_the_value_of_an_array_with_more[] = "the value of an array with more than one element is ambiguous";
static const char __pyx_k_Add_a_constraint_to_the_model_Ar[] = "Add a constraint to the model.\n        \n        Args:\n            value: Value that must evaluate to True for the state \n                of the model to be feasible. \n                \n        Examples:\n            This example adds a single constraint to a model.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer()\n            >>> c = model.constant(5)\n            >>> model.add_constraint(i <= c)\n        ";
static const char __pyx_k_An_estimate_of_the_size_in_bytes[] = "An estimate of the size, in bytes, of all states in the model.\n\n        Iterates over the model's states and totals the sizes of all. \n        \n        Examples:\n            This example estimates the size of a model's states. \n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> c = model.constant([1, 5, 8.4])\n            >>> i = model.integer(20, upper_bound=100)\n            >>> model.state_size()     \n            184\n        ";
static const char __pyx_k_An_estimated_size_in_bytes_of_th[] = "An estimated size, in bytes, of the model's decision states.\n        \n        Examples:\n            This example checks the size of a model with one \n            :math:`10 \\times 10`-sized integer symbol.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> visit_site = model.integer((10, 10))     \n            >>> model.decision_state_size()         \n            800\n        ";
static const char __pyx_k_ArraySymbol_maybe_equals_line_16[] = "ArraySymbol.maybe_equals (line 1634)";
static const char __pyx_k_ArraySymbol_state_size_line_1830[] = "ArraySymbol.state_size (line 1830)";
static const char __pyx_k_ArraySymbols_cannot_be_construct[] = "ArraySymbols cannot be constructed directly";
static const char __pyx_k_Cannot_initialize_states_of_an_u[] = "Cannot initialize states of an unlocked model";
static const char __pyx_k_Clear_any_saved_states_Clears_an[] = "Clear any saved states.\n\n        Clears any memory allocated to the states.\n        \n        Examples:\n            This example clears a state set on an integer decision symbol.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer(2)\n            >>> model.states.resize(3)\n            >>> i.set_state(0, [3, 5])\n            >>> print(i.state(0))\n            [3. 5.]\n            >>> model.states.clear()\n        ";
static const char __pyx_k_Compare_to_another_symbol_Args_o[] = "Compare to another symbol.\n        \n        Args:\n            other: Another symbol in the model.\n            \n        Returns:\n            True if the two symbols might be equal.\n            \n        Examples:\n            This example compares \n            :class:`~dwave.optimization.symbols.IntegerVariable` symbols\n            of different sizes.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> i = model.integer(3, lower_bound=0, upper_bound=20)\n            >>> j = model.integer(3, lower_bound=-10, upper_bound=10)\n            >>> k = model.integer(5, upper_bound=55)\n            >>> i.maybe_equals(j)\n            1\n            >>> i.maybe_equals(k)\n            0\n        ";
static const char __pyx_k_Create_a_binary_symbol_as_a_deci[] = "Create a binary symbol as a decision variable.\n        \n        Args:\n            shape: Shape of the binary array to create.\n            \n        Returns:\n            A binary symbol.\n            \n        Examples:\n            This example creates a :math:`1 \\times 20`-sized binary symbol.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> x = model.binary((1,20))\n        ";
static const char __pyx_k_Create_a_class_dwave_optimizatio[] = "Create a :class:`~dwave.optimization.symbols.Reshape` symbol.\n        \n        Args:\n            shape: Shape of the created symbol.\n        \n        The new symbol reshapes without changing the antecedent symbol's \n        data.\n        \n        Examples:\n            This example reshapes a column vector into a row vector.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> j = model.integer(3, lower_bound=-10, upper_bound=10)\n            >>> j.shape()\n            (3,)\n            >>> k = j.reshape((1, 3))\n            >>> k.shape()\n            (1, 3)\n        ";
static const char __pyx_k_Create_a_constant_symbol_Args_ar[] = "Create a constant symbol.\n\n        Args:\n            array_like: An |array-like|_ representing a constant. Can be a scalar\n                or a NumPy array. If the array's ``dtype`` is ``np.double``, the \n                array is not copied.\n                \n        Returns:\n            A constant symbol. \n            \n        Examples:\n            This example creates a :math:`1 \\times 4`-sized constant symbol\n            with the specified values. \n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> time_limits = model.constant([10, 15, 5, 8.5])\n        ";
static const char __pyx_k_Create_a_disjoint_lists_symbol_a[] = "Create a disjoint-lists symbol as a decision variable. \n        \n        Divides a set of the elements of ``range(primary_set_size)`` into \n        ``num_disjoint_lists`` ordered partitions.\n\n        Also creates ``num_disjoint_lists`` extra successors from the\n        symbol that output the disjoint lists as arrays.\n\n        Args:\n            primary_set_size: Number of elements in the primary set to \n                be partitioned into disjoint lists.\n            num_disjoint_lists: Number of disjoint lists.\n\n        Returns:\n            A tuple where the first element is the disjoint-lists symbol \n            and the second is a list of its newly added successor nodes.\n            \n        Examples:\n            This example creates a symbol of 10 elements that is divided \n            into 4 lists. \n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> destinations, routes = model.disjoint_lists(10, 4)\n        ";
static const char __pyx_k_Create_a_disjoint_sets_symbol_as[] = "Create a disjoint-sets symbol as a decision variable. \n        \n        Divides a set of the elements of ``range(primary_set_size)`` into \n        ``num_disjoint_sets`` ordered partitions, stored as bit sets (arrays \n        of length ``primary_set_size``, with ones at the indices of elements\n        currently in the set, and zeros elsewhere). The ordering of a set is \n        not semantically meaningful.\n\n        Also creates from the symbol ``num_disjoint_sets`` extra successors \n        that output the disjoint sets as arrays.\n\n        Args:\n            primary_set_size: Number of elements in the primary set that are\n                partitioned into disjoint sets. Must be non-negative.\n            num_disjoint_sets: Number of disjoint sets. Must be positive.\n\n        Returns:\n            A tuple where the first element is the disjoint-sets symbol and \n            the second is a set of its newly added successors.\n            \n        Examples:\n            This example creates a symbol of 10 elements that is divided \n            into 4 sets. \n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> parts_set, parts_subsets = model.disjoint_bit_sets(10, 4)\n        ";
static const char __pyx_k_Create_a_list_symbol_as_a_decisi[] = "Create a list symbol as a decision variable.\n\n        Args:\n            n: Values in the list are permutations of ``range(n)``.\n            \n        Returns:\n            A list symbol. \n            \n        Examples:\n            This example creates a list symbol of 200 elements.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> routes = model.list(200)\n        ";
static const char __pyx_k_Create_a_quadratic_model_from_an[] = "Create a quadratic model from an array and a quadratic model.\n        \n        Args:\n            x: An array.\n            \n            quadratic: Quadratic values for the quadratic model.\n            \n            linear: Linear values for the quadratic model.\n        \n        Returns:\n            A quadratic model. \n            \n        Examples:\n            This example creates a quadratic model.\n        \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> x = model.binary(3)\n            >>> Q = {(0, 0): 0, (0, 1): 1, (0, 2): 2, (1, 1): 1, (1, 2): 3, (2, 2): 2}\n            >>> qm = model.quadratic_model(x, Q)\n            \n        ";
static const char __pyx_k_Create_a_set_symbol_as_a_decisio[] = "Create a set symbol as a decision variable.\n\n        Args:\n            n: Values in the set are subsets of ``range(n)``.\n            min_size: Minimum set size. Defaults to ``0``.\n            max_size: Maximum set size. Defaults to ``n``.\n\n        Returns:\n            A set symbol.\n            \n        Examples:\n            This example creates a set symbol of up to 4 elements\n            with values between 0 to 99.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> destinations = model.set(100, max_size=4)\n        ";
static const char __pyx_k_Create_an_integer_symbol_as_a_de[] = "Create an integer symbol as a decision variable.\n        \n        Args:\n            shape: Shape of the integer array to create.\n    \n            lower_bound: Lower bound for the symbol, which is the \n                smallest allowed integer value. If None, the default \n                value is used.\n            upper_bound: Upper bound for the symbol, which is the \n                largest allowed integer value. If None, the default \n                value is used.\n                \n        Returns:\n            An integer symbol. \n            \n        Examples:\n            This example creates a :math:`20 \\times 20`-sized integer symbol.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer((20,20), lower_bound=-100, upper_bound=100)\n        ";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0x60fdced, 0x3833493, 0x04b5c08) = (index, symbol))";
static const char __pyx_k_Iterate_over_a_node_s_predecesso[] = "Iterate over a node's predecessors in the model.\n        \n        Examples:\n            This example constructs a :math:`b = \\sum a` model, where :math:`a` \n            is a multiplication of two symbols, and iterates over the \n            predecessor's of :math:`b` (which is just :math:`a`).\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer((2, 2), upper_bound=20)\n            >>> c = model.constant([[21, 11], [10, 4]])\n            >>> a = c * i\n            >>> b = a.sum()\n            >>> a.equals(next(b.iter_predecessors()))\n            True\n        ";
static const char __pyx_k_Iterate_over_a_node_s_successors[] = "Iterate over a node's successors in the model.\n        \n        Examples:\n            This example constructs iterates over the successor nodes\n            of a :class:`~dwave.optimization.symbols.DisjointLists`\n            symbol.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> lsymbol, lsymbol_lists = model.disjoint_lists(\n            ...     primary_set_size=5, \n            ...     num_disjoint_lists=2)\n            >>> lsymbol_lists[0].equals(next(lsymbol.iter_successors()))\n            True\n        ";
static const char __pyx_k_Iterate_over_all_decision_variab[] = "Iterate over all decision variables in the model.\n        \n        Examples:\n            This example adds a single decision symbol to a model and iterates over it.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer()\n            >>> c = model.constant(5)\n            >>> model.add_constraint(i <= c)\n            >>> decisions = next(model.iter_decisions())\n        ";
static const char __pyx_k_Lock_the_model_No_new_symbols_ca[] = "Lock the model. \n        \n        No new symbols can be added to a locked model.\n\n        Returns:\n            A context manager. If the context is subsequently exited then the\n            :meth:`.unlock` will be called.\n        \n        See also:\n            :meth:`.is_locked`, :meth:`.unlock`\n            \n        Examples:\n            This example checks the status of a model after locking it and\n            subsequently unlocking it.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer(20, upper_bound=100)\n            >>> cntx = model.lock()\n            >>> model.is_locked()\n            True\n            >>> model.unlock()\n            >>> model.is_locked()\n            False\n\n            This example locks a model temporarily with a context manager.\n\n            >>> model = Model()\n            >>> with model.lock():\n            ...     # no nodes can be added within the context\n            ...     print(model.is_locked())\n            True\n            >>> model.is_locked()\n            False\n        ";
static const char __pyx_k_Model_decision_state_size_line_1[] = "Model.decision_state_size (line 149)";
static const char __pyx_k_Model_disjoint_bit_sets_line_164[] = "Model.disjoint_bit_sets (line 164)";
static const char __pyx_k_Number_of_constraints_in_the_mod[] = "Number of constraints in the model.\n        \n        Examples:\n            This example checks the number of constraints in the model after \n            adding a couple of constraints.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer()\n            >>> c = model.constant([5, -14])\n            >>> model.add_constraint(i <= c[0])\n            >>> model.add_constraint(c[1] <= i)\n            >>> model.num_constraints()\n            2\n        ";
static const char __pyx_k_Number_of_independent_decision_n[] = "Number of independent decision nodes in the model. \n        \n        An array-of-integers symbol, for example, counts as a single \n        decision node.\n        \n        Examples:\n            This example checks the number of decisions in a model after \n            adding a single (size 20) decision symbol.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> c = model.constant([1, 5, 8.4])\n            >>> i = model.integer(20, upper_bound=100)\n            >>> model.num_decisions()\n            1\n        ";
static const char __pyx_k_Number_of_symbols_tracked_by_the[] = "Number of symbols tracked by the model. \n        \n        Equivalent to the number of nodes in the directed acyclic \n        graph for the model.\n        \n        See also:\n            :meth:`.num_nodes`\n        \n        Examples:\n            This example add a single (size 20) decision symbol and \n            a single (size 3) constant symbol checks the number of \n            symbols in the model.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> c = model.constant([1, 5, 8.4])\n            >>> i = model.integer(20, upper_bound=100)\n            >>> model.num_symbols()\n            2\n        ";
static const char __pyx_k_Reset_the_state_of_a_node_and_an[] = "Reset the state of a node and any successor symbols.\n        \n        Args:\n            index: Index of the state to reset.\n            \n        Examples:\n            This example sets two states on a symbol with two successor symbols\n            and resets just one state. \n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> lsymbol, lsymbol_lists = model.disjoint_lists(primary_set_size=5, num_disjoint_lists=2)\n            >>> with model.lock():\n            ...     model.states.resize(2)\n            ...     lsymbol.set_state(0, [[0, 4], [1, 2, 3]])\n            ...     lsymbol.set_state(1, [[3, 4], [0, 1, 2]])\n            ...     print(f\"state 0: {lsymbol_lists[0].state(0)} and {lsymbol_lists[1].state(0)}\")\n            ...     print(f\"state 1: {lsymbol_lists[0].state(1)} and {lsymbol_lists[1].state(1)}\")\n            ...     lsymbol.reset_state(0)\n            ...     print(\"After reset:\")\n            ...     print(f\"state 0: {lsymbol_lists[0].state(0)} and {lsymbol_lists[1].state(0)}\")\n            ...     print(f\"state 1: {lsymbol_lists[0].state(1)} and {lsymbol_lists[1].state(1)}\")\n            state 0: [0. 4.] and [1. 2. 3.]\n            state 1: [3. 4.] and [0. 1. 2.]\n            After reset:\n            state 0: [0. 1. 2. 3. 4.] and []\n            state 1: [3. 4.] and [0. 1. 2.]\n        ";
static const char __pyx_k_Resize_the_number_of_states_If_n[] = "Resize the number of states.\n\n        If ``n`` is smaller than the current :meth:`.size()`, \n        states are reduced to the first ``n`` states by removing \n        those beyond. If ``n`` is greater than the current \n        :meth:`.size()`, new uninitialized states are added \n        as needed to reach a size of ``n``.\n\n        Resizing to 0 is not  guaranteed to clear the memory allocated to\n        states.\n        \n        Args:\n            n: Required number of states. \n            \n        Examples:\n            This example adds three uninitialized states to a model.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer(2)\n            >>> model.states.resize(3)\n        ";
static const char __pyx_k_Return_an_estimated_byte_size_of[] = "Return an estimated byte-size of the state.\n        \n        Examples:\n            This example returns the size of an integer symbol.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> i = model.integer(2, lower_bound=0, upper_bound=20)\n            >>> i.state_size()\n            16\n        ";
static const char __pyx_k_Return_the_number_of_elements_in[] = "Return the number of elements in the symbol.\n\n        ``-1`` indicates a variable number of elements.\n        \n        Examples:\n            This example checks the size of a :math:`2 \\times 3`\n            binary symbol.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> x = model.binary((2, 3))\n            >>> x.size()\n            6\n        ";
static const char __pyx_k_Return_the_shape_of_the_symbol_E[] = "Return the shape of the symbol.\n        \n        Examples:\n            This example returns the shape of a newly instantiated symbol.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> x = model.binary(20)\n            >>> x.shape()\n            (20,)\n        ";
static const char __pyx_k_Return_the_state_of_the_node_Arg[] = "Return the state of the node.\n\n        Args:\n            index: Index of the state.\n            \n            copy: Currently only True is supported.\n\n        Returns:\n            State as a :class:`numpy.ndarray`.\n\n        Examples:\n            This example prints a node two states: initialized \n            and uninitialized. \n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> x = model.binary((2, 3))\n            >>> z = x.sum()\n            >>> with model.lock():\n            ...     model.states.resize(2)\n            ...     x.set_state(0, [[0, 0, 1], [1, 0, 1]])\n            ...     print(z.state(0))\n            ...     print(z.state(1))\n            3.0\n            0.0\n        ";
static const char __pyx_k_Return_the_stride_length_in_byte[] = "Return the stride length, in bytes, for traversing a symbol.\n        \n        Returns:\n            Tuple of the number of bytes to step in each dimension when \n            traversing a symbol.\n        \n        Examples:\n            This example returns the size of an integer symbol.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> i = model.integer((2, 3), upper_bound=20)\n            >>> i.strides()\n            (24, 8)\n        ";
static const char __pyx_k_Set_the_objective_value_to_minim[] = "Set the objective value to minimize.\n        \n        Optimization problems have an objective and/or constraints. The objective\n        expresses one or more aspects of the problem that should be minimized \n        (equivalent to maximization when multiplied by a minus sign). For example,\n        an optimized itinerary might minimize the value of distance traveled or\n        cost of transportation or travel time.\n        \n        Args:\n            value: Value for which to minimize the cost function.\n            \n        Examples:\n            This example minimizes a simple polynomial, :math:`y = i^2 - 4i`, \n            within bounds. \n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> i = model.integer(lower_bound=-5, upper_bound=5)\n            >>> c = model.constant(4)\n            >>> y = i*i - c*i\n            >>> model.minimize(y)\n        ";
static const char __pyx_k_Symbol_iter_predecessors_line_12[] = "Symbol.iter_predecessors (line 1266)";
static const char __pyx_k_Symbol_iter_successors_line_1289[] = "Symbol.iter_successors (line 1289)";
static const char __pyx_k_Symbol_topological_index_line_14[] = "Symbol.topological_index (line 1444)";
static const char __pyx_k_Symbols_cannot_be_constructed_di[] = "Symbols cannot be constructed directly";
static const char __pyx_k_Topological_index_of_the_node_Re[] = "Topological index of the node.\n\n        Return ``None`` if the model is not topologically sorted.\n        \n        Examples:\n            This example prints the indices of a two-symbol model.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> i = model.integer(100, lower_bound=20)\n            >>> sum_i = i.sum()\n            >>> with model.lock():\n            ...     for symbol in model.iter_symbols():\n            ...         print(f\"Symbol {type(symbol)} is node {symbol.topological_index()}\")\n            Symbol <class 'dwave.optimization.symbols.IntegerVariable'> is node 0\n            Symbol <class 'dwave.optimization.symbols.Sum'> is node 1\n        ";
static const char __pyx_k_accessing_the_states_of_a_garbag[] = "accessing the states of a garbage collected model";
static const char __pyx_k_appending_states_is_not_yet_impl[] = "appending states is not (yet) implemented";
static const char __pyx_k_decision_state_size_locals_genex[] = "decision_state_size.<locals>.genexpr";
static const char __pyx_k_disjoint_bit_sets_locals_genexpr[] = "disjoint_bit_sets.<locals>.genexpr";
static const char __pyx_k_encoded_model_has_an_unsupported[] = "encoded model has an unsupported node type";
static const char __pyx_k_expected_num_nodes_to_be_a_posit[] = "expected num_nodes to be a positive integer";
static const char __pyx_k_expected_num_states_to_be_a_posi[] = "expected num_states to be a positive integer";
static const char __pyx_k_header_data_does_not_match_the_d[] = "header data does not match the deserialized CQM. Expected ";
static const char __pyx_k_n_must_be_a_non_negative_integer[] = "n must be a non-negative integer";
static const char __pyx_k_objective_must_be_an_integer_and[] = "objective must be an integer and a valid node id";
static const char __pyx_k_only_integers_slices_and_array_s[] = "only integers, slices (`:`), and array symbols are valid indices";
static const char __pyx_k_only_squaring_is_currently_suppo[] = "only squaring is currently supported";
static const char __pyx_k_self__states_cannot_be_converted[] = "self._states cannot be converted to a Python object for pickling";
static const char __pyx_k_self_expired_ptr_self_node_ptr_c[] = "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_the_state_of_an_intermediate_var[] = "the state of an intermediate variable cannot be accessed without locking the model first. See model.lock().";
static const char __pyx_k_the_value_of_an_empty_array_is_a[] = "the value of an empty array is ambiguous";
static const char __pyx_k_unknown_file_type_expected_magic[] = "unknown file type, expected magic string ";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_5dwave_12optimization_5model_locked(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_model); /* proto */
static int __pyx_pf_5dwave_12optimization_5model_5Model___init__(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_2add_constraint(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_4binary(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_shape); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_6constant(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_array_like); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_19decision_state_size_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_8decision_state_size(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_17disjoint_bit_sets_genexpr(PyObject *__pyx_self, Py_ssize_t __pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_10disjoint_bit_sets(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, Py_ssize_t __pyx_v_primary_set_size, Py_ssize_t __pyx_v_num_disjoint_sets); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_12disjoint_lists(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, Py_ssize_t __pyx_v_primary_set_size, Py_ssize_t __pyx_v_num_disjoint_lists); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_14from_file(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_file, PyObject *__pyx_v_check_header); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_16integer(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_shape, PyObject *__pyx_v_lower_bound, PyObject *__pyx_v_upper_bound); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_18_header_data(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_only_decision, PyObject *__pyx_v_max_num_states); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_20into_file(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_file, Py_ssize_t __pyx_v_max_num_states, bool __pyx_v_only_decision); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_22is_locked(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_24iter_constraints(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_27iter_decisions(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_30iter_symbols(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_33list(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_35lock(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_37minimize(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_39num_constraints(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_41num_decisions(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_43num_nodes(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_45num_symbols(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_47quadratic_model(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_x, PyObject *__pyx_v_quadratic, PyObject *__pyx_v_linear); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_49set(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, Py_ssize_t __pyx_v_n, Py_ssize_t __pyx_v_min_size, PyObject *__pyx_v_max_size); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_10state_size_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_51state_size(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_53to_file(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_55to_networkx(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_57unlock(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_9objective___get__(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_6states___get__(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_11_lock_count___get__(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_59__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_61__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5dwave_12optimization_5model_6States___init__(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_model); /* proto */
static Py_ssize_t __pyx_pf_5dwave_12optimization_5model_6States_2__len__(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_4clear(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_6from_file(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, PyObject *__pyx_v_file, bool __pyx_v_replace, PyObject *__pyx_v_check_header); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_8from_future(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, PyObject *__pyx_v_future, PyObject *__pyx_v_result_hook); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_10initialize(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_12into_file(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, PyObject *__pyx_v_file); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_14resize(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, Py_ssize_t __pyx_v_n); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_16resolve(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_18size(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_20to_file(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_10_model_ref___get__(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_7_future___get__(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_12_result_hook___get__(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5dwave_12optimization_5model_6Symbol___init__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_6equals_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_2equals(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_4expired(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_6_from_zipfile(PyTypeObject *__pyx_v_cls, CYTHON_UNUSED PyObject *__pyx_v_zf, CYTHON_UNUSED PyObject *__pyx_v_directory, CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_model, PyObject *__pyx_v_predecessors); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_8has_state(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, Py_ssize_t __pyx_v_index); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_10_into_zipfile(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_zf, CYTHON_UNUSED PyObject *__pyx_v_directory); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_12iter_predecessors(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_15iter_successors(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_18maybe_equals(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_20reset_state(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, Py_ssize_t __pyx_v_index); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_22shares_memory(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_24_state_from_zipfile(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_zf, CYTHON_UNUSED PyObject *__pyx_v_directory, CYTHON_UNUSED Py_ssize_t __pyx_v_state_index); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_26_state_into_zipfile(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_zf, CYTHON_UNUSED PyObject *__pyx_v_directory, CYTHON_UNUSED Py_ssize_t __pyx_v_state_index); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_28state_size(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_30topological_index(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_5model___get__(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_25_register_node_subclasses_register(PyObject *__pyx_self, PyObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_3_register_node_subclasses(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_5_split_indices(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_indices); /* proto */
static int __pyx_pf_5dwave_12optimization_5model_11ArraySymbol___init__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_2__abs__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_4__add__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_6__eq__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_11__getitem___genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_11__getitem___3genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_11__getitem___6genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_8__getitem__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_10__le__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_12__mul__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_14__neg__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_16__pow__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, Py_ssize_t __pyx_v_exponent); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_18__sub__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_20all(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_22max(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_24maybe_equals(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_26min(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_28ndim(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_30prod(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_32reshape(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, PyObject *__pyx_v_shape); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_5shape_genexpr(PyObject *__pyx_self, std::span<Py_ssize_t const > ::size_type __pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_34shape(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_36size(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_38state(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, Py_ssize_t __pyx_v_index, bool __pyx_v_copy); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_40_state_from_zipfile(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, PyObject *__pyx_v_zf, PyObject *__pyx_v_directory, Py_ssize_t __pyx_v_state_index); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_42_state_into_zipfile(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, PyObject *__pyx_v_zf, PyObject *__pyx_v_directory, Py_ssize_t __pyx_v_state_index); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_44state_size(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_7strides_genexpr(PyObject *__pyx_self, std::span<Py_ssize_t const > ::size_type __pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_46strides(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_48sum(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5dwave_12optimization_5model_9StateView___init__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_symbol, Py_ssize_t __pyx_v_index); /* proto */
static int __pyx_pf_5dwave_12optimization_5model_9StateView_2__getbuffer__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self, Py_buffer *__pyx_v_buffer, CYTHON_UNUSED int __pyx_v_flags); /* proto */
static void __pyx_pf_5dwave_12optimization_5model_9StateView_4__releasebuffer__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self, CYTHON_UNUSED Py_buffer *__pyx_v_buffer); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_9StateView_5index___get__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_9StateView_6symbol___get__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_9StateView_6__reduce_cython__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_9StateView_8__setstate_cython__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5dwave_12optimization_5model_7__pyx_unpickle_StateView(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5dwave_12optimization_5model_Model(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model_States(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model_Symbol(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model_ArraySymbol(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model_StateView(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct__locked(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_15_shape(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_17_strides(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4bool_bool;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_7complex_complex;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_5dwave_12optimization_5model_Model;
  PyObject *__pyx_type_5dwave_12optimization_5model_States;
  PyObject *__pyx_type_5dwave_12optimization_5model_Symbol;
  PyObject *__pyx_type_5dwave_12optimization_5model_ArraySymbol;
  PyObject *__pyx_type_5dwave_12optimization_5model_StateView;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct__locked;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_15_shape;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_17_strides;
  PyObject *__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr;
  #endif
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model_Model;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model_States;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model_Symbol;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model_ArraySymbol;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model_StateView;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides;
  PyTypeObject *__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr;
  PyObject *__pyx_n_s_Absolute;
  PyObject *__pyx_n_s_Add;
  PyObject *__pyx_kp_u_Add_a_constraint_to_the_model_Ar;
  PyObject *__pyx_n_s_AdvancedIndexing;
  PyObject *__pyx_n_s_All;
  PyObject *__pyx_kp_u_An_estimate_of_the_size_in_bytes;
  PyObject *__pyx_kp_u_An_estimated_size_in_bytes_of_th;
  PyObject *__pyx_n_s_ArraySymbol;
  PyObject *__pyx_n_s_ArraySymbol___reduce_cython;
  PyObject *__pyx_n_s_ArraySymbol___setstate_cython;
  PyObject *__pyx_n_s_ArraySymbol__state_from_zipfile;
  PyObject *__pyx_n_s_ArraySymbol__state_into_zipfile;
  PyObject *__pyx_n_s_ArraySymbol_all;
  PyObject *__pyx_n_s_ArraySymbol_max;
  PyObject *__pyx_n_s_ArraySymbol_maybe_equals;
  PyObject *__pyx_kp_u_ArraySymbol_maybe_equals_line_16;
  PyObject *__pyx_n_s_ArraySymbol_min;
  PyObject *__pyx_n_s_ArraySymbol_ndim;
  PyObject *__pyx_n_s_ArraySymbol_prod;
  PyObject *__pyx_n_s_ArraySymbol_reshape;
  PyObject *__pyx_kp_u_ArraySymbol_reshape_line_1695;
  PyObject *__pyx_n_s_ArraySymbol_shape;
  PyObject *__pyx_kp_u_ArraySymbol_shape_line_1722;
  PyObject *__pyx_n_s_ArraySymbol_size;
  PyObject *__pyx_kp_u_ArraySymbol_size_line_1740;
  PyObject *__pyx_n_s_ArraySymbol_state;
  PyObject *__pyx_kp_u_ArraySymbol_state_line_1757;
  PyObject *__pyx_n_s_ArraySymbol_state_size;
  PyObject *__pyx_kp_u_ArraySymbol_state_size_line_1830;
  PyObject *__pyx_n_s_ArraySymbol_strides;
  PyObject *__pyx_kp_u_ArraySymbol_strides_line_1860;
  PyObject *__pyx_n_s_ArraySymbol_sum;
  PyObject *__pyx_kp_u_ArraySymbols_cannot_be_construct;
  PyObject *__pyx_n_s_BasicIndexing;
  PyObject *__pyx_n_s_BinaryVariable;
  PyObject *__pyx_kp_u_Cannot_initialize_states_of_an_u;
  PyObject *__pyx_kp_u_Clear_any_saved_states_Clears_an;
  PyObject *__pyx_kp_u_Compare_to_another_symbol_Args_o;
  PyObject *__pyx_n_s_Constant;
  PyObject *__pyx_kp_u_Convert_the_model_to_a_NetworkX;
  PyObject *__pyx_kp_u_Create_a_binary_symbol_as_a_deci;
  PyObject *__pyx_kp_u_Create_a_class_dwave_optimizatio;
  PyObject *__pyx_kp_u_Create_a_constant_symbol_Args_ar;
  PyObject *__pyx_kp_u_Create_a_disjoint_lists_symbol_a;
  PyObject *__pyx_kp_u_Create_a_disjoint_sets_symbol_as;
  PyObject *__pyx_kp_u_Create_a_list_symbol_as_a_decisi;
  PyObject *__pyx_kp_u_Create_a_quadratic_model_from_an;
  PyObject *__pyx_kp_u_Create_a_set_symbol_as_a_decisio;
  PyObject *__pyx_kp_u_Create_an_integer_symbol_as_a_de;
  PyObject *__pyx_n_s_DEFINITELY;
  PyObject *__pyx_n_b_DWNL;
  PyObject *__pyx_n_s_DiGraph;
  PyObject *__pyx_n_s_DisjointBitSet;
  PyObject *__pyx_n_s_DisjointBitSets;
  PyObject *__pyx_n_s_DisjointList;
  PyObject *__pyx_n_s_DisjointLists;
  PyObject *__pyx_n_s_Equal;
  PyObject *__pyx_n_s_G;
  PyObject *__pyx_kp_u_I;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
  PyObject *__pyx_n_s_IndexError;
  PyObject *__pyx_n_s_IntegerVariable;
  PyObject *__pyx_n_s_Integral;
  PyObject *__pyx_kp_u_Iterate_over_a_node_s_predecesso;
  PyObject *__pyx_kp_u_Iterate_over_a_node_s_successors;
  PyObject *__pyx_kp_u_Iterate_over_all_constraints_in;
  PyObject *__pyx_kp_u_Iterate_over_all_decision_variab;
  PyObject *__pyx_kp_u_Iterate_over_all_symbols_in_the;
  PyObject *__pyx_n_s_JSONEncoder;
  PyObject *__pyx_n_s_KeyError;
  PyObject *__pyx_n_s_LessEqual;
  PyObject *__pyx_n_s_ListVariable;
  PyObject *__pyx_kp_u_Lock_the_model_No_new_symbols_ca;
  PyObject *__pyx_n_s_MAYBE;
  PyObject *__pyx_n_s_Max;
  PyObject *__pyx_n_s_Min;
  PyObject *__pyx_n_s_Model;
  PyObject *__pyx_n_u_Model;
  PyObject *__pyx_n_s_Model___reduce_cython;
  PyObject *__pyx_n_s_Model___setstate_cython;
  PyObject *__pyx_n_s_Model__header_data;
  PyObject *__pyx_n_s_Model_add_constraint;
  PyObject *__pyx_kp_u_Model_add_constraint_line_87;
  PyObject *__pyx_n_s_Model_binary;
  PyObject *__pyx_kp_u_Model_binary_line_108;
  PyObject *__pyx_n_s_Model_constant;
  PyObject *__pyx_kp_u_Model_constant_line_127;
  PyObject *__pyx_n_s_Model_decision_state_size;
  PyObject *__pyx_kp_u_Model_decision_state_size_line_1;
  PyObject *__pyx_n_s_Model_disjoint_bit_sets;
  PyObject *__pyx_kp_u_Model_disjoint_bit_sets_line_164;
  PyObject *__pyx_n_s_Model_disjoint_lists;
  PyObject *__pyx_kp_u_Model_disjoint_lists_line_199;
  PyObject *__pyx_n_s_Model_from_file;
  PyObject *__pyx_n_s_Model_integer;
  PyObject *__pyx_kp_u_Model_integer_line_331;
  PyObject *__pyx_n_s_Model_into_file;
  PyObject *__pyx_n_s_Model_is_locked;
  PyObject *__pyx_n_s_Model_iter_constraints;
  PyObject *__pyx_kp_u_Model_iter_constraints_line_507;
  PyObject *__pyx_n_s_Model_iter_decisions;
  PyObject *__pyx_kp_u_Model_iter_decisions_line_523;
  PyObject *__pyx_n_s_Model_iter_symbols;
  PyObject *__pyx_kp_u_Model_iter_symbols_line_550;
  PyObject *__pyx_n_s_Model_list;
  PyObject *__pyx_kp_u_Model_list_line_565;
  PyObject *__pyx_n_s_Model_lock;
  PyObject *__pyx_kp_u_Model_lock_line_584;
  PyObject *__pyx_n_s_Model_minimize;
  PyObject *__pyx_kp_u_Model_minimize_line_628;
  PyObject *__pyx_n_s_Model_num_constraints;
  PyObject *__pyx_kp_u_Model_num_constraints_line_660;
  PyObject *__pyx_n_s_Model_num_decisions;
  PyObject *__pyx_kp_u_Model_num_decisions_line_678;
  PyObject *__pyx_n_s_Model_num_nodes;
  PyObject *__pyx_kp_u_Model_num_nodes_line_697;
  PyObject *__pyx_n_s_Model_num_symbols;
  PyObject *__pyx_kp_u_Model_num_symbols_line_717;
  PyObject *__pyx_n_s_Model_quadratic_model;
  PyObject *__pyx_kp_u_Model_quadratic_model_line_740;
  PyObject *__pyx_n_s_Model_set;
  PyObject *__pyx_kp_u_Model_set_line_767;
  PyObject *__pyx_n_s_Model_state_size;
  PyObject *__pyx_kp_u_Model_state_size_line_789;
  PyObject *__pyx_n_s_Model_to_file;
  PyObject *__pyx_n_s_Model_to_networkx;
  PyObject *__pyx_kp_u_Model_to_networkx_line_817;
  PyObject *__pyx_n_s_Model_unlock;
  PyObject *__pyx_n_s_Multiply;
  PyObject *__pyx_n_s_NOT;
  PyObject *__pyx_n_s_Negative;
  PyObject *__pyx_n_s_NotImplementedError;
  PyObject *__pyx_kp_u_Number_of_constraints_in_the_mod;
  PyObject *__pyx_kp_u_Number_of_independent_decision_n;
  PyObject *__pyx_kp_u_Number_of_model_states_Examples;
  PyObject *__pyx_kp_u_Number_of_nodes_in_the_directed;
  PyObject *__pyx_kp_u_Number_of_symbols_tracked_by_the;
  PyObject *__pyx_n_s_PickleError;
  PyObject *__pyx_n_s_Prod;
  PyObject *__pyx_n_s_QuadraticModel;
  PyObject *__pyx_n_s_ReferenceError;
  PyObject *__pyx_kp_u_Reset_the_state_of_a_node_and_an;
  PyObject *__pyx_n_s_Reshape;
  PyObject *__pyx_kp_u_Resize_the_number_of_states_If_n;
  PyObject *__pyx_kp_u_Return_an_estimated_byte_size_of;
  PyObject *__pyx_kp_u_Return_the_number_of_elements_in;
  PyObject *__pyx_kp_u_Return_the_shape_of_the_symbol_E;
  PyObject *__pyx_kp_u_Return_the_state_of_the_node_Arg;
  PyObject *__pyx_kp_u_Return_the_stride_length_in_byte;
  PyObject *__pyx_n_s_RuntimeError;
  PyObject *__pyx_n_s_SetVariable;
  PyObject *__pyx_kp_u_Set_the_objective_value_to_minim;
  PyObject *__pyx_n_s_Square;
  PyObject *__pyx_n_s_StateView;
  PyObject *__pyx_n_s_StateView___reduce_cython;
  PyObject *__pyx_n_s_StateView___setstate_cython;
  PyObject *__pyx_n_s_States;
  PyObject *__pyx_n_s_States___reduce_cython;
  PyObject *__pyx_n_s_States___setstate_cython;
  PyObject *__pyx_n_s_States_clear;
  PyObject *__pyx_kp_u_States_clear_line_967;
  PyObject *__pyx_n_s_States_from_file;
  PyObject *__pyx_n_s_States_from_future;
  PyObject *__pyx_n_s_States_initialize;
  PyObject *__pyx_n_s_States_into_file;
  PyObject *__pyx_n_s_States_resize;
  PyObject *__pyx_kp_u_States_resize_line_1088;
  PyObject *__pyx_n_s_States_resolve;
  PyObject *__pyx_n_s_States_size;
  PyObject *__pyx_kp_u_States_size_line_1135;
  PyObject *__pyx_n_s_States_to_file;
  PyObject *__pyx_n_s_Subtract;
  PyObject *__pyx_n_s_Sum;
  PyObject *__pyx_n_s_Symbol;
  PyObject *__pyx_n_s_Symbol___reduce_cython;
  PyObject *__pyx_n_s_Symbol___setstate_cython;
  PyObject *__pyx_n_s_Symbol__from_zipfile;
  PyObject *__pyx_n_s_Symbol__into_zipfile;
  PyObject *__pyx_n_s_Symbol__state_from_zipfile;
  PyObject *__pyx_n_s_Symbol__state_into_zipfile;
  PyObject *__pyx_n_s_Symbol_equals;
  PyObject *__pyx_n_s_Symbol_expired;
  PyObject *__pyx_n_s_Symbol_has_state;
  PyObject *__pyx_n_s_Symbol_iter_predecessors;
  PyObject *__pyx_kp_u_Symbol_iter_predecessors_line_12;
  PyObject *__pyx_n_s_Symbol_iter_successors;
  PyObject *__pyx_kp_u_Symbol_iter_successors_line_1289;
  PyObject *__pyx_n_s_Symbol_maybe_equals;
  PyObject *__pyx_n_s_Symbol_reset_state;
  PyObject *__pyx_kp_u_Symbol_reset_state_line_1356;
  PyObject *__pyx_n_s_Symbol_shares_memory;
  PyObject *__pyx_n_s_Symbol_state_size;
  PyObject *__pyx_n_s_Symbol_topological_index;
  PyObject *__pyx_kp_u_Symbol_topological_index_line_14;
  PyObject *__pyx_kp_u_Symbols_cannot_be_constructed_di;
  PyObject *__pyx_n_s_TemporaryFile;
  PyObject *__pyx_kp_u_Topological_index_of_the_node_Re;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_u_UTF_8;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_ZipFile;
  PyObject *__pyx_kp_u__11;
  PyObject *__pyx_kp_b__12;
  PyObject *__pyx_kp_u__12;
  PyObject *__pyx_n_s__179;
  PyObject *__pyx_kp_u__18;
  PyObject *__pyx_kp_u__19;
  PyObject *__pyx_kp_b__23;
  PyObject *__pyx_kp_u__3;
  PyObject *__pyx_n_s__30;
  PyObject *__pyx_kp_b__8;
  PyObject *__pyx_kp_u__8;
  PyObject *__pyx_n_s_abc;
  PyObject *__pyx_kp_u_accessing_the_states_of_a_garbag;
  PyObject *__pyx_n_s_add_constraint;
  PyObject *__pyx_n_s_add_edge;
  PyObject *__pyx_n_s_add_node;
  PyObject *__pyx_kp_u_adj_adjlist;
  PyObject *__pyx_n_s_adjlist;
  PyObject *__pyx_n_s_advanced_indices;
  PyObject *__pyx_n_s_all;
  PyObject *__pyx_n_s_all_2;
  PyObject *__pyx_n_s_allow_pickle;
  PyObject *__pyx_n_s_append;
  PyObject *__pyx_kp_u_appending_states_is_not_yet_impl;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_array;
  PyObject *__pyx_n_s_array_like;
  PyObject *__pyx_kp_u_array_npy;
  PyObject *__pyx_n_u_ascii;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_basic_indices;
  PyObject *__pyx_n_s_binary;
  PyObject *__pyx_kp_u_but_got;
  PyObject *__pyx_n_s_c;
  PyObject *__pyx_kp_u_cannot_load_states_into_a_model;
  PyObject *__pyx_n_s_check_header;
  PyObject *__pyx_n_s_cid;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_classname;
  PyObject *__pyx_n_s_clear;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_cls;
  PyObject *__pyx_n_s_collections;
  PyObject *__pyx_n_s_collections_abc;
  PyObject *__pyx_n_s_constant;
  PyObject *__pyx_n_s_constraints;
  PyObject *__pyx_kp_u_constraints_json;
  PyObject *__pyx_n_s_contextlib;
  PyObject *__pyx_n_s_contextmanager;
  PyObject *__pyx_n_s_copy;
  PyObject *__pyx_kp_u_copy_False_is_not_yet_supported;
  PyObject *__pyx_kp_u_d_a_zA_z_Node;
  PyObject *__pyx_n_s_decision_state_size;
  PyObject *__pyx_n_s_decision_state_size_locals_genex;
  PyObject *__pyx_n_s_decode;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_dict_2;
  PyObject *__pyx_n_s_directory;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_disjoint_bit_sets;
  PyObject *__pyx_n_s_disjoint_bit_sets_locals_genexpr;
  PyObject *__pyx_n_s_disjoint_lists;
  PyObject *__pyx_n_s_dwave;
  PyObject *__pyx_n_s_dwave_optimization_model;
  PyObject *__pyx_kp_s_dwave_optimization_model_pyx;
  PyObject *__pyx_n_s_dwave_optimization_symbols;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_encode;
  PyObject *__pyx_kp_u_encoded_model_has_an_unsupported;
  PyObject *__pyx_n_s_encoder;
  PyObject *__pyx_n_s_end;
  PyObject *__pyx_n_s_enter;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_s_equals;
  PyObject *__pyx_n_s_equals_locals_genexpr;
  PyObject *__pyx_n_s_exit;
  PyObject *__pyx_n_s_expected;
  PyObject *__pyx_kp_u_expected_num_nodes_to_be_a_posit;
  PyObject *__pyx_kp_u_expected_num_states_to_be_a_posi;
  PyObject *__pyx_n_s_expired;
  PyObject *__pyx_n_s_f;
  PyObject *__pyx_n_s_fadj;
  PyObject *__pyx_n_s_fcls;
  PyObject *__pyx_n_s_file;
  PyObject *__pyx_n_s_filter;
  PyObject *__pyx_n_s_fname;
  PyObject *__pyx_n_s_force_zip64;
  PyObject *__pyx_n_s_from_file;
  PyObject *__pyx_n_s_from_future;
  PyObject *__pyx_n_s_from_zipfile;
  PyObject *__pyx_n_s_functools;
  PyObject *__pyx_n_s_future;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_genexpr;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_s_getinfo;
  PyObject *__pyx_n_s_getitem___locals_genexpr;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_kp_u_has_not_implemented_state_deser;
  PyObject *__pyx_kp_u_has_not_implemented_state_seria;
  PyObject *__pyx_n_s_has_state;
  PyObject *__pyx_n_s_header_data;
  PyObject *__pyx_n_s_header_data_2;
  PyObject *__pyx_kp_u_header_data_does_not_match_the_d;
  PyObject *__pyx_n_s_header_len;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_index;
  PyObject *__pyx_kp_u_index_out_of_range;
  PyObject *__pyx_n_s_indices;
  PyObject *__pyx_n_u_inf;
  PyObject *__pyx_kp_u_info_json;
  PyObject *__pyx_n_s_initialize;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_kp_u_instead;
  PyObject *__pyx_n_s_int;
  PyObject *__pyx_n_s_integer;
  PyObject *__pyx_n_s_into_file;
  PyObject *__pyx_n_s_into_zipfile;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_locked;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_islice;
  PyObject *__pyx_n_s_it;
  PyObject *__pyx_n_s_items;
  PyObject *__pyx_n_s_iter_constraints;
  PyObject *__pyx_n_s_iter_decisions;
  PyObject *__pyx_n_s_iter_predecessors;
  PyObject *__pyx_n_s_iter_successors;
  PyObject *__pyx_n_s_iter_symbols;
  PyObject *__pyx_n_s_itertools;
  PyObject *__pyx_n_s_j;
  PyObject *__pyx_n_s_json;
  PyObject *__pyx_n_s_kwargs;
  PyObject *__pyx_n_s_linear;
  PyObject *__pyx_n_s_lineno;
  PyObject *__pyx_n_s_list;
  PyObject *__pyx_n_s_lists;
  PyObject *__pyx_n_s_load;
  PyObject *__pyx_n_s_loads;
  PyObject *__pyx_n_s_lock;
  PyObject *__pyx_n_s_locked;
  PyObject *__pyx_n_s_lower_bound;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_main_2;
  PyObject *__pyx_n_s_map;
  PyObject *__pyx_n_s_match;
  PyObject *__pyx_n_s_max;
  PyObject *__pyx_n_s_max_num_states;
  PyObject *__pyx_n_s_max_size;
  PyObject *__pyx_n_s_maybe;
  PyObject *__pyx_n_s_maybe_equals;
  PyObject *__pyx_n_s_min;
  PyObject *__pyx_n_s_min_size;
  PyObject *__pyx_n_s_minimize;
  PyObject *__pyx_n_s_mode;
  PyObject *__pyx_n_s_model;
  PyObject *__pyx_n_s_model_info;
  PyObject *__pyx_n_s_n;
  PyObject *__pyx_n_s_n0;
  PyObject *__pyx_n_s_n1;
  PyObject *__pyx_kp_u_n_must_be_a_non_negative_integer;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_ndarray;
  PyObject *__pyx_n_s_ndim;
  PyObject *__pyx_n_s_networkx;
  PyObject *__pyx_n_s_new;
  PyObject *__pyx_n_s_node;
  PyObject *__pyx_n_s_node_id;
  PyObject *__pyx_n_s_node_subclasses;
  PyObject *__pyx_kp_u_nodes;
  PyObject *__pyx_kp_u_nodetypes_txt;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_n_s_num_constraints;
  PyObject *__pyx_n_s_num_decisions;
  PyObject *__pyx_n_s_num_disjoint_lists;
  PyObject *__pyx_n_s_num_disjoint_sets;
  PyObject *__pyx_n_s_num_nodes;
  PyObject *__pyx_n_u_num_nodes;
  PyObject *__pyx_n_s_num_states;
  PyObject *__pyx_n_u_num_states;
  PyObject *__pyx_n_s_num_symbols;
  PyObject *__pyx_n_s_numbers;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_n_s_objective_buff;
  PyObject *__pyx_n_s_objective_id;
  PyObject *__pyx_kp_u_objective_json;
  PyObject *__pyx_kp_u_objective_must_be_an_integer_and;
  PyObject *__pyx_n_s_only_decision;
  PyObject *__pyx_kp_u_only_integers_slices_and_array_s;
  PyObject *__pyx_kp_u_only_squaring_is_currently_suppo;
  PyObject *__pyx_n_s_open;
  PyObject *__pyx_n_s_operator;
  PyObject *__pyx_n_s_optimization;
  PyObject *__pyx_n_s_other;
  PyObject *__pyx_n_s_p;
  PyObject *__pyx_n_s_pack;
  PyObject *__pyx_n_s_padding;
  PyObject *__pyx_n_s_pickle;
  PyObject *__pyx_n_s_pid;
  PyObject *__pyx_n_s_pptr;
  PyObject *__pyx_n_s_pred;
  PyObject *__pyx_n_s_predecessor_ids;
  PyObject *__pyx_n_s_predecessors;
  PyObject *__pyx_n_s_prefix;
  PyObject *__pyx_n_s_primary_set_size;
  PyObject *__pyx_n_s_prod;
  PyObject *__pyx_n_s_ptr;
  PyObject *__pyx_n_s_pyx_PickleError;
  PyObject *__pyx_n_s_pyx_checksum;
  PyObject *__pyx_n_s_pyx_result;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_type;
  PyObject *__pyx_n_s_pyx_unpickle_StateView;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_q;
  PyObject *__pyx_n_s_quadratic;
  PyObject *__pyx_n_s_quadratic_model;
  PyObject *__pyx_n_u_r;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_u_rb;
  PyObject *__pyx_n_s_re;
  PyObject *__pyx_n_s_read;
  PyObject *__pyx_n_s_read_prefix;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_ref;
  PyObject *__pyx_n_s_register;
  PyObject *__pyx_n_s_register_node_subclasses;
  PyObject *__pyx_n_s_register_node_subclasses_locals;
  PyObject *__pyx_n_s_replace;
  PyObject *__pyx_n_s_reset_state;
  PyObject *__pyx_n_s_reshape;
  PyObject *__pyx_n_s_resize;
  PyObject *__pyx_n_s_resolve;
  PyObject *__pyx_n_s_result_hook;
  PyObject *__pyx_n_s_rhs;
  PyObject *__pyx_n_s_rstrip;
  PyObject *__pyx_n_s_save;
  PyObject *__pyx_n_s_search;
  PyObject *__pyx_n_s_seek;
  PyObject *__pyx_n_s_seen_decisions;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self__graph_cannot_be_converted;
  PyObject *__pyx_kp_s_self__states_cannot_be_converted;
  PyObject *__pyx_kp_s_self_array_ptr_self_expired_ptr;
  PyObject *__pyx_kp_s_self_expired_ptr_self_node_ptr_c;
  PyObject *__pyx_n_s_send;
  PyObject *__pyx_n_s_separators;
  PyObject *__pyx_n_s_set;
  PyObject *__pyx_n_s_set_state;
  PyObject *__pyx_n_s_sets;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_shape;
  PyObject *__pyx_n_s_shape_locals_genexpr;
  PyObject *__pyx_n_s_shares_memory;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_kp_u_size_is_unbounded;
  PyObject *__pyx_n_s_sizeinfo;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_split;
  PyObject *__pyx_n_s_split_indices;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_n_s_state;
  PyObject *__pyx_n_s_state_from_zipfile;
  PyObject *__pyx_n_s_state_index;
  PyObject *__pyx_n_s_state_into_zipfile;
  PyObject *__pyx_n_s_state_size;
  PyObject *__pyx_n_s_state_size_locals_genexpr;
  PyObject *__pyx_kp_u_states;
  PyObject *__pyx_n_s_step;
  PyObject *__pyx_n_s_stop;
  PyObject *__pyx_n_s_strides;
  PyObject *__pyx_n_s_strides_locals_genexpr;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_struct;
  PyObject *__pyx_n_s_subclass;
  PyObject *__pyx_n_s_subclasses;
  PyObject *__pyx_n_s_sum;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_symbol;
  PyObject *__pyx_n_s_symbols;
  PyObject *__pyx_n_s_tempfile;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_kp_u_the_state_of_an_intermediate_var;
  PyObject *__pyx_kp_u_the_value_of_an_array_with_more;
  PyObject *__pyx_kp_u_the_value_of_an_empty_array_is_a;
  PyObject *__pyx_n_s_throw;
  PyObject *__pyx_kp_u_to_be_a_subset_of;
  PyObject *__pyx_n_s_to_file;
  PyObject *__pyx_n_s_to_networkx;
  PyObject *__pyx_n_s_topological_index;
  PyObject *__pyx_n_s_u;
  PyObject *__pyx_kp_u_unexpected_adj_adjlist_format;
  PyObject *__pyx_kp_u_unexpected_index_type;
  PyObject *__pyx_kp_u_unexpected_predecessor_id;
  PyObject *__pyx_kp_u_unknown_file_type_expected_magic;
  PyObject *__pyx_n_s_unlock;
  PyObject *__pyx_n_s_unpack;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_upper_bound;
  PyObject *__pyx_n_s_use_setstate;
  PyObject *__pyx_n_s_v;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_kp_u_value_cannot_be_None;
  PyObject *__pyx_n_s_version;
  PyObject *__pyx_kp_u_version_txt;
  PyObject *__pyx_n_u_w;
  PyObject *__pyx_kp_u_w_b;
  PyObject *__pyx_n_u_wb;
  PyObject *__pyx_n_s_weakref;
  PyObject *__pyx_n_s_write;
  PyObject *__pyx_n_s_writestr;
  PyObject *__pyx_n_s_x;
  PyObject *__pyx_n_s_zf;
  PyObject *__pyx_n_s_zip;
  PyObject *__pyx_n_s_zipfile;
  PyObject *__pyx_n_s_zipinfo;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_4;
  PyObject *__pyx_int_4938760;
  PyObject *__pyx_int_58930323;
  PyObject *__pyx_int_101702893;
  PyObject *__pyx_k__16;
  PyObject *__pyx_codeobj_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_slice__42;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__32;
  PyObject *__pyx_tuple__33;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__35;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__37;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__43;
  PyObject *__pyx_tuple__44;
  PyObject *__pyx_tuple__45;
  PyObject *__pyx_tuple__46;
  PyObject *__pyx_tuple__47;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__49;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__53;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__64;
  PyObject *__pyx_tuple__66;
  PyObject *__pyx_tuple__68;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__74;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__77;
  PyObject *__pyx_tuple__78;
  PyObject *__pyx_tuple__86;
  PyObject *__pyx_tuple__88;
  PyObject *__pyx_tuple__90;
  PyObject *__pyx_tuple__92;
  PyObject *__pyx_tuple__94;
  PyObject *__pyx_tuple__98;
  PyObject *__pyx_tuple__101;
  PyObject *__pyx_tuple__103;
  PyObject *__pyx_tuple__105;
  PyObject *__pyx_tuple__107;
  PyObject *__pyx_tuple__109;
  PyObject *__pyx_tuple__116;
  PyObject *__pyx_tuple__119;
  PyObject *__pyx_tuple__121;
  PyObject *__pyx_tuple__123;
  PyObject *__pyx_tuple__124;
  PyObject *__pyx_tuple__126;
  PyObject *__pyx_tuple__127;
  PyObject *__pyx_tuple__129;
  PyObject *__pyx_tuple__131;
  PyObject *__pyx_tuple__133;
  PyObject *__pyx_tuple__140;
  PyObject *__pyx_tuple__142;
  PyObject *__pyx_tuple__144;
  PyObject *__pyx_tuple__146;
  PyObject *__pyx_tuple__148;
  PyObject *__pyx_tuple__150;
  PyObject *__pyx_tuple__153;
  PyObject *__pyx_tuple__155;
  PyObject *__pyx_tuple__157;
  PyObject *__pyx_tuple__160;
  PyObject *__pyx_tuple__162;
  PyObject *__pyx_tuple__164;
  PyObject *__pyx_tuple__166;
  PyObject *__pyx_tuple__168;
  PyObject *__pyx_tuple__170;
  PyObject *__pyx_tuple__174;
  PyObject *__pyx_tuple__177;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__26;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__38;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__54;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__63;
  PyObject *__pyx_codeobj__65;
  PyObject *__pyx_codeobj__67;
  PyObject *__pyx_codeobj__69;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__73;
  PyObject *__pyx_codeobj__75;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__80;
  PyObject *__pyx_codeobj__81;
  PyObject *__pyx_codeobj__82;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__84;
  PyObject *__pyx_codeobj__85;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__89;
  PyObject *__pyx_codeobj__91;
  PyObject *__pyx_codeobj__93;
  PyObject *__pyx_codeobj__95;
  PyObject *__pyx_codeobj__96;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__100;
  PyObject *__pyx_codeobj__102;
  PyObject *__pyx_codeobj__104;
  PyObject *__pyx_codeobj__106;
  PyObject *__pyx_codeobj__108;
  PyObject *__pyx_codeobj__110;
  PyObject *__pyx_codeobj__111;
  PyObject *__pyx_codeobj__112;
  PyObject *__pyx_codeobj__113;
  PyObject *__pyx_codeobj__114;
  PyObject *__pyx_codeobj__115;
  PyObject *__pyx_codeobj__117;
  PyObject *__pyx_codeobj__118;
  PyObject *__pyx_codeobj__120;
  PyObject *__pyx_codeobj__122;
  PyObject *__pyx_codeobj__125;
  PyObject *__pyx_codeobj__128;
  PyObject *__pyx_codeobj__130;
  PyObject *__pyx_codeobj__132;
  PyObject *__pyx_codeobj__134;
  PyObject *__pyx_codeobj__135;
  PyObject *__pyx_codeobj__136;
  PyObject *__pyx_codeobj__137;
  PyObject *__pyx_codeobj__138;
  PyObject *__pyx_codeobj__139;
  PyObject *__pyx_codeobj__141;
  PyObject *__pyx_codeobj__143;
  PyObject *__pyx_codeobj__145;
  PyObject *__pyx_codeobj__147;
  PyObject *__pyx_codeobj__149;
  PyObject *__pyx_codeobj__151;
  PyObject *__pyx_codeobj__152;
  PyObject *__pyx_codeobj__154;
  PyObject *__pyx_codeobj__156;
  PyObject *__pyx_codeobj__158;
  PyObject *__pyx_codeobj__159;
  PyObject *__pyx_codeobj__161;
  PyObject *__pyx_codeobj__163;
  PyObject *__pyx_codeobj__165;
  PyObject *__pyx_codeobj__167;
  PyObject *__pyx_codeobj__169;
  PyObject *__pyx_codeobj__171;
  PyObject *__pyx_codeobj__172;
  PyObject *__pyx_codeobj__173;
  PyObject *__pyx_codeobj__175;
  PyObject *__pyx_codeobj__176;
  PyObject *__pyx_codeobj__178;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model_Model);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model_Model);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model_States);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model_States);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model_Symbol);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model_Symbol);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model_ArraySymbol);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model_StateView);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model_StateView);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct__locked);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_15_shape);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_17_strides);
  Py_CLEAR(clear_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_Absolute);
  Py_CLEAR(clear_module_state->__pyx_n_s_Add);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Add_a_constraint_to_the_model_Ar);
  Py_CLEAR(clear_module_state->__pyx_n_s_AdvancedIndexing);
  Py_CLEAR(clear_module_state->__pyx_n_s_All);
  Py_CLEAR(clear_module_state->__pyx_kp_u_An_estimate_of_the_size_in_bytes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_An_estimated_size_in_bytes_of_th);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol__state_from_zipfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol__state_into_zipfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol_maybe_equals);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ArraySymbol_maybe_equals_line_16);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol_min);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol_ndim);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol_prod);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol_reshape);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ArraySymbol_reshape_line_1695);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol_shape);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ArraySymbol_shape_line_1722);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol_size);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ArraySymbol_size_line_1740);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol_state);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ArraySymbol_state_line_1757);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol_state_size);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ArraySymbol_state_size_line_1830);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol_strides);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ArraySymbol_strides_line_1860);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArraySymbol_sum);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ArraySymbols_cannot_be_construct);
  Py_CLEAR(clear_module_state->__pyx_n_s_BasicIndexing);
  Py_CLEAR(clear_module_state->__pyx_n_s_BinaryVariable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cannot_initialize_states_of_an_u);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Clear_any_saved_states_Clears_an);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Compare_to_another_symbol_Args_o);
  Py_CLEAR(clear_module_state->__pyx_n_s_Constant);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Convert_the_model_to_a_NetworkX);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Create_a_binary_symbol_as_a_deci);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Create_a_class_dwave_optimizatio);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Create_a_constant_symbol_Args_ar);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Create_a_disjoint_lists_symbol_a);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Create_a_disjoint_sets_symbol_as);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Create_a_list_symbol_as_a_decisi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Create_a_quadratic_model_from_an);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Create_a_set_symbol_as_a_decisio);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Create_an_integer_symbol_as_a_de);
  Py_CLEAR(clear_module_state->__pyx_n_s_DEFINITELY);
  Py_CLEAR(clear_module_state->__pyx_n_b_DWNL);
  Py_CLEAR(clear_module_state->__pyx_n_s_DiGraph);
  Py_CLEAR(clear_module_state->__pyx_n_s_DisjointBitSet);
  Py_CLEAR(clear_module_state->__pyx_n_s_DisjointBitSets);
  Py_CLEAR(clear_module_state->__pyx_n_s_DisjointList);
  Py_CLEAR(clear_module_state->__pyx_n_s_DisjointLists);
  Py_CLEAR(clear_module_state->__pyx_n_s_Equal);
  Py_CLEAR(clear_module_state->__pyx_n_s_G);
  Py_CLEAR(clear_module_state->__pyx_kp_u_I);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_IndexError);
  Py_CLEAR(clear_module_state->__pyx_n_s_IntegerVariable);
  Py_CLEAR(clear_module_state->__pyx_n_s_Integral);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Iterate_over_a_node_s_predecesso);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Iterate_over_a_node_s_successors);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Iterate_over_all_constraints_in);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Iterate_over_all_decision_variab);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Iterate_over_all_symbols_in_the);
  Py_CLEAR(clear_module_state->__pyx_n_s_JSONEncoder);
  Py_CLEAR(clear_module_state->__pyx_n_s_KeyError);
  Py_CLEAR(clear_module_state->__pyx_n_s_LessEqual);
  Py_CLEAR(clear_module_state->__pyx_n_s_ListVariable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Lock_the_model_No_new_symbols_ca);
  Py_CLEAR(clear_module_state->__pyx_n_s_MAYBE);
  Py_CLEAR(clear_module_state->__pyx_n_s_Max);
  Py_CLEAR(clear_module_state->__pyx_n_s_Min);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model);
  Py_CLEAR(clear_module_state->__pyx_n_u_Model);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model__header_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_add_constraint);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_add_constraint_line_87);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_binary);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_binary_line_108);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_constant);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_constant_line_127);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_decision_state_size);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_decision_state_size_line_1);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_disjoint_bit_sets);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_disjoint_bit_sets_line_164);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_disjoint_lists);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_disjoint_lists_line_199);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_from_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_integer);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_integer_line_331);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_into_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_is_locked);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_iter_constraints);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_iter_constraints_line_507);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_iter_decisions);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_iter_decisions_line_523);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_iter_symbols);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_iter_symbols_line_550);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_list);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_list_line_565);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_lock);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_lock_line_584);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_minimize);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_minimize_line_628);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_num_constraints);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_num_constraints_line_660);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_num_decisions);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_num_decisions_line_678);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_num_nodes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_num_nodes_line_697);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_num_symbols);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_num_symbols_line_717);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_quadratic_model);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_quadratic_model_line_740);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_set);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_set_line_767);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_state_size);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_state_size_line_789);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_to_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_to_networkx);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Model_to_networkx_line_817);
  Py_CLEAR(clear_module_state->__pyx_n_s_Model_unlock);
  Py_CLEAR(clear_module_state->__pyx_n_s_Multiply);
  Py_CLEAR(clear_module_state->__pyx_n_s_NOT);
  Py_CLEAR(clear_module_state->__pyx_n_s_Negative);
  Py_CLEAR(clear_module_state->__pyx_n_s_NotImplementedError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Number_of_constraints_in_the_mod);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Number_of_independent_decision_n);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Number_of_model_states_Examples);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Number_of_nodes_in_the_directed);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Number_of_symbols_tracked_by_the);
  Py_CLEAR(clear_module_state->__pyx_n_s_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Prod);
  Py_CLEAR(clear_module_state->__pyx_n_s_QuadraticModel);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReferenceError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Reset_the_state_of_a_node_and_an);
  Py_CLEAR(clear_module_state->__pyx_n_s_Reshape);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Resize_the_number_of_states_If_n);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_an_estimated_byte_size_of);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_the_number_of_elements_in);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_the_shape_of_the_symbol_E);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_the_state_of_the_node_Arg);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_the_stride_length_in_byte);
  Py_CLEAR(clear_module_state->__pyx_n_s_RuntimeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_SetVariable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Set_the_objective_value_to_minim);
  Py_CLEAR(clear_module_state->__pyx_n_s_Square);
  Py_CLEAR(clear_module_state->__pyx_n_s_StateView);
  Py_CLEAR(clear_module_state->__pyx_n_s_StateView___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_StateView___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_States);
  Py_CLEAR(clear_module_state->__pyx_n_s_States___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_States___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_States_clear);
  Py_CLEAR(clear_module_state->__pyx_kp_u_States_clear_line_967);
  Py_CLEAR(clear_module_state->__pyx_n_s_States_from_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_States_from_future);
  Py_CLEAR(clear_module_state->__pyx_n_s_States_initialize);
  Py_CLEAR(clear_module_state->__pyx_n_s_States_into_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_States_resize);
  Py_CLEAR(clear_module_state->__pyx_kp_u_States_resize_line_1088);
  Py_CLEAR(clear_module_state->__pyx_n_s_States_resolve);
  Py_CLEAR(clear_module_state->__pyx_n_s_States_size);
  Py_CLEAR(clear_module_state->__pyx_kp_u_States_size_line_1135);
  Py_CLEAR(clear_module_state->__pyx_n_s_States_to_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_Subtract);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sum);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol__from_zipfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol__into_zipfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol__state_from_zipfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol__state_into_zipfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol_equals);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol_expired);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol_has_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol_iter_predecessors);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Symbol_iter_predecessors_line_12);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol_iter_successors);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Symbol_iter_successors_line_1289);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol_maybe_equals);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol_reset_state);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Symbol_reset_state_line_1356);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol_shares_memory);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol_state_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_Symbol_topological_index);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Symbol_topological_index_line_14);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Symbols_cannot_be_constructed_di);
  Py_CLEAR(clear_module_state->__pyx_n_s_TemporaryFile);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Topological_index_of_the_node_Re);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_UTF_8);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZipFile);
  Py_CLEAR(clear_module_state->__pyx_kp_u__11);
  Py_CLEAR(clear_module_state->__pyx_kp_b__12);
  Py_CLEAR(clear_module_state->__pyx_kp_u__12);
  Py_CLEAR(clear_module_state->__pyx_n_s__179);
  Py_CLEAR(clear_module_state->__pyx_kp_u__18);
  Py_CLEAR(clear_module_state->__pyx_kp_u__19);
  Py_CLEAR(clear_module_state->__pyx_kp_b__23);
  Py_CLEAR(clear_module_state->__pyx_kp_u__3);
  Py_CLEAR(clear_module_state->__pyx_n_s__30);
  Py_CLEAR(clear_module_state->__pyx_kp_b__8);
  Py_CLEAR(clear_module_state->__pyx_kp_u__8);
  Py_CLEAR(clear_module_state->__pyx_n_s_abc);
  Py_CLEAR(clear_module_state->__pyx_kp_u_accessing_the_states_of_a_garbag);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_constraint);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_edge);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_node);
  Py_CLEAR(clear_module_state->__pyx_kp_u_adj_adjlist);
  Py_CLEAR(clear_module_state->__pyx_n_s_adjlist);
  Py_CLEAR(clear_module_state->__pyx_n_s_advanced_indices);
  Py_CLEAR(clear_module_state->__pyx_n_s_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_all_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_allow_pickle);
  Py_CLEAR(clear_module_state->__pyx_n_s_append);
  Py_CLEAR(clear_module_state->__pyx_kp_u_appending_states_is_not_yet_impl);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_array_like);
  Py_CLEAR(clear_module_state->__pyx_kp_u_array_npy);
  Py_CLEAR(clear_module_state->__pyx_n_u_ascii);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_basic_indices);
  Py_CLEAR(clear_module_state->__pyx_n_s_binary);
  Py_CLEAR(clear_module_state->__pyx_kp_u_but_got);
  Py_CLEAR(clear_module_state->__pyx_n_s_c);
  Py_CLEAR(clear_module_state->__pyx_kp_u_cannot_load_states_into_a_model);
  Py_CLEAR(clear_module_state->__pyx_n_s_check_header);
  Py_CLEAR(clear_module_state->__pyx_n_s_cid);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_classname);
  Py_CLEAR(clear_module_state->__pyx_n_s_clear);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_cls);
  Py_CLEAR(clear_module_state->__pyx_n_s_collections);
  Py_CLEAR(clear_module_state->__pyx_n_s_collections_abc);
  Py_CLEAR(clear_module_state->__pyx_n_s_constant);
  Py_CLEAR(clear_module_state->__pyx_n_s_constraints);
  Py_CLEAR(clear_module_state->__pyx_kp_u_constraints_json);
  Py_CLEAR(clear_module_state->__pyx_n_s_contextlib);
  Py_CLEAR(clear_module_state->__pyx_n_s_contextmanager);
  Py_CLEAR(clear_module_state->__pyx_n_s_copy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_copy_False_is_not_yet_supported);
  Py_CLEAR(clear_module_state->__pyx_kp_u_d_a_zA_z_Node);
  Py_CLEAR(clear_module_state->__pyx_n_s_decision_state_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_decision_state_size_locals_genex);
  Py_CLEAR(clear_module_state->__pyx_n_s_decode);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_directory);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_disjoint_bit_sets);
  Py_CLEAR(clear_module_state->__pyx_n_s_disjoint_bit_sets_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_disjoint_lists);
  Py_CLEAR(clear_module_state->__pyx_n_s_dwave);
  Py_CLEAR(clear_module_state->__pyx_n_s_dwave_optimization_model);
  Py_CLEAR(clear_module_state->__pyx_kp_s_dwave_optimization_model_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_dwave_optimization_symbols);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode);
  Py_CLEAR(clear_module_state->__pyx_kp_u_encoded_model_has_an_unsupported);
  Py_CLEAR(clear_module_state->__pyx_n_s_encoder);
  Py_CLEAR(clear_module_state->__pyx_n_s_end);
  Py_CLEAR(clear_module_state->__pyx_n_s_enter);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_s_equals);
  Py_CLEAR(clear_module_state->__pyx_n_s_equals_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_exit);
  Py_CLEAR(clear_module_state->__pyx_n_s_expected);
  Py_CLEAR(clear_module_state->__pyx_kp_u_expected_num_nodes_to_be_a_posit);
  Py_CLEAR(clear_module_state->__pyx_kp_u_expected_num_states_to_be_a_posi);
  Py_CLEAR(clear_module_state->__pyx_n_s_expired);
  Py_CLEAR(clear_module_state->__pyx_n_s_f);
  Py_CLEAR(clear_module_state->__pyx_n_s_fadj);
  Py_CLEAR(clear_module_state->__pyx_n_s_fcls);
  Py_CLEAR(clear_module_state->__pyx_n_s_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_filter);
  Py_CLEAR(clear_module_state->__pyx_n_s_fname);
  Py_CLEAR(clear_module_state->__pyx_n_s_force_zip64);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_future);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_zipfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_functools);
  Py_CLEAR(clear_module_state->__pyx_n_s_future);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_getinfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_getitem___locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_not_implemented_state_deser);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_not_implemented_state_seria);
  Py_CLEAR(clear_module_state->__pyx_n_s_has_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_header_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_header_data_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_header_data_does_not_match_the_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_header_len);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_index);
  Py_CLEAR(clear_module_state->__pyx_kp_u_index_out_of_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_indices);
  Py_CLEAR(clear_module_state->__pyx_n_u_inf);
  Py_CLEAR(clear_module_state->__pyx_kp_u_info_json);
  Py_CLEAR(clear_module_state->__pyx_n_s_initialize);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_kp_u_instead);
  Py_CLEAR(clear_module_state->__pyx_n_s_int);
  Py_CLEAR(clear_module_state->__pyx_n_s_integer);
  Py_CLEAR(clear_module_state->__pyx_n_s_into_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_into_zipfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_locked);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_islice);
  Py_CLEAR(clear_module_state->__pyx_n_s_it);
  Py_CLEAR(clear_module_state->__pyx_n_s_items);
  Py_CLEAR(clear_module_state->__pyx_n_s_iter_constraints);
  Py_CLEAR(clear_module_state->__pyx_n_s_iter_decisions);
  Py_CLEAR(clear_module_state->__pyx_n_s_iter_predecessors);
  Py_CLEAR(clear_module_state->__pyx_n_s_iter_successors);
  Py_CLEAR(clear_module_state->__pyx_n_s_iter_symbols);
  Py_CLEAR(clear_module_state->__pyx_n_s_itertools);
  Py_CLEAR(clear_module_state->__pyx_n_s_j);
  Py_CLEAR(clear_module_state->__pyx_n_s_json);
  Py_CLEAR(clear_module_state->__pyx_n_s_kwargs);
  Py_CLEAR(clear_module_state->__pyx_n_s_linear);
  Py_CLEAR(clear_module_state->__pyx_n_s_lineno);
  Py_CLEAR(clear_module_state->__pyx_n_s_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_lists);
  Py_CLEAR(clear_module_state->__pyx_n_s_load);
  Py_CLEAR(clear_module_state->__pyx_n_s_loads);
  Py_CLEAR(clear_module_state->__pyx_n_s_lock);
  Py_CLEAR(clear_module_state->__pyx_n_s_locked);
  Py_CLEAR(clear_module_state->__pyx_n_s_lower_bound);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_main_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_map);
  Py_CLEAR(clear_module_state->__pyx_n_s_match);
  Py_CLEAR(clear_module_state->__pyx_n_s_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_num_states);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_maybe);
  Py_CLEAR(clear_module_state->__pyx_n_s_maybe_equals);
  Py_CLEAR(clear_module_state->__pyx_n_s_min);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_minimize);
  Py_CLEAR(clear_module_state->__pyx_n_s_mode);
  Py_CLEAR(clear_module_state->__pyx_n_s_model);
  Py_CLEAR(clear_module_state->__pyx_n_s_model_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_n0);
  Py_CLEAR(clear_module_state->__pyx_n_s_n1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_n_must_be_a_non_negative_integer);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_ndarray);
  Py_CLEAR(clear_module_state->__pyx_n_s_ndim);
  Py_CLEAR(clear_module_state->__pyx_n_s_networkx);
  Py_CLEAR(clear_module_state->__pyx_n_s_new);
  Py_CLEAR(clear_module_state->__pyx_n_s_node);
  Py_CLEAR(clear_module_state->__pyx_n_s_node_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_node_subclasses);
  Py_CLEAR(clear_module_state->__pyx_kp_u_nodes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_nodetypes_txt);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_constraints);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_decisions);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_disjoint_lists);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_disjoint_sets);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_nodes);
  Py_CLEAR(clear_module_state->__pyx_n_u_num_nodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_states);
  Py_CLEAR(clear_module_state->__pyx_n_u_num_states);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_symbols);
  Py_CLEAR(clear_module_state->__pyx_n_s_numbers);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_n_s_objective_buff);
  Py_CLEAR(clear_module_state->__pyx_n_s_objective_id);
  Py_CLEAR(clear_module_state->__pyx_kp_u_objective_json);
  Py_CLEAR(clear_module_state->__pyx_kp_u_objective_must_be_an_integer_and);
  Py_CLEAR(clear_module_state->__pyx_n_s_only_decision);
  Py_CLEAR(clear_module_state->__pyx_kp_u_only_integers_slices_and_array_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u_only_squaring_is_currently_suppo);
  Py_CLEAR(clear_module_state->__pyx_n_s_open);
  Py_CLEAR(clear_module_state->__pyx_n_s_operator);
  Py_CLEAR(clear_module_state->__pyx_n_s_optimization);
  Py_CLEAR(clear_module_state->__pyx_n_s_other);
  Py_CLEAR(clear_module_state->__pyx_n_s_p);
  Py_CLEAR(clear_module_state->__pyx_n_s_pack);
  Py_CLEAR(clear_module_state->__pyx_n_s_padding);
  Py_CLEAR(clear_module_state->__pyx_n_s_pickle);
  Py_CLEAR(clear_module_state->__pyx_n_s_pid);
  Py_CLEAR(clear_module_state->__pyx_n_s_pptr);
  Py_CLEAR(clear_module_state->__pyx_n_s_pred);
  Py_CLEAR(clear_module_state->__pyx_n_s_predecessor_ids);
  Py_CLEAR(clear_module_state->__pyx_n_s_predecessors);
  Py_CLEAR(clear_module_state->__pyx_n_s_prefix);
  Py_CLEAR(clear_module_state->__pyx_n_s_primary_set_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_prod);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptr);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_StateView);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_q);
  Py_CLEAR(clear_module_state->__pyx_n_s_quadratic);
  Py_CLEAR(clear_module_state->__pyx_n_s_quadratic_model);
  Py_CLEAR(clear_module_state->__pyx_n_u_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_u_rb);
  Py_CLEAR(clear_module_state->__pyx_n_s_re);
  Py_CLEAR(clear_module_state->__pyx_n_s_read);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_prefix);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_ref);
  Py_CLEAR(clear_module_state->__pyx_n_s_register);
  Py_CLEAR(clear_module_state->__pyx_n_s_register_node_subclasses);
  Py_CLEAR(clear_module_state->__pyx_n_s_register_node_subclasses_locals);
  Py_CLEAR(clear_module_state->__pyx_n_s_replace);
  Py_CLEAR(clear_module_state->__pyx_n_s_reset_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_reshape);
  Py_CLEAR(clear_module_state->__pyx_n_s_resize);
  Py_CLEAR(clear_module_state->__pyx_n_s_resolve);
  Py_CLEAR(clear_module_state->__pyx_n_s_result_hook);
  Py_CLEAR(clear_module_state->__pyx_n_s_rhs);
  Py_CLEAR(clear_module_state->__pyx_n_s_rstrip);
  Py_CLEAR(clear_module_state->__pyx_n_s_save);
  Py_CLEAR(clear_module_state->__pyx_n_s_search);
  Py_CLEAR(clear_module_state->__pyx_n_s_seek);
  Py_CLEAR(clear_module_state->__pyx_n_s_seen_decisions);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__graph_cannot_be_converted);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__states_cannot_be_converted);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_array_ptr_self_expired_ptr);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_expired_ptr_self_node_ptr_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_send);
  Py_CLEAR(clear_module_state->__pyx_n_s_separators);
  Py_CLEAR(clear_module_state->__pyx_n_s_set);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_sets);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_shape);
  Py_CLEAR(clear_module_state->__pyx_n_s_shape_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_shares_memory);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_kp_u_size_is_unbounded);
  Py_CLEAR(clear_module_state->__pyx_n_s_sizeinfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_split);
  Py_CLEAR(clear_module_state->__pyx_n_s_split_indices);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_state_from_zipfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_state_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_state_into_zipfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_state_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_state_size_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_kp_u_states);
  Py_CLEAR(clear_module_state->__pyx_n_s_step);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop);
  Py_CLEAR(clear_module_state->__pyx_n_s_strides);
  Py_CLEAR(clear_module_state->__pyx_n_s_strides_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_struct);
  Py_CLEAR(clear_module_state->__pyx_n_s_subclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_subclasses);
  Py_CLEAR(clear_module_state->__pyx_n_s_sum);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_symbol);
  Py_CLEAR(clear_module_state->__pyx_n_s_symbols);
  Py_CLEAR(clear_module_state->__pyx_n_s_tempfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_kp_u_the_state_of_an_intermediate_var);
  Py_CLEAR(clear_module_state->__pyx_kp_u_the_value_of_an_array_with_more);
  Py_CLEAR(clear_module_state->__pyx_kp_u_the_value_of_an_empty_array_is_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_throw);
  Py_CLEAR(clear_module_state->__pyx_kp_u_to_be_a_subset_of);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_networkx);
  Py_CLEAR(clear_module_state->__pyx_n_s_topological_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_u);
  Py_CLEAR(clear_module_state->__pyx_kp_u_unexpected_adj_adjlist_format);
  Py_CLEAR(clear_module_state->__pyx_kp_u_unexpected_index_type);
  Py_CLEAR(clear_module_state->__pyx_kp_u_unexpected_predecessor_id);
  Py_CLEAR(clear_module_state->__pyx_kp_u_unknown_file_type_expected_magic);
  Py_CLEAR(clear_module_state->__pyx_n_s_unlock);
  Py_CLEAR(clear_module_state->__pyx_n_s_unpack);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_upper_bound);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_kp_u_value_cannot_be_None);
  Py_CLEAR(clear_module_state->__pyx_n_s_version);
  Py_CLEAR(clear_module_state->__pyx_kp_u_version_txt);
  Py_CLEAR(clear_module_state->__pyx_n_u_w);
  Py_CLEAR(clear_module_state->__pyx_kp_u_w_b);
  Py_CLEAR(clear_module_state->__pyx_n_u_wb);
  Py_CLEAR(clear_module_state->__pyx_n_s_weakref);
  Py_CLEAR(clear_module_state->__pyx_n_s_write);
  Py_CLEAR(clear_module_state->__pyx_n_s_writestr);
  Py_CLEAR(clear_module_state->__pyx_n_s_x);
  Py_CLEAR(clear_module_state->__pyx_n_s_zf);
  Py_CLEAR(clear_module_state->__pyx_n_s_zip);
  Py_CLEAR(clear_module_state->__pyx_n_s_zipfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_zipinfo);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_int_4938760);
  Py_CLEAR(clear_module_state->__pyx_int_58930323);
  Py_CLEAR(clear_module_state->__pyx_int_101702893);
  Py_CLEAR(clear_module_state->__pyx_k__16);
  Py_CLEAR(clear_module_state->__pyx_codeobj_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_slice__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__32);
  Py_CLEAR(clear_module_state->__pyx_tuple__33);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__35);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__37);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__43);
  Py_CLEAR(clear_module_state->__pyx_tuple__44);
  Py_CLEAR(clear_module_state->__pyx_tuple__45);
  Py_CLEAR(clear_module_state->__pyx_tuple__46);
  Py_CLEAR(clear_module_state->__pyx_tuple__47);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__49);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__53);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_tuple__57);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__64);
  Py_CLEAR(clear_module_state->__pyx_tuple__66);
  Py_CLEAR(clear_module_state->__pyx_tuple__68);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__74);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__77);
  Py_CLEAR(clear_module_state->__pyx_tuple__78);
  Py_CLEAR(clear_module_state->__pyx_tuple__86);
  Py_CLEAR(clear_module_state->__pyx_tuple__88);
  Py_CLEAR(clear_module_state->__pyx_tuple__90);
  Py_CLEAR(clear_module_state->__pyx_tuple__92);
  Py_CLEAR(clear_module_state->__pyx_tuple__94);
  Py_CLEAR(clear_module_state->__pyx_tuple__98);
  Py_CLEAR(clear_module_state->__pyx_tuple__101);
  Py_CLEAR(clear_module_state->__pyx_tuple__103);
  Py_CLEAR(clear_module_state->__pyx_tuple__105);
  Py_CLEAR(clear_module_state->__pyx_tuple__107);
  Py_CLEAR(clear_module_state->__pyx_tuple__109);
  Py_CLEAR(clear_module_state->__pyx_tuple__116);
  Py_CLEAR(clear_module_state->__pyx_tuple__119);
  Py_CLEAR(clear_module_state->__pyx_tuple__121);
  Py_CLEAR(clear_module_state->__pyx_tuple__123);
  Py_CLEAR(clear_module_state->__pyx_tuple__124);
  Py_CLEAR(clear_module_state->__pyx_tuple__126);
  Py_CLEAR(clear_module_state->__pyx_tuple__127);
  Py_CLEAR(clear_module_state->__pyx_tuple__129);
  Py_CLEAR(clear_module_state->__pyx_tuple__131);
  Py_CLEAR(clear_module_state->__pyx_tuple__133);
  Py_CLEAR(clear_module_state->__pyx_tuple__140);
  Py_CLEAR(clear_module_state->__pyx_tuple__142);
  Py_CLEAR(clear_module_state->__pyx_tuple__144);
  Py_CLEAR(clear_module_state->__pyx_tuple__146);
  Py_CLEAR(clear_module_state->__pyx_tuple__148);
  Py_CLEAR(clear_module_state->__pyx_tuple__150);
  Py_CLEAR(clear_module_state->__pyx_tuple__153);
  Py_CLEAR(clear_module_state->__pyx_tuple__155);
  Py_CLEAR(clear_module_state->__pyx_tuple__157);
  Py_CLEAR(clear_module_state->__pyx_tuple__160);
  Py_CLEAR(clear_module_state->__pyx_tuple__162);
  Py_CLEAR(clear_module_state->__pyx_tuple__164);
  Py_CLEAR(clear_module_state->__pyx_tuple__166);
  Py_CLEAR(clear_module_state->__pyx_tuple__168);
  Py_CLEAR(clear_module_state->__pyx_tuple__170);
  Py_CLEAR(clear_module_state->__pyx_tuple__174);
  Py_CLEAR(clear_module_state->__pyx_tuple__177);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__38);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__54);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__65);
  Py_CLEAR(clear_module_state->__pyx_codeobj__67);
  Py_CLEAR(clear_module_state->__pyx_codeobj__69);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__73);
  Py_CLEAR(clear_module_state->__pyx_codeobj__75);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__80);
  Py_CLEAR(clear_module_state->__pyx_codeobj__81);
  Py_CLEAR(clear_module_state->__pyx_codeobj__82);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__84);
  Py_CLEAR(clear_module_state->__pyx_codeobj__85);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__89);
  Py_CLEAR(clear_module_state->__pyx_codeobj__91);
  Py_CLEAR(clear_module_state->__pyx_codeobj__93);
  Py_CLEAR(clear_module_state->__pyx_codeobj__95);
  Py_CLEAR(clear_module_state->__pyx_codeobj__96);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__100);
  Py_CLEAR(clear_module_state->__pyx_codeobj__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__104);
  Py_CLEAR(clear_module_state->__pyx_codeobj__106);
  Py_CLEAR(clear_module_state->__pyx_codeobj__108);
  Py_CLEAR(clear_module_state->__pyx_codeobj__110);
  Py_CLEAR(clear_module_state->__pyx_codeobj__111);
  Py_CLEAR(clear_module_state->__pyx_codeobj__112);
  Py_CLEAR(clear_module_state->__pyx_codeobj__113);
  Py_CLEAR(clear_module_state->__pyx_codeobj__114);
  Py_CLEAR(clear_module_state->__pyx_codeobj__115);
  Py_CLEAR(clear_module_state->__pyx_codeobj__117);
  Py_CLEAR(clear_module_state->__pyx_codeobj__118);
  Py_CLEAR(clear_module_state->__pyx_codeobj__120);
  Py_CLEAR(clear_module_state->__pyx_codeobj__122);
  Py_CLEAR(clear_module_state->__pyx_codeobj__125);
  Py_CLEAR(clear_module_state->__pyx_codeobj__128);
  Py_CLEAR(clear_module_state->__pyx_codeobj__130);
  Py_CLEAR(clear_module_state->__pyx_codeobj__132);
  Py_CLEAR(clear_module_state->__pyx_codeobj__134);
  Py_CLEAR(clear_module_state->__pyx_codeobj__135);
  Py_CLEAR(clear_module_state->__pyx_codeobj__136);
  Py_CLEAR(clear_module_state->__pyx_codeobj__137);
  Py_CLEAR(clear_module_state->__pyx_codeobj__138);
  Py_CLEAR(clear_module_state->__pyx_codeobj__139);
  Py_CLEAR(clear_module_state->__pyx_codeobj__141);
  Py_CLEAR(clear_module_state->__pyx_codeobj__143);
  Py_CLEAR(clear_module_state->__pyx_codeobj__145);
  Py_CLEAR(clear_module_state->__pyx_codeobj__147);
  Py_CLEAR(clear_module_state->__pyx_codeobj__149);
  Py_CLEAR(clear_module_state->__pyx_codeobj__151);
  Py_CLEAR(clear_module_state->__pyx_codeobj__152);
  Py_CLEAR(clear_module_state->__pyx_codeobj__154);
  Py_CLEAR(clear_module_state->__pyx_codeobj__156);
  Py_CLEAR(clear_module_state->__pyx_codeobj__158);
  Py_CLEAR(clear_module_state->__pyx_codeobj__159);
  Py_CLEAR(clear_module_state->__pyx_codeobj__161);
  Py_CLEAR(clear_module_state->__pyx_codeobj__163);
  Py_CLEAR(clear_module_state->__pyx_codeobj__165);
  Py_CLEAR(clear_module_state->__pyx_codeobj__167);
  Py_CLEAR(clear_module_state->__pyx_codeobj__169);
  Py_CLEAR(clear_module_state->__pyx_codeobj__171);
  Py_CLEAR(clear_module_state->__pyx_codeobj__172);
  Py_CLEAR(clear_module_state->__pyx_codeobj__173);
  Py_CLEAR(clear_module_state->__pyx_codeobj__175);
  Py_CLEAR(clear_module_state->__pyx_codeobj__176);
  Py_CLEAR(clear_module_state->__pyx_codeobj__178);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model_Model);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model_Model);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model_States);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model_States);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model_Symbol);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model_Symbol);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model_ArraySymbol);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model_StateView);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model_StateView);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct__locked);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_15_shape);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_17_strides);
  Py_VISIT(traverse_module_state->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_Absolute);
  Py_VISIT(traverse_module_state->__pyx_n_s_Add);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Add_a_constraint_to_the_model_Ar);
  Py_VISIT(traverse_module_state->__pyx_n_s_AdvancedIndexing);
  Py_VISIT(traverse_module_state->__pyx_n_s_All);
  Py_VISIT(traverse_module_state->__pyx_kp_u_An_estimate_of_the_size_in_bytes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_An_estimated_size_in_bytes_of_th);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol__state_from_zipfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol__state_into_zipfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol_maybe_equals);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ArraySymbol_maybe_equals_line_16);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol_min);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol_ndim);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol_prod);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol_reshape);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ArraySymbol_reshape_line_1695);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol_shape);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ArraySymbol_shape_line_1722);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol_size);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ArraySymbol_size_line_1740);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol_state);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ArraySymbol_state_line_1757);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol_state_size);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ArraySymbol_state_size_line_1830);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol_strides);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ArraySymbol_strides_line_1860);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArraySymbol_sum);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ArraySymbols_cannot_be_construct);
  Py_VISIT(traverse_module_state->__pyx_n_s_BasicIndexing);
  Py_VISIT(traverse_module_state->__pyx_n_s_BinaryVariable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cannot_initialize_states_of_an_u);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Clear_any_saved_states_Clears_an);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Compare_to_another_symbol_Args_o);
  Py_VISIT(traverse_module_state->__pyx_n_s_Constant);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Convert_the_model_to_a_NetworkX);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Create_a_binary_symbol_as_a_deci);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Create_a_class_dwave_optimizatio);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Create_a_constant_symbol_Args_ar);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Create_a_disjoint_lists_symbol_a);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Create_a_disjoint_sets_symbol_as);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Create_a_list_symbol_as_a_decisi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Create_a_quadratic_model_from_an);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Create_a_set_symbol_as_a_decisio);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Create_an_integer_symbol_as_a_de);
  Py_VISIT(traverse_module_state->__pyx_n_s_DEFINITELY);
  Py_VISIT(traverse_module_state->__pyx_n_b_DWNL);
  Py_VISIT(traverse_module_state->__pyx_n_s_DiGraph);
  Py_VISIT(traverse_module_state->__pyx_n_s_DisjointBitSet);
  Py_VISIT(traverse_module_state->__pyx_n_s_DisjointBitSets);
  Py_VISIT(traverse_module_state->__pyx_n_s_DisjointList);
  Py_VISIT(traverse_module_state->__pyx_n_s_DisjointLists);
  Py_VISIT(traverse_module_state->__pyx_n_s_Equal);
  Py_VISIT(traverse_module_state->__pyx_n_s_G);
  Py_VISIT(traverse_module_state->__pyx_kp_u_I);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_IndexError);
  Py_VISIT(traverse_module_state->__pyx_n_s_IntegerVariable);
  Py_VISIT(traverse_module_state->__pyx_n_s_Integral);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Iterate_over_a_node_s_predecesso);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Iterate_over_a_node_s_successors);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Iterate_over_all_constraints_in);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Iterate_over_all_decision_variab);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Iterate_over_all_symbols_in_the);
  Py_VISIT(traverse_module_state->__pyx_n_s_JSONEncoder);
  Py_VISIT(traverse_module_state->__pyx_n_s_KeyError);
  Py_VISIT(traverse_module_state->__pyx_n_s_LessEqual);
  Py_VISIT(traverse_module_state->__pyx_n_s_ListVariable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Lock_the_model_No_new_symbols_ca);
  Py_VISIT(traverse_module_state->__pyx_n_s_MAYBE);
  Py_VISIT(traverse_module_state->__pyx_n_s_Max);
  Py_VISIT(traverse_module_state->__pyx_n_s_Min);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model);
  Py_VISIT(traverse_module_state->__pyx_n_u_Model);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model__header_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_add_constraint);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_add_constraint_line_87);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_binary);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_binary_line_108);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_constant);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_constant_line_127);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_decision_state_size);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_decision_state_size_line_1);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_disjoint_bit_sets);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_disjoint_bit_sets_line_164);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_disjoint_lists);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_disjoint_lists_line_199);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_from_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_integer);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_integer_line_331);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_into_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_is_locked);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_iter_constraints);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_iter_constraints_line_507);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_iter_decisions);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_iter_decisions_line_523);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_iter_symbols);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_iter_symbols_line_550);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_list);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_list_line_565);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_lock);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_lock_line_584);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_minimize);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_minimize_line_628);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_num_constraints);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_num_constraints_line_660);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_num_decisions);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_num_decisions_line_678);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_num_nodes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_num_nodes_line_697);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_num_symbols);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_num_symbols_line_717);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_quadratic_model);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_quadratic_model_line_740);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_set);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_set_line_767);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_state_size);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_state_size_line_789);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_to_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_to_networkx);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Model_to_networkx_line_817);
  Py_VISIT(traverse_module_state->__pyx_n_s_Model_unlock);
  Py_VISIT(traverse_module_state->__pyx_n_s_Multiply);
  Py_VISIT(traverse_module_state->__pyx_n_s_NOT);
  Py_VISIT(traverse_module_state->__pyx_n_s_Negative);
  Py_VISIT(traverse_module_state->__pyx_n_s_NotImplementedError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Number_of_constraints_in_the_mod);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Number_of_independent_decision_n);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Number_of_model_states_Examples);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Number_of_nodes_in_the_directed);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Number_of_symbols_tracked_by_the);
  Py_VISIT(traverse_module_state->__pyx_n_s_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Prod);
  Py_VISIT(traverse_module_state->__pyx_n_s_QuadraticModel);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReferenceError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Reset_the_state_of_a_node_and_an);
  Py_VISIT(traverse_module_state->__pyx_n_s_Reshape);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Resize_the_number_of_states_If_n);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_an_estimated_byte_size_of);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_the_number_of_elements_in);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_the_shape_of_the_symbol_E);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_the_state_of_the_node_Arg);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_the_stride_length_in_byte);
  Py_VISIT(traverse_module_state->__pyx_n_s_RuntimeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_SetVariable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Set_the_objective_value_to_minim);
  Py_VISIT(traverse_module_state->__pyx_n_s_Square);
  Py_VISIT(traverse_module_state->__pyx_n_s_StateView);
  Py_VISIT(traverse_module_state->__pyx_n_s_StateView___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_StateView___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_States);
  Py_VISIT(traverse_module_state->__pyx_n_s_States___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_States___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_States_clear);
  Py_VISIT(traverse_module_state->__pyx_kp_u_States_clear_line_967);
  Py_VISIT(traverse_module_state->__pyx_n_s_States_from_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_States_from_future);
  Py_VISIT(traverse_module_state->__pyx_n_s_States_initialize);
  Py_VISIT(traverse_module_state->__pyx_n_s_States_into_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_States_resize);
  Py_VISIT(traverse_module_state->__pyx_kp_u_States_resize_line_1088);
  Py_VISIT(traverse_module_state->__pyx_n_s_States_resolve);
  Py_VISIT(traverse_module_state->__pyx_n_s_States_size);
  Py_VISIT(traverse_module_state->__pyx_kp_u_States_size_line_1135);
  Py_VISIT(traverse_module_state->__pyx_n_s_States_to_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_Subtract);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sum);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol__from_zipfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol__into_zipfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol__state_from_zipfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol__state_into_zipfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol_equals);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol_expired);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol_has_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol_iter_predecessors);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Symbol_iter_predecessors_line_12);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol_iter_successors);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Symbol_iter_successors_line_1289);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol_maybe_equals);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol_reset_state);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Symbol_reset_state_line_1356);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol_shares_memory);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol_state_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_Symbol_topological_index);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Symbol_topological_index_line_14);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Symbols_cannot_be_constructed_di);
  Py_VISIT(traverse_module_state->__pyx_n_s_TemporaryFile);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Topological_index_of_the_node_Re);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_UTF_8);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZipFile);
  Py_VISIT(traverse_module_state->__pyx_kp_u__11);
  Py_VISIT(traverse_module_state->__pyx_kp_b__12);
  Py_VISIT(traverse_module_state->__pyx_kp_u__12);
  Py_VISIT(traverse_module_state->__pyx_n_s__179);
  Py_VISIT(traverse_module_state->__pyx_kp_u__18);
  Py_VISIT(traverse_module_state->__pyx_kp_u__19);
  Py_VISIT(traverse_module_state->__pyx_kp_b__23);
  Py_VISIT(traverse_module_state->__pyx_kp_u__3);
  Py_VISIT(traverse_module_state->__pyx_n_s__30);
  Py_VISIT(traverse_module_state->__pyx_kp_b__8);
  Py_VISIT(traverse_module_state->__pyx_kp_u__8);
  Py_VISIT(traverse_module_state->__pyx_n_s_abc);
  Py_VISIT(traverse_module_state->__pyx_kp_u_accessing_the_states_of_a_garbag);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_constraint);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_edge);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_node);
  Py_VISIT(traverse_module_state->__pyx_kp_u_adj_adjlist);
  Py_VISIT(traverse_module_state->__pyx_n_s_adjlist);
  Py_VISIT(traverse_module_state->__pyx_n_s_advanced_indices);
  Py_VISIT(traverse_module_state->__pyx_n_s_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_all_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_allow_pickle);
  Py_VISIT(traverse_module_state->__pyx_n_s_append);
  Py_VISIT(traverse_module_state->__pyx_kp_u_appending_states_is_not_yet_impl);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_array_like);
  Py_VISIT(traverse_module_state->__pyx_kp_u_array_npy);
  Py_VISIT(traverse_module_state->__pyx_n_u_ascii);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_basic_indices);
  Py_VISIT(traverse_module_state->__pyx_n_s_binary);
  Py_VISIT(traverse_module_state->__pyx_kp_u_but_got);
  Py_VISIT(traverse_module_state->__pyx_n_s_c);
  Py_VISIT(traverse_module_state->__pyx_kp_u_cannot_load_states_into_a_model);
  Py_VISIT(traverse_module_state->__pyx_n_s_check_header);
  Py_VISIT(traverse_module_state->__pyx_n_s_cid);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_classname);
  Py_VISIT(traverse_module_state->__pyx_n_s_clear);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_cls);
  Py_VISIT(traverse_module_state->__pyx_n_s_collections);
  Py_VISIT(traverse_module_state->__pyx_n_s_collections_abc);
  Py_VISIT(traverse_module_state->__pyx_n_s_constant);
  Py_VISIT(traverse_module_state->__pyx_n_s_constraints);
  Py_VISIT(traverse_module_state->__pyx_kp_u_constraints_json);
  Py_VISIT(traverse_module_state->__pyx_n_s_contextlib);
  Py_VISIT(traverse_module_state->__pyx_n_s_contextmanager);
  Py_VISIT(traverse_module_state->__pyx_n_s_copy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_copy_False_is_not_yet_supported);
  Py_VISIT(traverse_module_state->__pyx_kp_u_d_a_zA_z_Node);
  Py_VISIT(traverse_module_state->__pyx_n_s_decision_state_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_decision_state_size_locals_genex);
  Py_VISIT(traverse_module_state->__pyx_n_s_decode);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_directory);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_disjoint_bit_sets);
  Py_VISIT(traverse_module_state->__pyx_n_s_disjoint_bit_sets_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_disjoint_lists);
  Py_VISIT(traverse_module_state->__pyx_n_s_dwave);
  Py_VISIT(traverse_module_state->__pyx_n_s_dwave_optimization_model);
  Py_VISIT(traverse_module_state->__pyx_kp_s_dwave_optimization_model_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_dwave_optimization_symbols);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode);
  Py_VISIT(traverse_module_state->__pyx_kp_u_encoded_model_has_an_unsupported);
  Py_VISIT(traverse_module_state->__pyx_n_s_encoder);
  Py_VISIT(traverse_module_state->__pyx_n_s_end);
  Py_VISIT(traverse_module_state->__pyx_n_s_enter);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_s_equals);
  Py_VISIT(traverse_module_state->__pyx_n_s_equals_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_exit);
  Py_VISIT(traverse_module_state->__pyx_n_s_expected);
  Py_VISIT(traverse_module_state->__pyx_kp_u_expected_num_nodes_to_be_a_posit);
  Py_VISIT(traverse_module_state->__pyx_kp_u_expected_num_states_to_be_a_posi);
  Py_VISIT(traverse_module_state->__pyx_n_s_expired);
  Py_VISIT(traverse_module_state->__pyx_n_s_f);
  Py_VISIT(traverse_module_state->__pyx_n_s_fadj);
  Py_VISIT(traverse_module_state->__pyx_n_s_fcls);
  Py_VISIT(traverse_module_state->__pyx_n_s_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_filter);
  Py_VISIT(traverse_module_state->__pyx_n_s_fname);
  Py_VISIT(traverse_module_state->__pyx_n_s_force_zip64);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_future);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_zipfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_functools);
  Py_VISIT(traverse_module_state->__pyx_n_s_future);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_getinfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_getitem___locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_not_implemented_state_deser);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_not_implemented_state_seria);
  Py_VISIT(traverse_module_state->__pyx_n_s_has_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_header_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_header_data_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_header_data_does_not_match_the_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_header_len);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_index);
  Py_VISIT(traverse_module_state->__pyx_kp_u_index_out_of_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_indices);
  Py_VISIT(traverse_module_state->__pyx_n_u_inf);
  Py_VISIT(traverse_module_state->__pyx_kp_u_info_json);
  Py_VISIT(traverse_module_state->__pyx_n_s_initialize);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_kp_u_instead);
  Py_VISIT(traverse_module_state->__pyx_n_s_int);
  Py_VISIT(traverse_module_state->__pyx_n_s_integer);
  Py_VISIT(traverse_module_state->__pyx_n_s_into_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_into_zipfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_locked);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_islice);
  Py_VISIT(traverse_module_state->__pyx_n_s_it);
  Py_VISIT(traverse_module_state->__pyx_n_s_items);
  Py_VISIT(traverse_module_state->__pyx_n_s_iter_constraints);
  Py_VISIT(traverse_module_state->__pyx_n_s_iter_decisions);
  Py_VISIT(traverse_module_state->__pyx_n_s_iter_predecessors);
  Py_VISIT(traverse_module_state->__pyx_n_s_iter_successors);
  Py_VISIT(traverse_module_state->__pyx_n_s_iter_symbols);
  Py_VISIT(traverse_module_state->__pyx_n_s_itertools);
  Py_VISIT(traverse_module_state->__pyx_n_s_j);
  Py_VISIT(traverse_module_state->__pyx_n_s_json);
  Py_VISIT(traverse_module_state->__pyx_n_s_kwargs);
  Py_VISIT(traverse_module_state->__pyx_n_s_linear);
  Py_VISIT(traverse_module_state->__pyx_n_s_lineno);
  Py_VISIT(traverse_module_state->__pyx_n_s_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_lists);
  Py_VISIT(traverse_module_state->__pyx_n_s_load);
  Py_VISIT(traverse_module_state->__pyx_n_s_loads);
  Py_VISIT(traverse_module_state->__pyx_n_s_lock);
  Py_VISIT(traverse_module_state->__pyx_n_s_locked);
  Py_VISIT(traverse_module_state->__pyx_n_s_lower_bound);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_main_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_map);
  Py_VISIT(traverse_module_state->__pyx_n_s_match);
  Py_VISIT(traverse_module_state->__pyx_n_s_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_num_states);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_maybe);
  Py_VISIT(traverse_module_state->__pyx_n_s_maybe_equals);
  Py_VISIT(traverse_module_state->__pyx_n_s_min);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_minimize);
  Py_VISIT(traverse_module_state->__pyx_n_s_mode);
  Py_VISIT(traverse_module_state->__pyx_n_s_model);
  Py_VISIT(traverse_module_state->__pyx_n_s_model_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_n0);
  Py_VISIT(traverse_module_state->__pyx_n_s_n1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_n_must_be_a_non_negative_integer);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_ndarray);
  Py_VISIT(traverse_module_state->__pyx_n_s_ndim);
  Py_VISIT(traverse_module_state->__pyx_n_s_networkx);
  Py_VISIT(traverse_module_state->__pyx_n_s_new);
  Py_VISIT(traverse_module_state->__pyx_n_s_node);
  Py_VISIT(traverse_module_state->__pyx_n_s_node_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_node_subclasses);
  Py_VISIT(traverse_module_state->__pyx_kp_u_nodes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_nodetypes_txt);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_constraints);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_decisions);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_disjoint_lists);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_disjoint_sets);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_nodes);
  Py_VISIT(traverse_module_state->__pyx_n_u_num_nodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_states);
  Py_VISIT(traverse_module_state->__pyx_n_u_num_states);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_symbols);
  Py_VISIT(traverse_module_state->__pyx_n_s_numbers);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_n_s_objective_buff);
  Py_VISIT(traverse_module_state->__pyx_n_s_objective_id);
  Py_VISIT(traverse_module_state->__pyx_kp_u_objective_json);
  Py_VISIT(traverse_module_state->__pyx_kp_u_objective_must_be_an_integer_and);
  Py_VISIT(traverse_module_state->__pyx_n_s_only_decision);
  Py_VISIT(traverse_module_state->__pyx_kp_u_only_integers_slices_and_array_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u_only_squaring_is_currently_suppo);
  Py_VISIT(traverse_module_state->__pyx_n_s_open);
  Py_VISIT(traverse_module_state->__pyx_n_s_operator);
  Py_VISIT(traverse_module_state->__pyx_n_s_optimization);
  Py_VISIT(traverse_module_state->__pyx_n_s_other);
  Py_VISIT(traverse_module_state->__pyx_n_s_p);
  Py_VISIT(traverse_module_state->__pyx_n_s_pack);
  Py_VISIT(traverse_module_state->__pyx_n_s_padding);
  Py_VISIT(traverse_module_state->__pyx_n_s_pickle);
  Py_VISIT(traverse_module_state->__pyx_n_s_pid);
  Py_VISIT(traverse_module_state->__pyx_n_s_pptr);
  Py_VISIT(traverse_module_state->__pyx_n_s_pred);
  Py_VISIT(traverse_module_state->__pyx_n_s_predecessor_ids);
  Py_VISIT(traverse_module_state->__pyx_n_s_predecessors);
  Py_VISIT(traverse_module_state->__pyx_n_s_prefix);
  Py_VISIT(traverse_module_state->__pyx_n_s_primary_set_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_prod);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptr);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_StateView);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_q);
  Py_VISIT(traverse_module_state->__pyx_n_s_quadratic);
  Py_VISIT(traverse_module_state->__pyx_n_s_quadratic_model);
  Py_VISIT(traverse_module_state->__pyx_n_u_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_u_rb);
  Py_VISIT(traverse_module_state->__pyx_n_s_re);
  Py_VISIT(traverse_module_state->__pyx_n_s_read);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_prefix);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_ref);
  Py_VISIT(traverse_module_state->__pyx_n_s_register);
  Py_VISIT(traverse_module_state->__pyx_n_s_register_node_subclasses);
  Py_VISIT(traverse_module_state->__pyx_n_s_register_node_subclasses_locals);
  Py_VISIT(traverse_module_state->__pyx_n_s_replace);
  Py_VISIT(traverse_module_state->__pyx_n_s_reset_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_reshape);
  Py_VISIT(traverse_module_state->__pyx_n_s_resize);
  Py_VISIT(traverse_module_state->__pyx_n_s_resolve);
  Py_VISIT(traverse_module_state->__pyx_n_s_result_hook);
  Py_VISIT(traverse_module_state->__pyx_n_s_rhs);
  Py_VISIT(traverse_module_state->__pyx_n_s_rstrip);
  Py_VISIT(traverse_module_state->__pyx_n_s_save);
  Py_VISIT(traverse_module_state->__pyx_n_s_search);
  Py_VISIT(traverse_module_state->__pyx_n_s_seek);
  Py_VISIT(traverse_module_state->__pyx_n_s_seen_decisions);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__graph_cannot_be_converted);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__states_cannot_be_converted);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_array_ptr_self_expired_ptr);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_expired_ptr_self_node_ptr_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_send);
  Py_VISIT(traverse_module_state->__pyx_n_s_separators);
  Py_VISIT(traverse_module_state->__pyx_n_s_set);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_sets);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_shape);
  Py_VISIT(traverse_module_state->__pyx_n_s_shape_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_shares_memory);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_kp_u_size_is_unbounded);
  Py_VISIT(traverse_module_state->__pyx_n_s_sizeinfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_split);
  Py_VISIT(traverse_module_state->__pyx_n_s_split_indices);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_state_from_zipfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_state_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_state_into_zipfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_state_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_state_size_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_kp_u_states);
  Py_VISIT(traverse_module_state->__pyx_n_s_step);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop);
  Py_VISIT(traverse_module_state->__pyx_n_s_strides);
  Py_VISIT(traverse_module_state->__pyx_n_s_strides_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_struct);
  Py_VISIT(traverse_module_state->__pyx_n_s_subclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_subclasses);
  Py_VISIT(traverse_module_state->__pyx_n_s_sum);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_symbol);
  Py_VISIT(traverse_module_state->__pyx_n_s_symbols);
  Py_VISIT(traverse_module_state->__pyx_n_s_tempfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_kp_u_the_state_of_an_intermediate_var);
  Py_VISIT(traverse_module_state->__pyx_kp_u_the_value_of_an_array_with_more);
  Py_VISIT(traverse_module_state->__pyx_kp_u_the_value_of_an_empty_array_is_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_throw);
  Py_VISIT(traverse_module_state->__pyx_kp_u_to_be_a_subset_of);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_networkx);
  Py_VISIT(traverse_module_state->__pyx_n_s_topological_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_u);
  Py_VISIT(traverse_module_state->__pyx_kp_u_unexpected_adj_adjlist_format);
  Py_VISIT(traverse_module_state->__pyx_kp_u_unexpected_index_type);
  Py_VISIT(traverse_module_state->__pyx_kp_u_unexpected_predecessor_id);
  Py_VISIT(traverse_module_state->__pyx_kp_u_unknown_file_type_expected_magic);
  Py_VISIT(traverse_module_state->__pyx_n_s_unlock);
  Py_VISIT(traverse_module_state->__pyx_n_s_unpack);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_upper_bound);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_kp_u_value_cannot_be_None);
  Py_VISIT(traverse_module_state->__pyx_n_s_version);
  Py_VISIT(traverse_module_state->__pyx_kp_u_version_txt);
  Py_VISIT(traverse_module_state->__pyx_n_u_w);
  Py_VISIT(traverse_module_state->__pyx_kp_u_w_b);
  Py_VISIT(traverse_module_state->__pyx_n_u_wb);
  Py_VISIT(traverse_module_state->__pyx_n_s_weakref);
  Py_VISIT(traverse_module_state->__pyx_n_s_write);
  Py_VISIT(traverse_module_state->__pyx_n_s_writestr);
  Py_VISIT(traverse_module_state->__pyx_n_s_x);
  Py_VISIT(traverse_module_state->__pyx_n_s_zf);
  Py_VISIT(traverse_module_state->__pyx_n_s_zip);
  Py_VISIT(traverse_module_state->__pyx_n_s_zipfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_zipinfo);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_4);
  Py_VISIT(traverse_module_state->__pyx_int_4938760);
  Py_VISIT(traverse_module_state->__pyx_int_58930323);
  Py_VISIT(traverse_module_state->__pyx_int_101702893);
  Py_VISIT(traverse_module_state->__pyx_k__16);
  Py_VISIT(traverse_module_state->__pyx_codeobj_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_slice__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__32);
  Py_VISIT(traverse_module_state->__pyx_tuple__33);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__35);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__37);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__43);
  Py_VISIT(traverse_module_state->__pyx_tuple__44);
  Py_VISIT(traverse_module_state->__pyx_tuple__45);
  Py_VISIT(traverse_module_state->__pyx_tuple__46);
  Py_VISIT(traverse_module_state->__pyx_tuple__47);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__49);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__53);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_tuple__57);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__64);
  Py_VISIT(traverse_module_state->__pyx_tuple__66);
  Py_VISIT(traverse_module_state->__pyx_tuple__68);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__74);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__77);
  Py_VISIT(traverse_module_state->__pyx_tuple__78);
  Py_VISIT(traverse_module_state->__pyx_tuple__86);
  Py_VISIT(traverse_module_state->__pyx_tuple__88);
  Py_VISIT(traverse_module_state->__pyx_tuple__90);
  Py_VISIT(traverse_module_state->__pyx_tuple__92);
  Py_VISIT(traverse_module_state->__pyx_tuple__94);
  Py_VISIT(traverse_module_state->__pyx_tuple__98);
  Py_VISIT(traverse_module_state->__pyx_tuple__101);
  Py_VISIT(traverse_module_state->__pyx_tuple__103);
  Py_VISIT(traverse_module_state->__pyx_tuple__105);
  Py_VISIT(traverse_module_state->__pyx_tuple__107);
  Py_VISIT(traverse_module_state->__pyx_tuple__109);
  Py_VISIT(traverse_module_state->__pyx_tuple__116);
  Py_VISIT(traverse_module_state->__pyx_tuple__119);
  Py_VISIT(traverse_module_state->__pyx_tuple__121);
  Py_VISIT(traverse_module_state->__pyx_tuple__123);
  Py_VISIT(traverse_module_state->__pyx_tuple__124);
  Py_VISIT(traverse_module_state->__pyx_tuple__126);
  Py_VISIT(traverse_module_state->__pyx_tuple__127);
  Py_VISIT(traverse_module_state->__pyx_tuple__129);
  Py_VISIT(traverse_module_state->__pyx_tuple__131);
  Py_VISIT(traverse_module_state->__pyx_tuple__133);
  Py_VISIT(traverse_module_state->__pyx_tuple__140);
  Py_VISIT(traverse_module_state->__pyx_tuple__142);
  Py_VISIT(traverse_module_state->__pyx_tuple__144);
  Py_VISIT(traverse_module_state->__pyx_tuple__146);
  Py_VISIT(traverse_module_state->__pyx_tuple__148);
  Py_VISIT(traverse_module_state->__pyx_tuple__150);
  Py_VISIT(traverse_module_state->__pyx_tuple__153);
  Py_VISIT(traverse_module_state->__pyx_tuple__155);
  Py_VISIT(traverse_module_state->__pyx_tuple__157);
  Py_VISIT(traverse_module_state->__pyx_tuple__160);
  Py_VISIT(traverse_module_state->__pyx_tuple__162);
  Py_VISIT(traverse_module_state->__pyx_tuple__164);
  Py_VISIT(traverse_module_state->__pyx_tuple__166);
  Py_VISIT(traverse_module_state->__pyx_tuple__168);
  Py_VISIT(traverse_module_state->__pyx_tuple__170);
  Py_VISIT(traverse_module_state->__pyx_tuple__174);
  Py_VISIT(traverse_module_state->__pyx_tuple__177);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__38);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__54);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__65);
  Py_VISIT(traverse_module_state->__pyx_codeobj__67);
  Py_VISIT(traverse_module_state->__pyx_codeobj__69);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__73);
  Py_VISIT(traverse_module_state->__pyx_codeobj__75);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__80);
  Py_VISIT(traverse_module_state->__pyx_codeobj__81);
  Py_VISIT(traverse_module_state->__pyx_codeobj__82);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__84);
  Py_VISIT(traverse_module_state->__pyx_codeobj__85);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__89);
  Py_VISIT(traverse_module_state->__pyx_codeobj__91);
  Py_VISIT(traverse_module_state->__pyx_codeobj__93);
  Py_VISIT(traverse_module_state->__pyx_codeobj__95);
  Py_VISIT(traverse_module_state->__pyx_codeobj__96);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__100);
  Py_VISIT(traverse_module_state->__pyx_codeobj__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__104);
  Py_VISIT(traverse_module_state->__pyx_codeobj__106);
  Py_VISIT(traverse_module_state->__pyx_codeobj__108);
  Py_VISIT(traverse_module_state->__pyx_codeobj__110);
  Py_VISIT(traverse_module_state->__pyx_codeobj__111);
  Py_VISIT(traverse_module_state->__pyx_codeobj__112);
  Py_VISIT(traverse_module_state->__pyx_codeobj__113);
  Py_VISIT(traverse_module_state->__pyx_codeobj__114);
  Py_VISIT(traverse_module_state->__pyx_codeobj__115);
  Py_VISIT(traverse_module_state->__pyx_codeobj__117);
  Py_VISIT(traverse_module_state->__pyx_codeobj__118);
  Py_VISIT(traverse_module_state->__pyx_codeobj__120);
  Py_VISIT(traverse_module_state->__pyx_codeobj__122);
  Py_VISIT(traverse_module_state->__pyx_codeobj__125);
  Py_VISIT(traverse_module_state->__pyx_codeobj__128);
  Py_VISIT(traverse_module_state->__pyx_codeobj__130);
  Py_VISIT(traverse_module_state->__pyx_codeobj__132);
  Py_VISIT(traverse_module_state->__pyx_codeobj__134);
  Py_VISIT(traverse_module_state->__pyx_codeobj__135);
  Py_VISIT(traverse_module_state->__pyx_codeobj__136);
  Py_VISIT(traverse_module_state->__pyx_codeobj__137);
  Py_VISIT(traverse_module_state->__pyx_codeobj__138);
  Py_VISIT(traverse_module_state->__pyx_codeobj__139);
  Py_VISIT(traverse_module_state->__pyx_codeobj__141);
  Py_VISIT(traverse_module_state->__pyx_codeobj__143);
  Py_VISIT(traverse_module_state->__pyx_codeobj__145);
  Py_VISIT(traverse_module_state->__pyx_codeobj__147);
  Py_VISIT(traverse_module_state->__pyx_codeobj__149);
  Py_VISIT(traverse_module_state->__pyx_codeobj__151);
  Py_VISIT(traverse_module_state->__pyx_codeobj__152);
  Py_VISIT(traverse_module_state->__pyx_codeobj__154);
  Py_VISIT(traverse_module_state->__pyx_codeobj__156);
  Py_VISIT(traverse_module_state->__pyx_codeobj__158);
  Py_VISIT(traverse_module_state->__pyx_codeobj__159);
  Py_VISIT(traverse_module_state->__pyx_codeobj__161);
  Py_VISIT(traverse_module_state->__pyx_codeobj__163);
  Py_VISIT(traverse_module_state->__pyx_codeobj__165);
  Py_VISIT(traverse_module_state->__pyx_codeobj__167);
  Py_VISIT(traverse_module_state->__pyx_codeobj__169);
  Py_VISIT(traverse_module_state->__pyx_codeobj__171);
  Py_VISIT(traverse_module_state->__pyx_codeobj__172);
  Py_VISIT(traverse_module_state->__pyx_codeobj__173);
  Py_VISIT(traverse_module_state->__pyx_codeobj__175);
  Py_VISIT(traverse_module_state->__pyx_codeobj__176);
  Py_VISIT(traverse_module_state->__pyx_codeobj__178);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4bool_bool __pyx_mstate_global->__pyx_ptype_7cpython_4bool_bool
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_7complex_complex __pyx_mstate_global->__pyx_ptype_7cpython_7complex_complex
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_5dwave_12optimization_5model_Model __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model_Model
#define __pyx_type_5dwave_12optimization_5model_States __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model_States
#define __pyx_type_5dwave_12optimization_5model_Symbol __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model_Symbol
#define __pyx_type_5dwave_12optimization_5model_ArraySymbol __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model_ArraySymbol
#define __pyx_type_5dwave_12optimization_5model_StateView __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model_StateView
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct__locked __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct__locked
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_15_shape __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_15_shape
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_17_strides __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_17_strides
#define __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr __pyx_mstate_global->__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr
#endif
#define __pyx_ptype_5dwave_12optimization_5model_Model __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model_Model
#define __pyx_ptype_5dwave_12optimization_5model_States __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model_States
#define __pyx_ptype_5dwave_12optimization_5model_Symbol __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model_Symbol
#define __pyx_ptype_5dwave_12optimization_5model_ArraySymbol __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model_ArraySymbol
#define __pyx_ptype_5dwave_12optimization_5model_StateView __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model_StateView
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides
#define __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr __pyx_mstate_global->__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr
#define __pyx_n_s_Absolute __pyx_mstate_global->__pyx_n_s_Absolute
#define __pyx_n_s_Add __pyx_mstate_global->__pyx_n_s_Add
#define __pyx_kp_u_Add_a_constraint_to_the_model_Ar __pyx_mstate_global->__pyx_kp_u_Add_a_constraint_to_the_model_Ar
#define __pyx_n_s_AdvancedIndexing __pyx_mstate_global->__pyx_n_s_AdvancedIndexing
#define __pyx_n_s_All __pyx_mstate_global->__pyx_n_s_All
#define __pyx_kp_u_An_estimate_of_the_size_in_bytes __pyx_mstate_global->__pyx_kp_u_An_estimate_of_the_size_in_bytes
#define __pyx_kp_u_An_estimated_size_in_bytes_of_th __pyx_mstate_global->__pyx_kp_u_An_estimated_size_in_bytes_of_th
#define __pyx_n_s_ArraySymbol __pyx_mstate_global->__pyx_n_s_ArraySymbol
#define __pyx_n_s_ArraySymbol___reduce_cython __pyx_mstate_global->__pyx_n_s_ArraySymbol___reduce_cython
#define __pyx_n_s_ArraySymbol___setstate_cython __pyx_mstate_global->__pyx_n_s_ArraySymbol___setstate_cython
#define __pyx_n_s_ArraySymbol__state_from_zipfile __pyx_mstate_global->__pyx_n_s_ArraySymbol__state_from_zipfile
#define __pyx_n_s_ArraySymbol__state_into_zipfile __pyx_mstate_global->__pyx_n_s_ArraySymbol__state_into_zipfile
#define __pyx_n_s_ArraySymbol_all __pyx_mstate_global->__pyx_n_s_ArraySymbol_all
#define __pyx_n_s_ArraySymbol_max __pyx_mstate_global->__pyx_n_s_ArraySymbol_max
#define __pyx_n_s_ArraySymbol_maybe_equals __pyx_mstate_global->__pyx_n_s_ArraySymbol_maybe_equals
#define __pyx_kp_u_ArraySymbol_maybe_equals_line_16 __pyx_mstate_global->__pyx_kp_u_ArraySymbol_maybe_equals_line_16
#define __pyx_n_s_ArraySymbol_min __pyx_mstate_global->__pyx_n_s_ArraySymbol_min
#define __pyx_n_s_ArraySymbol_ndim __pyx_mstate_global->__pyx_n_s_ArraySymbol_ndim
#define __pyx_n_s_ArraySymbol_prod __pyx_mstate_global->__pyx_n_s_ArraySymbol_prod
#define __pyx_n_s_ArraySymbol_reshape __pyx_mstate_global->__pyx_n_s_ArraySymbol_reshape
#define __pyx_kp_u_ArraySymbol_reshape_line_1695 __pyx_mstate_global->__pyx_kp_u_ArraySymbol_reshape_line_1695
#define __pyx_n_s_ArraySymbol_shape __pyx_mstate_global->__pyx_n_s_ArraySymbol_shape
#define __pyx_kp_u_ArraySymbol_shape_line_1722 __pyx_mstate_global->__pyx_kp_u_ArraySymbol_shape_line_1722
#define __pyx_n_s_ArraySymbol_size __pyx_mstate_global->__pyx_n_s_ArraySymbol_size
#define __pyx_kp_u_ArraySymbol_size_line_1740 __pyx_mstate_global->__pyx_kp_u_ArraySymbol_size_line_1740
#define __pyx_n_s_ArraySymbol_state __pyx_mstate_global->__pyx_n_s_ArraySymbol_state
#define __pyx_kp_u_ArraySymbol_state_line_1757 __pyx_mstate_global->__pyx_kp_u_ArraySymbol_state_line_1757
#define __pyx_n_s_ArraySymbol_state_size __pyx_mstate_global->__pyx_n_s_ArraySymbol_state_size
#define __pyx_kp_u_ArraySymbol_state_size_line_1830 __pyx_mstate_global->__pyx_kp_u_ArraySymbol_state_size_line_1830
#define __pyx_n_s_ArraySymbol_strides __pyx_mstate_global->__pyx_n_s_ArraySymbol_strides
#define __pyx_kp_u_ArraySymbol_strides_line_1860 __pyx_mstate_global->__pyx_kp_u_ArraySymbol_strides_line_1860
#define __pyx_n_s_ArraySymbol_sum __pyx_mstate_global->__pyx_n_s_ArraySymbol_sum
#define __pyx_kp_u_ArraySymbols_cannot_be_construct __pyx_mstate_global->__pyx_kp_u_ArraySymbols_cannot_be_construct
#define __pyx_n_s_BasicIndexing __pyx_mstate_global->__pyx_n_s_BasicIndexing
#define __pyx_n_s_BinaryVariable __pyx_mstate_global->__pyx_n_s_BinaryVariable
#define __pyx_kp_u_Cannot_initialize_states_of_an_u __pyx_mstate_global->__pyx_kp_u_Cannot_initialize_states_of_an_u
#define __pyx_kp_u_Clear_any_saved_states_Clears_an __pyx_mstate_global->__pyx_kp_u_Clear_any_saved_states_Clears_an
#define __pyx_kp_u_Compare_to_another_symbol_Args_o __pyx_mstate_global->__pyx_kp_u_Compare_to_another_symbol_Args_o
#define __pyx_n_s_Constant __pyx_mstate_global->__pyx_n_s_Constant
#define __pyx_kp_u_Convert_the_model_to_a_NetworkX __pyx_mstate_global->__pyx_kp_u_Convert_the_model_to_a_NetworkX
#define __pyx_kp_u_Create_a_binary_symbol_as_a_deci __pyx_mstate_global->__pyx_kp_u_Create_a_binary_symbol_as_a_deci
#define __pyx_kp_u_Create_a_class_dwave_optimizatio __pyx_mstate_global->__pyx_kp_u_Create_a_class_dwave_optimizatio
#define __pyx_kp_u_Create_a_constant_symbol_Args_ar __pyx_mstate_global->__pyx_kp_u_Create_a_constant_symbol_Args_ar
#define __pyx_kp_u_Create_a_disjoint_lists_symbol_a __pyx_mstate_global->__pyx_kp_u_Create_a_disjoint_lists_symbol_a
#define __pyx_kp_u_Create_a_disjoint_sets_symbol_as __pyx_mstate_global->__pyx_kp_u_Create_a_disjoint_sets_symbol_as
#define __pyx_kp_u_Create_a_list_symbol_as_a_decisi __pyx_mstate_global->__pyx_kp_u_Create_a_list_symbol_as_a_decisi
#define __pyx_kp_u_Create_a_quadratic_model_from_an __pyx_mstate_global->__pyx_kp_u_Create_a_quadratic_model_from_an
#define __pyx_kp_u_Create_a_set_symbol_as_a_decisio __pyx_mstate_global->__pyx_kp_u_Create_a_set_symbol_as_a_decisio
#define __pyx_kp_u_Create_an_integer_symbol_as_a_de __pyx_mstate_global->__pyx_kp_u_Create_an_integer_symbol_as_a_de
#define __pyx_n_s_DEFINITELY __pyx_mstate_global->__pyx_n_s_DEFINITELY
#define __pyx_n_b_DWNL __pyx_mstate_global->__pyx_n_b_DWNL
#define __pyx_n_s_DiGraph __pyx_mstate_global->__pyx_n_s_DiGraph
#define __pyx_n_s_DisjointBitSet __pyx_mstate_global->__pyx_n_s_DisjointBitSet
#define __pyx_n_s_DisjointBitSets __pyx_mstate_global->__pyx_n_s_DisjointBitSets
#define __pyx_n_s_DisjointList __pyx_mstate_global->__pyx_n_s_DisjointList
#define __pyx_n_s_DisjointLists __pyx_mstate_global->__pyx_n_s_DisjointLists
#define __pyx_n_s_Equal __pyx_mstate_global->__pyx_n_s_Equal
#define __pyx_n_s_G __pyx_mstate_global->__pyx_n_s_G
#define __pyx_kp_u_I __pyx_mstate_global->__pyx_kp_u_I
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0
#define __pyx_n_s_IndexError __pyx_mstate_global->__pyx_n_s_IndexError
#define __pyx_n_s_IntegerVariable __pyx_mstate_global->__pyx_n_s_IntegerVariable
#define __pyx_n_s_Integral __pyx_mstate_global->__pyx_n_s_Integral
#define __pyx_kp_u_Iterate_over_a_node_s_predecesso __pyx_mstate_global->__pyx_kp_u_Iterate_over_a_node_s_predecesso
#define __pyx_kp_u_Iterate_over_a_node_s_successors __pyx_mstate_global->__pyx_kp_u_Iterate_over_a_node_s_successors
#define __pyx_kp_u_Iterate_over_all_constraints_in __pyx_mstate_global->__pyx_kp_u_Iterate_over_all_constraints_in
#define __pyx_kp_u_Iterate_over_all_decision_variab __pyx_mstate_global->__pyx_kp_u_Iterate_over_all_decision_variab
#define __pyx_kp_u_Iterate_over_all_symbols_in_the __pyx_mstate_global->__pyx_kp_u_Iterate_over_all_symbols_in_the
#define __pyx_n_s_JSONEncoder __pyx_mstate_global->__pyx_n_s_JSONEncoder
#define __pyx_n_s_KeyError __pyx_mstate_global->__pyx_n_s_KeyError
#define __pyx_n_s_LessEqual __pyx_mstate_global->__pyx_n_s_LessEqual
#define __pyx_n_s_ListVariable __pyx_mstate_global->__pyx_n_s_ListVariable
#define __pyx_kp_u_Lock_the_model_No_new_symbols_ca __pyx_mstate_global->__pyx_kp_u_Lock_the_model_No_new_symbols_ca
#define __pyx_n_s_MAYBE __pyx_mstate_global->__pyx_n_s_MAYBE
#define __pyx_n_s_Max __pyx_mstate_global->__pyx_n_s_Max
#define __pyx_n_s_Min __pyx_mstate_global->__pyx_n_s_Min
#define __pyx_n_s_Model __pyx_mstate_global->__pyx_n_s_Model
#define __pyx_n_u_Model __pyx_mstate_global->__pyx_n_u_Model
#define __pyx_n_s_Model___reduce_cython __pyx_mstate_global->__pyx_n_s_Model___reduce_cython
#define __pyx_n_s_Model___setstate_cython __pyx_mstate_global->__pyx_n_s_Model___setstate_cython
#define __pyx_n_s_Model__header_data __pyx_mstate_global->__pyx_n_s_Model__header_data
#define __pyx_n_s_Model_add_constraint __pyx_mstate_global->__pyx_n_s_Model_add_constraint
#define __pyx_kp_u_Model_add_constraint_line_87 __pyx_mstate_global->__pyx_kp_u_Model_add_constraint_line_87
#define __pyx_n_s_Model_binary __pyx_mstate_global->__pyx_n_s_Model_binary
#define __pyx_kp_u_Model_binary_line_108 __pyx_mstate_global->__pyx_kp_u_Model_binary_line_108
#define __pyx_n_s_Model_constant __pyx_mstate_global->__pyx_n_s_Model_constant
#define __pyx_kp_u_Model_constant_line_127 __pyx_mstate_global->__pyx_kp_u_Model_constant_line_127
#define __pyx_n_s_Model_decision_state_size __pyx_mstate_global->__pyx_n_s_Model_decision_state_size
#define __pyx_kp_u_Model_decision_state_size_line_1 __pyx_mstate_global->__pyx_kp_u_Model_decision_state_size_line_1
#define __pyx_n_s_Model_disjoint_bit_sets __pyx_mstate_global->__pyx_n_s_Model_disjoint_bit_sets
#define __pyx_kp_u_Model_disjoint_bit_sets_line_164 __pyx_mstate_global->__pyx_kp_u_Model_disjoint_bit_sets_line_164
#define __pyx_n_s_Model_disjoint_lists __pyx_mstate_global->__pyx_n_s_Model_disjoint_lists
#define __pyx_kp_u_Model_disjoint_lists_line_199 __pyx_mstate_global->__pyx_kp_u_Model_disjoint_lists_line_199
#define __pyx_n_s_Model_from_file __pyx_mstate_global->__pyx_n_s_Model_from_file
#define __pyx_n_s_Model_integer __pyx_mstate_global->__pyx_n_s_Model_integer
#define __pyx_kp_u_Model_integer_line_331 __pyx_mstate_global->__pyx_kp_u_Model_integer_line_331
#define __pyx_n_s_Model_into_file __pyx_mstate_global->__pyx_n_s_Model_into_file
#define __pyx_n_s_Model_is_locked __pyx_mstate_global->__pyx_n_s_Model_is_locked
#define __pyx_n_s_Model_iter_constraints __pyx_mstate_global->__pyx_n_s_Model_iter_constraints
#define __pyx_kp_u_Model_iter_constraints_line_507 __pyx_mstate_global->__pyx_kp_u_Model_iter_constraints_line_507
#define __pyx_n_s_Model_iter_decisions __pyx_mstate_global->__pyx_n_s_Model_iter_decisions
#define __pyx_kp_u_Model_iter_decisions_line_523 __pyx_mstate_global->__pyx_kp_u_Model_iter_decisions_line_523
#define __pyx_n_s_Model_iter_symbols __pyx_mstate_global->__pyx_n_s_Model_iter_symbols
#define __pyx_kp_u_Model_iter_symbols_line_550 __pyx_mstate_global->__pyx_kp_u_Model_iter_symbols_line_550
#define __pyx_n_s_Model_list __pyx_mstate_global->__pyx_n_s_Model_list
#define __pyx_kp_u_Model_list_line_565 __pyx_mstate_global->__pyx_kp_u_Model_list_line_565
#define __pyx_n_s_Model_lock __pyx_mstate_global->__pyx_n_s_Model_lock
#define __pyx_kp_u_Model_lock_line_584 __pyx_mstate_global->__pyx_kp_u_Model_lock_line_584
#define __pyx_n_s_Model_minimize __pyx_mstate_global->__pyx_n_s_Model_minimize
#define __pyx_kp_u_Model_minimize_line_628 __pyx_mstate_global->__pyx_kp_u_Model_minimize_line_628
#define __pyx_n_s_Model_num_constraints __pyx_mstate_global->__pyx_n_s_Model_num_constraints
#define __pyx_kp_u_Model_num_constraints_line_660 __pyx_mstate_global->__pyx_kp_u_Model_num_constraints_line_660
#define __pyx_n_s_Model_num_decisions __pyx_mstate_global->__pyx_n_s_Model_num_decisions
#define __pyx_kp_u_Model_num_decisions_line_678 __pyx_mstate_global->__pyx_kp_u_Model_num_decisions_line_678
#define __pyx_n_s_Model_num_nodes __pyx_mstate_global->__pyx_n_s_Model_num_nodes
#define __pyx_kp_u_Model_num_nodes_line_697 __pyx_mstate_global->__pyx_kp_u_Model_num_nodes_line_697
#define __pyx_n_s_Model_num_symbols __pyx_mstate_global->__pyx_n_s_Model_num_symbols
#define __pyx_kp_u_Model_num_symbols_line_717 __pyx_mstate_global->__pyx_kp_u_Model_num_symbols_line_717
#define __pyx_n_s_Model_quadratic_model __pyx_mstate_global->__pyx_n_s_Model_quadratic_model
#define __pyx_kp_u_Model_quadratic_model_line_740 __pyx_mstate_global->__pyx_kp_u_Model_quadratic_model_line_740
#define __pyx_n_s_Model_set __pyx_mstate_global->__pyx_n_s_Model_set
#define __pyx_kp_u_Model_set_line_767 __pyx_mstate_global->__pyx_kp_u_Model_set_line_767
#define __pyx_n_s_Model_state_size __pyx_mstate_global->__pyx_n_s_Model_state_size
#define __pyx_kp_u_Model_state_size_line_789 __pyx_mstate_global->__pyx_kp_u_Model_state_size_line_789
#define __pyx_n_s_Model_to_file __pyx_mstate_global->__pyx_n_s_Model_to_file
#define __pyx_n_s_Model_to_networkx __pyx_mstate_global->__pyx_n_s_Model_to_networkx
#define __pyx_kp_u_Model_to_networkx_line_817 __pyx_mstate_global->__pyx_kp_u_Model_to_networkx_line_817
#define __pyx_n_s_Model_unlock __pyx_mstate_global->__pyx_n_s_Model_unlock
#define __pyx_n_s_Multiply __pyx_mstate_global->__pyx_n_s_Multiply
#define __pyx_n_s_NOT __pyx_mstate_global->__pyx_n_s_NOT
#define __pyx_n_s_Negative __pyx_mstate_global->__pyx_n_s_Negative
#define __pyx_n_s_NotImplementedError __pyx_mstate_global->__pyx_n_s_NotImplementedError
#define __pyx_kp_u_Number_of_constraints_in_the_mod __pyx_mstate_global->__pyx_kp_u_Number_of_constraints_in_the_mod
#define __pyx_kp_u_Number_of_independent_decision_n __pyx_mstate_global->__pyx_kp_u_Number_of_independent_decision_n
#define __pyx_kp_u_Number_of_model_states_Examples __pyx_mstate_global->__pyx_kp_u_Number_of_model_states_Examples
#define __pyx_kp_u_Number_of_nodes_in_the_directed __pyx_mstate_global->__pyx_kp_u_Number_of_nodes_in_the_directed
#define __pyx_kp_u_Number_of_symbols_tracked_by_the __pyx_mstate_global->__pyx_kp_u_Number_of_symbols_tracked_by_the
#define __pyx_n_s_PickleError __pyx_mstate_global->__pyx_n_s_PickleError
#define __pyx_n_s_Prod __pyx_mstate_global->__pyx_n_s_Prod
#define __pyx_n_s_QuadraticModel __pyx_mstate_global->__pyx_n_s_QuadraticModel
#define __pyx_n_s_ReferenceError __pyx_mstate_global->__pyx_n_s_ReferenceError
#define __pyx_kp_u_Reset_the_state_of_a_node_and_an __pyx_mstate_global->__pyx_kp_u_Reset_the_state_of_a_node_and_an
#define __pyx_n_s_Reshape __pyx_mstate_global->__pyx_n_s_Reshape
#define __pyx_kp_u_Resize_the_number_of_states_If_n __pyx_mstate_global->__pyx_kp_u_Resize_the_number_of_states_If_n
#define __pyx_kp_u_Return_an_estimated_byte_size_of __pyx_mstate_global->__pyx_kp_u_Return_an_estimated_byte_size_of
#define __pyx_kp_u_Return_the_number_of_elements_in __pyx_mstate_global->__pyx_kp_u_Return_the_number_of_elements_in
#define __pyx_kp_u_Return_the_shape_of_the_symbol_E __pyx_mstate_global->__pyx_kp_u_Return_the_shape_of_the_symbol_E
#define __pyx_kp_u_Return_the_state_of_the_node_Arg __pyx_mstate_global->__pyx_kp_u_Return_the_state_of_the_node_Arg
#define __pyx_kp_u_Return_the_stride_length_in_byte __pyx_mstate_global->__pyx_kp_u_Return_the_stride_length_in_byte
#define __pyx_n_s_RuntimeError __pyx_mstate_global->__pyx_n_s_RuntimeError
#define __pyx_n_s_SetVariable __pyx_mstate_global->__pyx_n_s_SetVariable
#define __pyx_kp_u_Set_the_objective_value_to_minim __pyx_mstate_global->__pyx_kp_u_Set_the_objective_value_to_minim
#define __pyx_n_s_Square __pyx_mstate_global->__pyx_n_s_Square
#define __pyx_n_s_StateView __pyx_mstate_global->__pyx_n_s_StateView
#define __pyx_n_s_StateView___reduce_cython __pyx_mstate_global->__pyx_n_s_StateView___reduce_cython
#define __pyx_n_s_StateView___setstate_cython __pyx_mstate_global->__pyx_n_s_StateView___setstate_cython
#define __pyx_n_s_States __pyx_mstate_global->__pyx_n_s_States
#define __pyx_n_s_States___reduce_cython __pyx_mstate_global->__pyx_n_s_States___reduce_cython
#define __pyx_n_s_States___setstate_cython __pyx_mstate_global->__pyx_n_s_States___setstate_cython
#define __pyx_n_s_States_clear __pyx_mstate_global->__pyx_n_s_States_clear
#define __pyx_kp_u_States_clear_line_967 __pyx_mstate_global->__pyx_kp_u_States_clear_line_967
#define __pyx_n_s_States_from_file __pyx_mstate_global->__pyx_n_s_States_from_file
#define __pyx_n_s_States_from_future __pyx_mstate_global->__pyx_n_s_States_from_future
#define __pyx_n_s_States_initialize __pyx_mstate_global->__pyx_n_s_States_initialize
#define __pyx_n_s_States_into_file __pyx_mstate_global->__pyx_n_s_States_into_file
#define __pyx_n_s_States_resize __pyx_mstate_global->__pyx_n_s_States_resize
#define __pyx_kp_u_States_resize_line_1088 __pyx_mstate_global->__pyx_kp_u_States_resize_line_1088
#define __pyx_n_s_States_resolve __pyx_mstate_global->__pyx_n_s_States_resolve
#define __pyx_n_s_States_size __pyx_mstate_global->__pyx_n_s_States_size
#define __pyx_kp_u_States_size_line_1135 __pyx_mstate_global->__pyx_kp_u_States_size_line_1135
#define __pyx_n_s_States_to_file __pyx_mstate_global->__pyx_n_s_States_to_file
#define __pyx_n_s_Subtract __pyx_mstate_global->__pyx_n_s_Subtract
#define __pyx_n_s_Sum __pyx_mstate_global->__pyx_n_s_Sum
#define __pyx_n_s_Symbol __pyx_mstate_global->__pyx_n_s_Symbol
#define __pyx_n_s_Symbol___reduce_cython __pyx_mstate_global->__pyx_n_s_Symbol___reduce_cython
#define __pyx_n_s_Symbol___setstate_cython __pyx_mstate_global->__pyx_n_s_Symbol___setstate_cython
#define __pyx_n_s_Symbol__from_zipfile __pyx_mstate_global->__pyx_n_s_Symbol__from_zipfile
#define __pyx_n_s_Symbol__into_zipfile __pyx_mstate_global->__pyx_n_s_Symbol__into_zipfile
#define __pyx_n_s_Symbol__state_from_zipfile __pyx_mstate_global->__pyx_n_s_Symbol__state_from_zipfile
#define __pyx_n_s_Symbol__state_into_zipfile __pyx_mstate_global->__pyx_n_s_Symbol__state_into_zipfile
#define __pyx_n_s_Symbol_equals __pyx_mstate_global->__pyx_n_s_Symbol_equals
#define __pyx_n_s_Symbol_expired __pyx_mstate_global->__pyx_n_s_Symbol_expired
#define __pyx_n_s_Symbol_has_state __pyx_mstate_global->__pyx_n_s_Symbol_has_state
#define __pyx_n_s_Symbol_iter_predecessors __pyx_mstate_global->__pyx_n_s_Symbol_iter_predecessors
#define __pyx_kp_u_Symbol_iter_predecessors_line_12 __pyx_mstate_global->__pyx_kp_u_Symbol_iter_predecessors_line_12
#define __pyx_n_s_Symbol_iter_successors __pyx_mstate_global->__pyx_n_s_Symbol_iter_successors
#define __pyx_kp_u_Symbol_iter_successors_line_1289 __pyx_mstate_global->__pyx_kp_u_Symbol_iter_successors_line_1289
#define __pyx_n_s_Symbol_maybe_equals __pyx_mstate_global->__pyx_n_s_Symbol_maybe_equals
#define __pyx_n_s_Symbol_reset_state __pyx_mstate_global->__pyx_n_s_Symbol_reset_state
#define __pyx_kp_u_Symbol_reset_state_line_1356 __pyx_mstate_global->__pyx_kp_u_Symbol_reset_state_line_1356
#define __pyx_n_s_Symbol_shares_memory __pyx_mstate_global->__pyx_n_s_Symbol_shares_memory
#define __pyx_n_s_Symbol_state_size __pyx_mstate_global->__pyx_n_s_Symbol_state_size
#define __pyx_n_s_Symbol_topological_index __pyx_mstate_global->__pyx_n_s_Symbol_topological_index
#define __pyx_kp_u_Symbol_topological_index_line_14 __pyx_mstate_global->__pyx_kp_u_Symbol_topological_index_line_14
#define __pyx_kp_u_Symbols_cannot_be_constructed_di __pyx_mstate_global->__pyx_kp_u_Symbols_cannot_be_constructed_di
#define __pyx_n_s_TemporaryFile __pyx_mstate_global->__pyx_n_s_TemporaryFile
#define __pyx_kp_u_Topological_index_of_the_node_Re __pyx_mstate_global->__pyx_kp_u_Topological_index_of_the_node_Re
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_u_UTF_8 __pyx_mstate_global->__pyx_kp_u_UTF_8
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_ZipFile __pyx_mstate_global->__pyx_n_s_ZipFile
#define __pyx_kp_u__11 __pyx_mstate_global->__pyx_kp_u__11
#define __pyx_kp_b__12 __pyx_mstate_global->__pyx_kp_b__12
#define __pyx_kp_u__12 __pyx_mstate_global->__pyx_kp_u__12
#define __pyx_n_s__179 __pyx_mstate_global->__pyx_n_s__179
#define __pyx_kp_u__18 __pyx_mstate_global->__pyx_kp_u__18
#define __pyx_kp_u__19 __pyx_mstate_global->__pyx_kp_u__19
#define __pyx_kp_b__23 __pyx_mstate_global->__pyx_kp_b__23
#define __pyx_kp_u__3 __pyx_mstate_global->__pyx_kp_u__3
#define __pyx_n_s__30 __pyx_mstate_global->__pyx_n_s__30
#define __pyx_kp_b__8 __pyx_mstate_global->__pyx_kp_b__8
#define __pyx_kp_u__8 __pyx_mstate_global->__pyx_kp_u__8
#define __pyx_n_s_abc __pyx_mstate_global->__pyx_n_s_abc
#define __pyx_kp_u_accessing_the_states_of_a_garbag __pyx_mstate_global->__pyx_kp_u_accessing_the_states_of_a_garbag
#define __pyx_n_s_add_constraint __pyx_mstate_global->__pyx_n_s_add_constraint
#define __pyx_n_s_add_edge __pyx_mstate_global->__pyx_n_s_add_edge
#define __pyx_n_s_add_node __pyx_mstate_global->__pyx_n_s_add_node
#define __pyx_kp_u_adj_adjlist __pyx_mstate_global->__pyx_kp_u_adj_adjlist
#define __pyx_n_s_adjlist __pyx_mstate_global->__pyx_n_s_adjlist
#define __pyx_n_s_advanced_indices __pyx_mstate_global->__pyx_n_s_advanced_indices
#define __pyx_n_s_all __pyx_mstate_global->__pyx_n_s_all
#define __pyx_n_s_all_2 __pyx_mstate_global->__pyx_n_s_all_2
#define __pyx_n_s_allow_pickle __pyx_mstate_global->__pyx_n_s_allow_pickle
#define __pyx_n_s_append __pyx_mstate_global->__pyx_n_s_append
#define __pyx_kp_u_appending_states_is_not_yet_impl __pyx_mstate_global->__pyx_kp_u_appending_states_is_not_yet_impl
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_array __pyx_mstate_global->__pyx_n_s_array
#define __pyx_n_s_array_like __pyx_mstate_global->__pyx_n_s_array_like
#define __pyx_kp_u_array_npy __pyx_mstate_global->__pyx_kp_u_array_npy
#define __pyx_n_u_ascii __pyx_mstate_global->__pyx_n_u_ascii
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_basic_indices __pyx_mstate_global->__pyx_n_s_basic_indices
#define __pyx_n_s_binary __pyx_mstate_global->__pyx_n_s_binary
#define __pyx_kp_u_but_got __pyx_mstate_global->__pyx_kp_u_but_got
#define __pyx_n_s_c __pyx_mstate_global->__pyx_n_s_c
#define __pyx_kp_u_cannot_load_states_into_a_model __pyx_mstate_global->__pyx_kp_u_cannot_load_states_into_a_model
#define __pyx_n_s_check_header __pyx_mstate_global->__pyx_n_s_check_header
#define __pyx_n_s_cid __pyx_mstate_global->__pyx_n_s_cid
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_classname __pyx_mstate_global->__pyx_n_s_classname
#define __pyx_n_s_clear __pyx_mstate_global->__pyx_n_s_clear
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_close __pyx_mstate_global->__pyx_n_s_close
#define __pyx_n_s_cls __pyx_mstate_global->__pyx_n_s_cls
#define __pyx_n_s_collections __pyx_mstate_global->__pyx_n_s_collections
#define __pyx_n_s_collections_abc __pyx_mstate_global->__pyx_n_s_collections_abc
#define __pyx_n_s_constant __pyx_mstate_global->__pyx_n_s_constant
#define __pyx_n_s_constraints __pyx_mstate_global->__pyx_n_s_constraints
#define __pyx_kp_u_constraints_json __pyx_mstate_global->__pyx_kp_u_constraints_json
#define __pyx_n_s_contextlib __pyx_mstate_global->__pyx_n_s_contextlib
#define __pyx_n_s_contextmanager __pyx_mstate_global->__pyx_n_s_contextmanager
#define __pyx_n_s_copy __pyx_mstate_global->__pyx_n_s_copy
#define __pyx_kp_u_copy_False_is_not_yet_supported __pyx_mstate_global->__pyx_kp_u_copy_False_is_not_yet_supported
#define __pyx_kp_u_d_a_zA_z_Node __pyx_mstate_global->__pyx_kp_u_d_a_zA_z_Node
#define __pyx_n_s_decision_state_size __pyx_mstate_global->__pyx_n_s_decision_state_size
#define __pyx_n_s_decision_state_size_locals_genex __pyx_mstate_global->__pyx_n_s_decision_state_size_locals_genex
#define __pyx_n_s_decode __pyx_mstate_global->__pyx_n_s_decode
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_dict_2 __pyx_mstate_global->__pyx_n_s_dict_2
#define __pyx_n_s_directory __pyx_mstate_global->__pyx_n_s_directory
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_disjoint_bit_sets __pyx_mstate_global->__pyx_n_s_disjoint_bit_sets
#define __pyx_n_s_disjoint_bit_sets_locals_genexpr __pyx_mstate_global->__pyx_n_s_disjoint_bit_sets_locals_genexpr
#define __pyx_n_s_disjoint_lists __pyx_mstate_global->__pyx_n_s_disjoint_lists
#define __pyx_n_s_dwave __pyx_mstate_global->__pyx_n_s_dwave
#define __pyx_n_s_dwave_optimization_model __pyx_mstate_global->__pyx_n_s_dwave_optimization_model
#define __pyx_kp_s_dwave_optimization_model_pyx __pyx_mstate_global->__pyx_kp_s_dwave_optimization_model_pyx
#define __pyx_n_s_dwave_optimization_symbols __pyx_mstate_global->__pyx_n_s_dwave_optimization_symbols
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_encode __pyx_mstate_global->__pyx_n_s_encode
#define __pyx_kp_u_encoded_model_has_an_unsupported __pyx_mstate_global->__pyx_kp_u_encoded_model_has_an_unsupported
#define __pyx_n_s_encoder __pyx_mstate_global->__pyx_n_s_encoder
#define __pyx_n_s_end __pyx_mstate_global->__pyx_n_s_end
#define __pyx_n_s_enter __pyx_mstate_global->__pyx_n_s_enter
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_s_equals __pyx_mstate_global->__pyx_n_s_equals
#define __pyx_n_s_equals_locals_genexpr __pyx_mstate_global->__pyx_n_s_equals_locals_genexpr
#define __pyx_n_s_exit __pyx_mstate_global->__pyx_n_s_exit
#define __pyx_n_s_expected __pyx_mstate_global->__pyx_n_s_expected
#define __pyx_kp_u_expected_num_nodes_to_be_a_posit __pyx_mstate_global->__pyx_kp_u_expected_num_nodes_to_be_a_posit
#define __pyx_kp_u_expected_num_states_to_be_a_posi __pyx_mstate_global->__pyx_kp_u_expected_num_states_to_be_a_posi
#define __pyx_n_s_expired __pyx_mstate_global->__pyx_n_s_expired
#define __pyx_n_s_f __pyx_mstate_global->__pyx_n_s_f
#define __pyx_n_s_fadj __pyx_mstate_global->__pyx_n_s_fadj
#define __pyx_n_s_fcls __pyx_mstate_global->__pyx_n_s_fcls
#define __pyx_n_s_file __pyx_mstate_global->__pyx_n_s_file
#define __pyx_n_s_filter __pyx_mstate_global->__pyx_n_s_filter
#define __pyx_n_s_fname __pyx_mstate_global->__pyx_n_s_fname
#define __pyx_n_s_force_zip64 __pyx_mstate_global->__pyx_n_s_force_zip64
#define __pyx_n_s_from_file __pyx_mstate_global->__pyx_n_s_from_file
#define __pyx_n_s_from_future __pyx_mstate_global->__pyx_n_s_from_future
#define __pyx_n_s_from_zipfile __pyx_mstate_global->__pyx_n_s_from_zipfile
#define __pyx_n_s_functools __pyx_mstate_global->__pyx_n_s_functools
#define __pyx_n_s_future __pyx_mstate_global->__pyx_n_s_future
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_genexpr __pyx_mstate_global->__pyx_n_s_genexpr
#define __pyx_n_s_get __pyx_mstate_global->__pyx_n_s_get
#define __pyx_n_s_getinfo __pyx_mstate_global->__pyx_n_s_getinfo
#define __pyx_n_s_getitem___locals_genexpr __pyx_mstate_global->__pyx_n_s_getitem___locals_genexpr
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_kp_u_has_not_implemented_state_deser __pyx_mstate_global->__pyx_kp_u_has_not_implemented_state_deser
#define __pyx_kp_u_has_not_implemented_state_seria __pyx_mstate_global->__pyx_kp_u_has_not_implemented_state_seria
#define __pyx_n_s_has_state __pyx_mstate_global->__pyx_n_s_has_state
#define __pyx_n_s_header_data __pyx_mstate_global->__pyx_n_s_header_data
#define __pyx_n_s_header_data_2 __pyx_mstate_global->__pyx_n_s_header_data_2
#define __pyx_kp_u_header_data_does_not_match_the_d __pyx_mstate_global->__pyx_kp_u_header_data_does_not_match_the_d
#define __pyx_n_s_header_len __pyx_mstate_global->__pyx_n_s_header_len
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_index __pyx_mstate_global->__pyx_n_s_index
#define __pyx_kp_u_index_out_of_range __pyx_mstate_global->__pyx_kp_u_index_out_of_range
#define __pyx_n_s_indices __pyx_mstate_global->__pyx_n_s_indices
#define __pyx_n_u_inf __pyx_mstate_global->__pyx_n_u_inf
#define __pyx_kp_u_info_json __pyx_mstate_global->__pyx_kp_u_info_json
#define __pyx_n_s_initialize __pyx_mstate_global->__pyx_n_s_initialize
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_kp_u_instead __pyx_mstate_global->__pyx_kp_u_instead
#define __pyx_n_s_int __pyx_mstate_global->__pyx_n_s_int
#define __pyx_n_s_integer __pyx_mstate_global->__pyx_n_s_integer
#define __pyx_n_s_into_file __pyx_mstate_global->__pyx_n_s_into_file
#define __pyx_n_s_into_zipfile __pyx_mstate_global->__pyx_n_s_into_zipfile
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_is_locked __pyx_mstate_global->__pyx_n_s_is_locked
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_islice __pyx_mstate_global->__pyx_n_s_islice
#define __pyx_n_s_it __pyx_mstate_global->__pyx_n_s_it
#define __pyx_n_s_items __pyx_mstate_global->__pyx_n_s_items
#define __pyx_n_s_iter_constraints __pyx_mstate_global->__pyx_n_s_iter_constraints
#define __pyx_n_s_iter_decisions __pyx_mstate_global->__pyx_n_s_iter_decisions
#define __pyx_n_s_iter_predecessors __pyx_mstate_global->__pyx_n_s_iter_predecessors
#define __pyx_n_s_iter_successors __pyx_mstate_global->__pyx_n_s_iter_successors
#define __pyx_n_s_iter_symbols __pyx_mstate_global->__pyx_n_s_iter_symbols
#define __pyx_n_s_itertools __pyx_mstate_global->__pyx_n_s_itertools
#define __pyx_n_s_j __pyx_mstate_global->__pyx_n_s_j
#define __pyx_n_s_json __pyx_mstate_global->__pyx_n_s_json
#define __pyx_n_s_kwargs __pyx_mstate_global->__pyx_n_s_kwargs
#define __pyx_n_s_linear __pyx_mstate_global->__pyx_n_s_linear
#define __pyx_n_s_lineno __pyx_mstate_global->__pyx_n_s_lineno
#define __pyx_n_s_list __pyx_mstate_global->__pyx_n_s_list
#define __pyx_n_s_lists __pyx_mstate_global->__pyx_n_s_lists
#define __pyx_n_s_load __pyx_mstate_global->__pyx_n_s_load
#define __pyx_n_s_loads __pyx_mstate_global->__pyx_n_s_loads
#define __pyx_n_s_lock __pyx_mstate_global->__pyx_n_s_lock
#define __pyx_n_s_locked __pyx_mstate_global->__pyx_n_s_locked
#define __pyx_n_s_lower_bound __pyx_mstate_global->__pyx_n_s_lower_bound
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_main_2 __pyx_mstate_global->__pyx_n_s_main_2
#define __pyx_n_s_map __pyx_mstate_global->__pyx_n_s_map
#define __pyx_n_s_match __pyx_mstate_global->__pyx_n_s_match
#define __pyx_n_s_max __pyx_mstate_global->__pyx_n_s_max
#define __pyx_n_s_max_num_states __pyx_mstate_global->__pyx_n_s_max_num_states
#define __pyx_n_s_max_size __pyx_mstate_global->__pyx_n_s_max_size
#define __pyx_n_s_maybe __pyx_mstate_global->__pyx_n_s_maybe
#define __pyx_n_s_maybe_equals __pyx_mstate_global->__pyx_n_s_maybe_equals
#define __pyx_n_s_min __pyx_mstate_global->__pyx_n_s_min
#define __pyx_n_s_min_size __pyx_mstate_global->__pyx_n_s_min_size
#define __pyx_n_s_minimize __pyx_mstate_global->__pyx_n_s_minimize
#define __pyx_n_s_mode __pyx_mstate_global->__pyx_n_s_mode
#define __pyx_n_s_model __pyx_mstate_global->__pyx_n_s_model
#define __pyx_n_s_model_info __pyx_mstate_global->__pyx_n_s_model_info
#define __pyx_n_s_n __pyx_mstate_global->__pyx_n_s_n
#define __pyx_n_s_n0 __pyx_mstate_global->__pyx_n_s_n0
#define __pyx_n_s_n1 __pyx_mstate_global->__pyx_n_s_n1
#define __pyx_kp_u_n_must_be_a_non_negative_integer __pyx_mstate_global->__pyx_kp_u_n_must_be_a_non_negative_integer
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_ndarray __pyx_mstate_global->__pyx_n_s_ndarray
#define __pyx_n_s_ndim __pyx_mstate_global->__pyx_n_s_ndim
#define __pyx_n_s_networkx __pyx_mstate_global->__pyx_n_s_networkx
#define __pyx_n_s_new __pyx_mstate_global->__pyx_n_s_new
#define __pyx_n_s_node __pyx_mstate_global->__pyx_n_s_node
#define __pyx_n_s_node_id __pyx_mstate_global->__pyx_n_s_node_id
#define __pyx_n_s_node_subclasses __pyx_mstate_global->__pyx_n_s_node_subclasses
#define __pyx_kp_u_nodes __pyx_mstate_global->__pyx_kp_u_nodes
#define __pyx_kp_u_nodetypes_txt __pyx_mstate_global->__pyx_kp_u_nodetypes_txt
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_n_s_num_constraints __pyx_mstate_global->__pyx_n_s_num_constraints
#define __pyx_n_s_num_decisions __pyx_mstate_global->__pyx_n_s_num_decisions
#define __pyx_n_s_num_disjoint_lists __pyx_mstate_global->__pyx_n_s_num_disjoint_lists
#define __pyx_n_s_num_disjoint_sets __pyx_mstate_global->__pyx_n_s_num_disjoint_sets
#define __pyx_n_s_num_nodes __pyx_mstate_global->__pyx_n_s_num_nodes
#define __pyx_n_u_num_nodes __pyx_mstate_global->__pyx_n_u_num_nodes
#define __pyx_n_s_num_states __pyx_mstate_global->__pyx_n_s_num_states
#define __pyx_n_u_num_states __pyx_mstate_global->__pyx_n_u_num_states
#define __pyx_n_s_num_symbols __pyx_mstate_global->__pyx_n_s_num_symbols
#define __pyx_n_s_numbers __pyx_mstate_global->__pyx_n_s_numbers
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_n_s_objective_buff __pyx_mstate_global->__pyx_n_s_objective_buff
#define __pyx_n_s_objective_id __pyx_mstate_global->__pyx_n_s_objective_id
#define __pyx_kp_u_objective_json __pyx_mstate_global->__pyx_kp_u_objective_json
#define __pyx_kp_u_objective_must_be_an_integer_and __pyx_mstate_global->__pyx_kp_u_objective_must_be_an_integer_and
#define __pyx_n_s_only_decision __pyx_mstate_global->__pyx_n_s_only_decision
#define __pyx_kp_u_only_integers_slices_and_array_s __pyx_mstate_global->__pyx_kp_u_only_integers_slices_and_array_s
#define __pyx_kp_u_only_squaring_is_currently_suppo __pyx_mstate_global->__pyx_kp_u_only_squaring_is_currently_suppo
#define __pyx_n_s_open __pyx_mstate_global->__pyx_n_s_open
#define __pyx_n_s_operator __pyx_mstate_global->__pyx_n_s_operator
#define __pyx_n_s_optimization __pyx_mstate_global->__pyx_n_s_optimization
#define __pyx_n_s_other __pyx_mstate_global->__pyx_n_s_other
#define __pyx_n_s_p __pyx_mstate_global->__pyx_n_s_p
#define __pyx_n_s_pack __pyx_mstate_global->__pyx_n_s_pack
#define __pyx_n_s_padding __pyx_mstate_global->__pyx_n_s_padding
#define __pyx_n_s_pickle __pyx_mstate_global->__pyx_n_s_pickle
#define __pyx_n_s_pid __pyx_mstate_global->__pyx_n_s_pid
#define __pyx_n_s_pptr __pyx_mstate_global->__pyx_n_s_pptr
#define __pyx_n_s_pred __pyx_mstate_global->__pyx_n_s_pred
#define __pyx_n_s_predecessor_ids __pyx_mstate_global->__pyx_n_s_predecessor_ids
#define __pyx_n_s_predecessors __pyx_mstate_global->__pyx_n_s_predecessors
#define __pyx_n_s_prefix __pyx_mstate_global->__pyx_n_s_prefix
#define __pyx_n_s_primary_set_size __pyx_mstate_global->__pyx_n_s_primary_set_size
#define __pyx_n_s_prod __pyx_mstate_global->__pyx_n_s_prod
#define __pyx_n_s_ptr __pyx_mstate_global->__pyx_n_s_ptr
#define __pyx_n_s_pyx_PickleError __pyx_mstate_global->__pyx_n_s_pyx_PickleError
#define __pyx_n_s_pyx_checksum __pyx_mstate_global->__pyx_n_s_pyx_checksum
#define __pyx_n_s_pyx_result __pyx_mstate_global->__pyx_n_s_pyx_result
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_type __pyx_mstate_global->__pyx_n_s_pyx_type
#define __pyx_n_s_pyx_unpickle_StateView __pyx_mstate_global->__pyx_n_s_pyx_unpickle_StateView
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_q __pyx_mstate_global->__pyx_n_s_q
#define __pyx_n_s_quadratic __pyx_mstate_global->__pyx_n_s_quadratic
#define __pyx_n_s_quadratic_model __pyx_mstate_global->__pyx_n_s_quadratic_model
#define __pyx_n_u_r __pyx_mstate_global->__pyx_n_u_r
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_u_rb __pyx_mstate_global->__pyx_n_u_rb
#define __pyx_n_s_re __pyx_mstate_global->__pyx_n_s_re
#define __pyx_n_s_read __pyx_mstate_global->__pyx_n_s_read
#define __pyx_n_s_read_prefix __pyx_mstate_global->__pyx_n_s_read_prefix
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_ref __pyx_mstate_global->__pyx_n_s_ref
#define __pyx_n_s_register __pyx_mstate_global->__pyx_n_s_register
#define __pyx_n_s_register_node_subclasses __pyx_mstate_global->__pyx_n_s_register_node_subclasses
#define __pyx_n_s_register_node_subclasses_locals __pyx_mstate_global->__pyx_n_s_register_node_subclasses_locals
#define __pyx_n_s_replace __pyx_mstate_global->__pyx_n_s_replace
#define __pyx_n_s_reset_state __pyx_mstate_global->__pyx_n_s_reset_state
#define __pyx_n_s_reshape __pyx_mstate_global->__pyx_n_s_reshape
#define __pyx_n_s_resize __pyx_mstate_global->__pyx_n_s_resize
#define __pyx_n_s_resolve __pyx_mstate_global->__pyx_n_s_resolve
#define __pyx_n_s_result_hook __pyx_mstate_global->__pyx_n_s_result_hook
#define __pyx_n_s_rhs __pyx_mstate_global->__pyx_n_s_rhs
#define __pyx_n_s_rstrip __pyx_mstate_global->__pyx_n_s_rstrip
#define __pyx_n_s_save __pyx_mstate_global->__pyx_n_s_save
#define __pyx_n_s_search __pyx_mstate_global->__pyx_n_s_search
#define __pyx_n_s_seek __pyx_mstate_global->__pyx_n_s_seek
#define __pyx_n_s_seen_decisions __pyx_mstate_global->__pyx_n_s_seen_decisions
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self__graph_cannot_be_converted __pyx_mstate_global->__pyx_kp_s_self__graph_cannot_be_converted
#define __pyx_kp_s_self__states_cannot_be_converted __pyx_mstate_global->__pyx_kp_s_self__states_cannot_be_converted
#define __pyx_kp_s_self_array_ptr_self_expired_ptr __pyx_mstate_global->__pyx_kp_s_self_array_ptr_self_expired_ptr
#define __pyx_kp_s_self_expired_ptr_self_node_ptr_c __pyx_mstate_global->__pyx_kp_s_self_expired_ptr_self_node_ptr_c
#define __pyx_n_s_send __pyx_mstate_global->__pyx_n_s_send
#define __pyx_n_s_separators __pyx_mstate_global->__pyx_n_s_separators
#define __pyx_n_s_set __pyx_mstate_global->__pyx_n_s_set
#define __pyx_n_s_set_state __pyx_mstate_global->__pyx_n_s_set_state
#define __pyx_n_s_sets __pyx_mstate_global->__pyx_n_s_sets
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_shape __pyx_mstate_global->__pyx_n_s_shape
#define __pyx_n_s_shape_locals_genexpr __pyx_mstate_global->__pyx_n_s_shape_locals_genexpr
#define __pyx_n_s_shares_memory __pyx_mstate_global->__pyx_n_s_shares_memory
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_kp_u_size_is_unbounded __pyx_mstate_global->__pyx_kp_u_size_is_unbounded
#define __pyx_n_s_sizeinfo __pyx_mstate_global->__pyx_n_s_sizeinfo
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_split __pyx_mstate_global->__pyx_n_s_split
#define __pyx_n_s_split_indices __pyx_mstate_global->__pyx_n_s_split_indices
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_n_s_state __pyx_mstate_global->__pyx_n_s_state
#define __pyx_n_s_state_from_zipfile __pyx_mstate_global->__pyx_n_s_state_from_zipfile
#define __pyx_n_s_state_index __pyx_mstate_global->__pyx_n_s_state_index
#define __pyx_n_s_state_into_zipfile __pyx_mstate_global->__pyx_n_s_state_into_zipfile
#define __pyx_n_s_state_size __pyx_mstate_global->__pyx_n_s_state_size
#define __pyx_n_s_state_size_locals_genexpr __pyx_mstate_global->__pyx_n_s_state_size_locals_genexpr
#define __pyx_kp_u_states __pyx_mstate_global->__pyx_kp_u_states
#define __pyx_n_s_step __pyx_mstate_global->__pyx_n_s_step
#define __pyx_n_s_stop __pyx_mstate_global->__pyx_n_s_stop
#define __pyx_n_s_strides __pyx_mstate_global->__pyx_n_s_strides
#define __pyx_n_s_strides_locals_genexpr __pyx_mstate_global->__pyx_n_s_strides_locals_genexpr
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_struct __pyx_mstate_global->__pyx_n_s_struct
#define __pyx_n_s_subclass __pyx_mstate_global->__pyx_n_s_subclass
#define __pyx_n_s_subclasses __pyx_mstate_global->__pyx_n_s_subclasses
#define __pyx_n_s_sum __pyx_mstate_global->__pyx_n_s_sum
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_symbol __pyx_mstate_global->__pyx_n_s_symbol
#define __pyx_n_s_symbols __pyx_mstate_global->__pyx_n_s_symbols
#define __pyx_n_s_tempfile __pyx_mstate_global->__pyx_n_s_tempfile
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_kp_u_the_state_of_an_intermediate_var __pyx_mstate_global->__pyx_kp_u_the_state_of_an_intermediate_var
#define __pyx_kp_u_the_value_of_an_array_with_more __pyx_mstate_global->__pyx_kp_u_the_value_of_an_array_with_more
#define __pyx_kp_u_the_value_of_an_empty_array_is_a __pyx_mstate_global->__pyx_kp_u_the_value_of_an_empty_array_is_a
#define __pyx_n_s_throw __pyx_mstate_global->__pyx_n_s_throw
#define __pyx_kp_u_to_be_a_subset_of __pyx_mstate_global->__pyx_kp_u_to_be_a_subset_of
#define __pyx_n_s_to_file __pyx_mstate_global->__pyx_n_s_to_file
#define __pyx_n_s_to_networkx __pyx_mstate_global->__pyx_n_s_to_networkx
#define __pyx_n_s_topological_index __pyx_mstate_global->__pyx_n_s_topological_index
#define __pyx_n_s_u __pyx_mstate_global->__pyx_n_s_u
#define __pyx_kp_u_unexpected_adj_adjlist_format __pyx_mstate_global->__pyx_kp_u_unexpected_adj_adjlist_format
#define __pyx_kp_u_unexpected_index_type __pyx_mstate_global->__pyx_kp_u_unexpected_index_type
#define __pyx_kp_u_unexpected_predecessor_id __pyx_mstate_global->__pyx_kp_u_unexpected_predecessor_id
#define __pyx_kp_u_unknown_file_type_expected_magic __pyx_mstate_global->__pyx_kp_u_unknown_file_type_expected_magic
#define __pyx_n_s_unlock __pyx_mstate_global->__pyx_n_s_unlock
#define __pyx_n_s_unpack __pyx_mstate_global->__pyx_n_s_unpack
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_upper_bound __pyx_mstate_global->__pyx_n_s_upper_bound
#define __pyx_n_s_use_setstate __pyx_mstate_global->__pyx_n_s_use_setstate
#define __pyx_n_s_v __pyx_mstate_global->__pyx_n_s_v
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_kp_u_value_cannot_be_None __pyx_mstate_global->__pyx_kp_u_value_cannot_be_None
#define __pyx_n_s_version __pyx_mstate_global->__pyx_n_s_version
#define __pyx_kp_u_version_txt __pyx_mstate_global->__pyx_kp_u_version_txt
#define __pyx_n_u_w __pyx_mstate_global->__pyx_n_u_w
#define __pyx_kp_u_w_b __pyx_mstate_global->__pyx_kp_u_w_b
#define __pyx_n_u_wb __pyx_mstate_global->__pyx_n_u_wb
#define __pyx_n_s_weakref __pyx_mstate_global->__pyx_n_s_weakref
#define __pyx_n_s_write __pyx_mstate_global->__pyx_n_s_write
#define __pyx_n_s_writestr __pyx_mstate_global->__pyx_n_s_writestr
#define __pyx_n_s_x __pyx_mstate_global->__pyx_n_s_x
#define __pyx_n_s_zf __pyx_mstate_global->__pyx_n_s_zf
#define __pyx_n_s_zip __pyx_mstate_global->__pyx_n_s_zip
#define __pyx_n_s_zipfile __pyx_mstate_global->__pyx_n_s_zipfile
#define __pyx_n_s_zipinfo __pyx_mstate_global->__pyx_n_s_zipinfo
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_4 __pyx_mstate_global->__pyx_int_4
#define __pyx_int_4938760 __pyx_mstate_global->__pyx_int_4938760
#define __pyx_int_58930323 __pyx_mstate_global->__pyx_int_58930323
#define __pyx_int_101702893 __pyx_mstate_global->__pyx_int_101702893
#define __pyx_k__16 __pyx_mstate_global->__pyx_k__16
#define __pyx_codeobj_ __pyx_mstate_global->__pyx_codeobj_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_slice__42 __pyx_mstate_global->__pyx_slice__42
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__32 __pyx_mstate_global->__pyx_tuple__32
#define __pyx_tuple__33 __pyx_mstate_global->__pyx_tuple__33
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__35 __pyx_mstate_global->__pyx_tuple__35
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__37 __pyx_mstate_global->__pyx_tuple__37
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__43 __pyx_mstate_global->__pyx_tuple__43
#define __pyx_tuple__44 __pyx_mstate_global->__pyx_tuple__44
#define __pyx_tuple__45 __pyx_mstate_global->__pyx_tuple__45
#define __pyx_tuple__46 __pyx_mstate_global->__pyx_tuple__46
#define __pyx_tuple__47 __pyx_mstate_global->__pyx_tuple__47
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__49 __pyx_mstate_global->__pyx_tuple__49
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__53 __pyx_mstate_global->__pyx_tuple__53
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_tuple__57 __pyx_mstate_global->__pyx_tuple__57
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__64 __pyx_mstate_global->__pyx_tuple__64
#define __pyx_tuple__66 __pyx_mstate_global->__pyx_tuple__66
#define __pyx_tuple__68 __pyx_mstate_global->__pyx_tuple__68
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__74 __pyx_mstate_global->__pyx_tuple__74
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__77 __pyx_mstate_global->__pyx_tuple__77
#define __pyx_tuple__78 __pyx_mstate_global->__pyx_tuple__78
#define __pyx_tuple__86 __pyx_mstate_global->__pyx_tuple__86
#define __pyx_tuple__88 __pyx_mstate_global->__pyx_tuple__88
#define __pyx_tuple__90 __pyx_mstate_global->__pyx_tuple__90
#define __pyx_tuple__92 __pyx_mstate_global->__pyx_tuple__92
#define __pyx_tuple__94 __pyx_mstate_global->__pyx_tuple__94
#define __pyx_tuple__98 __pyx_mstate_global->__pyx_tuple__98
#define __pyx_tuple__101 __pyx_mstate_global->__pyx_tuple__101
#define __pyx_tuple__103 __pyx_mstate_global->__pyx_tuple__103
#define __pyx_tuple__105 __pyx_mstate_global->__pyx_tuple__105
#define __pyx_tuple__107 __pyx_mstate_global->__pyx_tuple__107
#define __pyx_tuple__109 __pyx_mstate_global->__pyx_tuple__109
#define __pyx_tuple__116 __pyx_mstate_global->__pyx_tuple__116
#define __pyx_tuple__119 __pyx_mstate_global->__pyx_tuple__119
#define __pyx_tuple__121 __pyx_mstate_global->__pyx_tuple__121
#define __pyx_tuple__123 __pyx_mstate_global->__pyx_tuple__123
#define __pyx_tuple__124 __pyx_mstate_global->__pyx_tuple__124
#define __pyx_tuple__126 __pyx_mstate_global->__pyx_tuple__126
#define __pyx_tuple__127 __pyx_mstate_global->__pyx_tuple__127
#define __pyx_tuple__129 __pyx_mstate_global->__pyx_tuple__129
#define __pyx_tuple__131 __pyx_mstate_global->__pyx_tuple__131
#define __pyx_tuple__133 __pyx_mstate_global->__pyx_tuple__133
#define __pyx_tuple__140 __pyx_mstate_global->__pyx_tuple__140
#define __pyx_tuple__142 __pyx_mstate_global->__pyx_tuple__142
#define __pyx_tuple__144 __pyx_mstate_global->__pyx_tuple__144
#define __pyx_tuple__146 __pyx_mstate_global->__pyx_tuple__146
#define __pyx_tuple__148 __pyx_mstate_global->__pyx_tuple__148
#define __pyx_tuple__150 __pyx_mstate_global->__pyx_tuple__150
#define __pyx_tuple__153 __pyx_mstate_global->__pyx_tuple__153
#define __pyx_tuple__155 __pyx_mstate_global->__pyx_tuple__155
#define __pyx_tuple__157 __pyx_mstate_global->__pyx_tuple__157
#define __pyx_tuple__160 __pyx_mstate_global->__pyx_tuple__160
#define __pyx_tuple__162 __pyx_mstate_global->__pyx_tuple__162
#define __pyx_tuple__164 __pyx_mstate_global->__pyx_tuple__164
#define __pyx_tuple__166 __pyx_mstate_global->__pyx_tuple__166
#define __pyx_tuple__168 __pyx_mstate_global->__pyx_tuple__168
#define __pyx_tuple__170 __pyx_mstate_global->__pyx_tuple__170
#define __pyx_tuple__174 __pyx_mstate_global->__pyx_tuple__174
#define __pyx_tuple__177 __pyx_mstate_global->__pyx_tuple__177
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__38 __pyx_mstate_global->__pyx_codeobj__38
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__54 __pyx_mstate_global->__pyx_codeobj__54
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__63 __pyx_mstate_global->__pyx_codeobj__63
#define __pyx_codeobj__65 __pyx_mstate_global->__pyx_codeobj__65
#define __pyx_codeobj__67 __pyx_mstate_global->__pyx_codeobj__67
#define __pyx_codeobj__69 __pyx_mstate_global->__pyx_codeobj__69
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__73 __pyx_mstate_global->__pyx_codeobj__73
#define __pyx_codeobj__75 __pyx_mstate_global->__pyx_codeobj__75
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__80 __pyx_mstate_global->__pyx_codeobj__80
#define __pyx_codeobj__81 __pyx_mstate_global->__pyx_codeobj__81
#define __pyx_codeobj__82 __pyx_mstate_global->__pyx_codeobj__82
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__84 __pyx_mstate_global->__pyx_codeobj__84
#define __pyx_codeobj__85 __pyx_mstate_global->__pyx_codeobj__85
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__89 __pyx_mstate_global->__pyx_codeobj__89
#define __pyx_codeobj__91 __pyx_mstate_global->__pyx_codeobj__91
#define __pyx_codeobj__93 __pyx_mstate_global->__pyx_codeobj__93
#define __pyx_codeobj__95 __pyx_mstate_global->__pyx_codeobj__95
#define __pyx_codeobj__96 __pyx_mstate_global->__pyx_codeobj__96
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__100 __pyx_mstate_global->__pyx_codeobj__100
#define __pyx_codeobj__102 __pyx_mstate_global->__pyx_codeobj__102
#define __pyx_codeobj__104 __pyx_mstate_global->__pyx_codeobj__104
#define __pyx_codeobj__106 __pyx_mstate_global->__pyx_codeobj__106
#define __pyx_codeobj__108 __pyx_mstate_global->__pyx_codeobj__108
#define __pyx_codeobj__110 __pyx_mstate_global->__pyx_codeobj__110
#define __pyx_codeobj__111 __pyx_mstate_global->__pyx_codeobj__111
#define __pyx_codeobj__112 __pyx_mstate_global->__pyx_codeobj__112
#define __pyx_codeobj__113 __pyx_mstate_global->__pyx_codeobj__113
#define __pyx_codeobj__114 __pyx_mstate_global->__pyx_codeobj__114
#define __pyx_codeobj__115 __pyx_mstate_global->__pyx_codeobj__115
#define __pyx_codeobj__117 __pyx_mstate_global->__pyx_codeobj__117
#define __pyx_codeobj__118 __pyx_mstate_global->__pyx_codeobj__118
#define __pyx_codeobj__120 __pyx_mstate_global->__pyx_codeobj__120
#define __pyx_codeobj__122 __pyx_mstate_global->__pyx_codeobj__122
#define __pyx_codeobj__125 __pyx_mstate_global->__pyx_codeobj__125
#define __pyx_codeobj__128 __pyx_mstate_global->__pyx_codeobj__128
#define __pyx_codeobj__130 __pyx_mstate_global->__pyx_codeobj__130
#define __pyx_codeobj__132 __pyx_mstate_global->__pyx_codeobj__132
#define __pyx_codeobj__134 __pyx_mstate_global->__pyx_codeobj__134
#define __pyx_codeobj__135 __pyx_mstate_global->__pyx_codeobj__135
#define __pyx_codeobj__136 __pyx_mstate_global->__pyx_codeobj__136
#define __pyx_codeobj__137 __pyx_mstate_global->__pyx_codeobj__137
#define __pyx_codeobj__138 __pyx_mstate_global->__pyx_codeobj__138
#define __pyx_codeobj__139 __pyx_mstate_global->__pyx_codeobj__139
#define __pyx_codeobj__141 __pyx_mstate_global->__pyx_codeobj__141
#define __pyx_codeobj__143 __pyx_mstate_global->__pyx_codeobj__143
#define __pyx_codeobj__145 __pyx_mstate_global->__pyx_codeobj__145
#define __pyx_codeobj__147 __pyx_mstate_global->__pyx_codeobj__147
#define __pyx_codeobj__149 __pyx_mstate_global->__pyx_codeobj__149
#define __pyx_codeobj__151 __pyx_mstate_global->__pyx_codeobj__151
#define __pyx_codeobj__152 __pyx_mstate_global->__pyx_codeobj__152
#define __pyx_codeobj__154 __pyx_mstate_global->__pyx_codeobj__154
#define __pyx_codeobj__156 __pyx_mstate_global->__pyx_codeobj__156
#define __pyx_codeobj__158 __pyx_mstate_global->__pyx_codeobj__158
#define __pyx_codeobj__159 __pyx_mstate_global->__pyx_codeobj__159
#define __pyx_codeobj__161 __pyx_mstate_global->__pyx_codeobj__161
#define __pyx_codeobj__163 __pyx_mstate_global->__pyx_codeobj__163
#define __pyx_codeobj__165 __pyx_mstate_global->__pyx_codeobj__165
#define __pyx_codeobj__167 __pyx_mstate_global->__pyx_codeobj__167
#define __pyx_codeobj__169 __pyx_mstate_global->__pyx_codeobj__169
#define __pyx_codeobj__171 __pyx_mstate_global->__pyx_codeobj__171
#define __pyx_codeobj__172 __pyx_mstate_global->__pyx_codeobj__172
#define __pyx_codeobj__173 __pyx_mstate_global->__pyx_codeobj__173
#define __pyx_codeobj__175 __pyx_mstate_global->__pyx_codeobj__175
#define __pyx_codeobj__176 __pyx_mstate_global->__pyx_codeobj__176
#define __pyx_codeobj__178 __pyx_mstate_global->__pyx_codeobj__178
/* #### Code section: module_code ### */

/* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self) {
  double __pyx_r;

  /* "cpython/complex.pxd":20
 *         @property
 *         cdef inline double real(self):
 *             return self.cval.real             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = __pyx_v_self->cval.real;
  goto __pyx_L0;

  /* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self) {
  double __pyx_r;

  /* "cpython/complex.pxd":24
 *         @property
 *         cdef inline double imag(self):
 *             return self.cval.imag             # <<<<<<<<<<<<<<
 * 
 *     # PyTypeObject PyComplex_Type
 */
  __pyx_r = __pyx_v_self->cval.imag;
  goto __pyx_L0;

  /* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":117
 *     or None if no such value or default was found.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":118
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)             # <<<<<<<<<<<<<<
 *     if value is NULL:
 *         # context variable does not have a default
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, NULL, (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 118, __pyx_L1_error)

  /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
  __pyx_t_2 = (__pyx_v_value == NULL);
  if (__pyx_t_2) {

    /* "cpython/contextvars.pxd":121
 *     if value is NULL:
 *         # context variable does not have a default
 *         pyvalue = default_value             # <<<<<<<<<<<<<<
 *     else:
 *         # value or default value of context variable
 */
    __Pyx_INCREF(__pyx_v_default_value);
    __pyx_v_pyvalue = __pyx_v_default_value;

    /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
    goto __pyx_L3;
  }

  /* "cpython/contextvars.pxd":124
 *     else:
 *         # value or default value of context variable
 *         pyvalue = <object>value             # <<<<<<<<<<<<<<
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  /*else*/ {
    __pyx_t_3 = ((PyObject *)__pyx_v_value);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_pyvalue = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpython/contextvars.pxd":125
 *         # value or default value of context variable
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 * 
 */
    Py_XDECREF(__pyx_v_value);
  }
  __pyx_L3:;

  /* "cpython/contextvars.pxd":126
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpython.contextvars.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value_no_default(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value_no_default", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":135
 *     Ignores the default value of the context variable, if any.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":136
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)             # <<<<<<<<<<<<<<
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, ((PyObject *)__pyx_v_default_value), (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 136, __pyx_L1_error)

  /* "cpython/contextvars.pxd":138
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value             # <<<<<<<<<<<<<<
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_value);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_pyvalue = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cpython/contextvars.pxd":139
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 */
  Py_XDECREF(__pyx_v_value);

  /* "cpython/contextvars.pxd":140
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cpython.contextvars.get_value_no_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":53
 * 
 * 
 * @contextlib.contextmanager             # <<<<<<<<<<<<<<
 * def locked(model):
 *     """Context manager that hold a locked model and unlocks it when the context is exited."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_1locked(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_locked, "Context manager that hold a locked model and unlocks it when the context is exited.");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_1locked = {"locked", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_1locked, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_locked};
static PyObject *__pyx_pw_5dwave_12optimization_5model_1locked(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_model = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("locked (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_model,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_model)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "locked") < 0)) __PYX_ERR(0, 53, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_model = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("locked", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 53, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.locked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_locked(__pyx_self, __pyx_v_model);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_locked(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_model) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("locked", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct__locked(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 53, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_model = __pyx_v_model;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_model);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_model);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_2generator, __pyx_codeobj_, (PyObject *) __pyx_cur_scope, __pyx_n_s_locked, __pyx_n_s_locked, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.locked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("locked", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 53, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":56
 * def locked(model):
 *     """Context manager that hold a locked model and unlocks it when the context is exited."""
 *     try:             # <<<<<<<<<<<<<<
 *         yield
 *     finally:
 */
  /*try:*/ {

    /* "dwave/optimization/model.pyx":57
 *     """Context manager that hold a locked model and unlocks it when the context is exited."""
 *     try:
 *         yield             # <<<<<<<<<<<<<<
 *     finally:
 *         model.unlock()
 */
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 57, __pyx_L5_error)
  }

  /* "dwave/optimization/model.pyx":59
 *         yield
 *     finally:
 *         model.unlock()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_model, __pyx_n_s_unlock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L6;
    }
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_model, __pyx_n_s_unlock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = NULL;
        __pyx_t_13 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_13 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
      __pyx_L9_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "dwave/optimization/model.pyx":53
 * 
 * 
 * @contextlib.contextmanager             # <<<<<<<<<<<<<<
 * def locked(model):
 *     """Context manager that hold a locked model and unlocks it when the context is exited."""
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("locked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":82
 *         >>> model = flow_shop_scheduling(processing_times=processing_times)
 *     """
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.states = States(self)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5dwave_12optimization_5model_5Model_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5dwave_12optimization_5model_5Model_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model___init__(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5dwave_12optimization_5model_5Model___init__(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "dwave/optimization/model.pyx":83
 *     """
 *     def __init__(self):
 *         self.states = States(self)             # <<<<<<<<<<<<<<
 * 
 *         self._data_sources = []
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5dwave_12optimization_5model_States), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->states);
  __Pyx_DECREF((PyObject *)__pyx_v_self->states);
  __pyx_v_self->states = ((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":85
 *         self.states = States(self)
 * 
 *         self._data_sources = []             # <<<<<<<<<<<<<<
 * 
 *     def add_constraint(self, ArraySymbol value):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_data_sources);
  __Pyx_DECREF(__pyx_v_self->_data_sources);
  __pyx_v_self->_data_sources = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":82
 *         >>> model = flow_shop_scheduling(processing_times=processing_times)
 *     """
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.states = States(self)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.Model.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":87
 *         self._data_sources = []
 * 
 *     def add_constraint(self, ArraySymbol value):             # <<<<<<<<<<<<<<
 *         """Add a constraint to the model.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_3add_constraint(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_2add_constraint, "Add a constraint to the model.\n        \n        Args:\n            value: Value that must evaluate to True for the state \n                of the model to be feasible. \n                \n        Examples:\n            This example adds a single constraint to a model.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer()\n            >>> c = model.constant(5)\n            >>> model.add_constraint(i <= c)\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_3add_constraint = {"add_constraint", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_3add_constraint, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_2add_constraint};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_3add_constraint(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_constraint (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add_constraint") < 0)) __PYX_ERR(0, 87, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_value = ((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_constraint", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 87, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model.add_constraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_5dwave_12optimization_5model_ArraySymbol, 1, "value", 0))) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_2add_constraint(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_2add_constraint(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_constraint", 1);

  /* "dwave/optimization/model.pyx":103
 *             >>> model.add_constraint(i <= c)
 *         """
 *         if value is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("value cannot be None")
 *         # TODO: shall we accept array valued constraints?
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_value) == Py_None);
  if (unlikely(__pyx_t_1)) {

    /* "dwave/optimization/model.pyx":104
 *         """
 *         if value is None:
 *             raise ValueError("value cannot be None")             # <<<<<<<<<<<<<<
 *         # TODO: shall we accept array valued constraints?
 *         self._graph.add_constraint(value.array_ptr)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 104, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":103
 *             >>> model.add_constraint(i <= c)
 *         """
 *         if value is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("value cannot be None")
 *         # TODO: shall we accept array valued constraints?
 */
  }

  /* "dwave/optimization/model.pyx":106
 *             raise ValueError("value cannot be None")
 *         # TODO: shall we accept array valued constraints?
 *         self._graph.add_constraint(value.array_ptr)             # <<<<<<<<<<<<<<
 * 
 *     def binary(self, shape=None):
 */
  try {
    __pyx_v_self->_graph.add_constraint(__pyx_v_value->array_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 106, __pyx_L1_error)
  }

  /* "dwave/optimization/model.pyx":87
 *         self._data_sources = []
 * 
 *     def add_constraint(self, ArraySymbol value):             # <<<<<<<<<<<<<<
 *         """Add a constraint to the model.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dwave.optimization.model.Model.add_constraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":108
 *         self._graph.add_constraint(value.array_ptr)
 * 
 *     def binary(self, shape=None):             # <<<<<<<<<<<<<<
 *         r"""Create a binary symbol as a decision variable.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_5binary(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_4binary, "Create a binary symbol as a decision variable.\n        \n        Args:\n            shape: Shape of the binary array to create.\n            \n        Returns:\n            A binary symbol.\n            \n        Examples:\n            This example creates a :math:`1 \\times 20`-sized binary symbol.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> x = model.binary((1,20))\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_5binary = {"binary", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_5binary, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_4binary};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_5binary(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_shape = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("binary (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_shape);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 108, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "binary") < 0)) __PYX_ERR(0, 108, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("binary", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 108, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model.binary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_4binary(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v_shape);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_4binary(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_shape) {
  PyObject *__pyx_v_BinaryVariable = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("binary", 1);

  /* "dwave/optimization/model.pyx":124
 *             >>> x = model.binary((1,20))
 *         """
 *         from dwave.optimization.symbols import BinaryVariable #avoid circular import             # <<<<<<<<<<<<<<
 *         return BinaryVariable(self, shape)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_BinaryVariable);
  __Pyx_GIVEREF(__pyx_n_s_BinaryVariable);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_BinaryVariable)) __PYX_ERR(0, 124, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BinaryVariable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_BinaryVariable = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":125
 *         """
 *         from dwave.optimization.symbols import BinaryVariable #avoid circular import
 *         return BinaryVariable(self, shape)             # <<<<<<<<<<<<<<
 * 
 *     def constant(self, array_like):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_BinaryVariable);
  __pyx_t_1 = __pyx_v_BinaryVariable; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_shape};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":108
 *         self._graph.add_constraint(value.array_ptr)
 * 
 *     def binary(self, shape=None):             # <<<<<<<<<<<<<<
 *         r"""Create a binary symbol as a decision variable.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.Model.binary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_BinaryVariable);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":127
 *         return BinaryVariable(self, shape)
 * 
 *     def constant(self, array_like):             # <<<<<<<<<<<<<<
 *         r"""Create a constant symbol.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_7constant(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_6constant, "Create a constant symbol.\n\n        Args:\n            array_like: An |array-like|_ representing a constant. Can be a scalar\n                or a NumPy array. If the array's ``dtype`` is ``np.double``, the \n                array is not copied.\n                \n        Returns:\n            A constant symbol. \n            \n        Examples:\n            This example creates a :math:`1 \\times 4`-sized constant symbol\n            with the specified values. \n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> time_limits = model.constant([10, 15, 5, 8.5])\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_7constant = {"constant", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_7constant, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_6constant};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_7constant(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_array_like = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("constant (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_array_like,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_array_like)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 127, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "constant") < 0)) __PYX_ERR(0, 127, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_array_like = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("constant", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 127, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model.constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_6constant(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v_array_like);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_6constant(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_array_like) {
  PyObject *__pyx_v_Constant = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("constant", 1);

  /* "dwave/optimization/model.pyx":146
 *             >>> time_limits = model.constant([10, 15, 5, 8.5])
 *         """
 *         from dwave.optimization.symbols import Constant  # avoid circular import             # <<<<<<<<<<<<<<
 *         return Constant(self, array_like)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Constant);
  __Pyx_GIVEREF(__pyx_n_s_Constant);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Constant)) __PYX_ERR(0, 146, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Constant); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Constant = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":147
 *         """
 *         from dwave.optimization.symbols import Constant  # avoid circular import
 *         return Constant(self, array_like)             # <<<<<<<<<<<<<<
 * 
 *     def decision_state_size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Constant);
  __pyx_t_1 = __pyx_v_Constant; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_array_like};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":127
 *         return BinaryVariable(self, shape)
 * 
 *     def constant(self, array_like):             # <<<<<<<<<<<<<<
 *         r"""Create a constant symbol.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.Model.constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Constant);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":149
 *         return Constant(self, array_like)
 * 
 *     def decision_state_size(self):             # <<<<<<<<<<<<<<
 *         r"""An estimated size, in bytes, of the model's decision states.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_9decision_state_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_8decision_state_size, "An estimated size, in bytes, of the model's decision states.\n        \n        Examples:\n            This example checks the size of a model with one \n            :math:`10 \\times 10`-sized integer symbol.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> visit_site = model.integer((10, 10))     \n            >>> model.decision_state_size()         \n            800\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_9decision_state_size = {"decision_state_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_9decision_state_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_8decision_state_size};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_9decision_state_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decision_state_size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("decision_state_size", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "decision_state_size", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_8decision_state_size(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_19decision_state_size_2generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":162
 *             800
 *         """
 *         return sum(sym.state_size() for sym in self.iter_decisions())             # <<<<<<<<<<<<<<
 * 
 *     def disjoint_bit_sets(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_sets):
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_19decision_state_size_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 162, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_5Model_19decision_state_size_2generator6, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_decision_state_size_locals_genex, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Model.decision_state_size.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_19decision_state_size_2generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 162, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 162, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 162, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 162, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 162, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 162, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 162, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_sym);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_sym, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_sym, __pyx_n_s_state_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 162, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":149
 *         return Constant(self, array_like)
 * 
 *     def decision_state_size(self):             # <<<<<<<<<<<<<<
 *         r"""An estimated size, in bytes, of the model's decision states.
 * 
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_8decision_state_size(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_19decision_state_size_2generator6 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("decision_state_size", 1);

  /* "dwave/optimization/model.pyx":162
 *             800
 *         """
 *         return sum(sym.state_size() for sym in self.iter_decisions())             # <<<<<<<<<<<<<<
 * 
 *     def disjoint_bit_sets(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_sets):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_decisions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __pyx_pf_5dwave_12optimization_5model_5Model_19decision_state_size_genexpr(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":149
 *         return Constant(self, array_like)
 * 
 *     def decision_state_size(self):             # <<<<<<<<<<<<<<
 *         r"""An estimated size, in bytes, of the model's decision states.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.Model.decision_state_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_5dwave_12optimization_5model_5Model_19decision_state_size_2generator6);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":164
 *         return sum(sym.state_size() for sym in self.iter_decisions())
 * 
 *     def disjoint_bit_sets(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_sets):             # <<<<<<<<<<<<<<
 *         """Create a disjoint-sets symbol as a decision variable.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_11disjoint_bit_sets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_10disjoint_bit_sets, "Create a disjoint-sets symbol as a decision variable. \n        \n        Divides a set of the elements of ``range(primary_set_size)`` into \n        ``num_disjoint_sets`` ordered partitions, stored as bit sets (arrays \n        of length ``primary_set_size``, with ones at the indices of elements\n        currently in the set, and zeros elsewhere). The ordering of a set is \n        not semantically meaningful.\n\n        Also creates from the symbol ``num_disjoint_sets`` extra successors \n        that output the disjoint sets as arrays.\n\n        Args:\n            primary_set_size: Number of elements in the primary set that are\n                partitioned into disjoint sets. Must be non-negative.\n            num_disjoint_sets: Number of disjoint sets. Must be positive.\n\n        Returns:\n            A tuple where the first element is the disjoint-sets symbol and \n            the second is a set of its newly added successors.\n            \n        Examples:\n            This example creates a symbol of 10 elements that is divided \n            into 4 sets. \n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> parts_set, parts_subsets = model.disjoint_bit_sets(10, 4)\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_11disjoint_bit_sets = {"disjoint_bit_sets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_11disjoint_bit_sets, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_10disjoint_bit_sets};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_11disjoint_bit_sets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  Py_ssize_t __pyx_v_primary_set_size;
  Py_ssize_t __pyx_v_num_disjoint_sets;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disjoint_bit_sets (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_primary_set_size,&__pyx_n_s_num_disjoint_sets,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_primary_set_size)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_num_disjoint_sets)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("disjoint_bit_sets", 1, 2, 2, 1); __PYX_ERR(0, 164, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "disjoint_bit_sets") < 0)) __PYX_ERR(0, 164, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_primary_set_size = __Pyx_PyIndex_AsSsize_t(values[0]); if (unlikely((__pyx_v_primary_set_size == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L3_error)
    __pyx_v_num_disjoint_sets = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_num_disjoint_sets == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("disjoint_bit_sets", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 164, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model.disjoint_bit_sets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_10disjoint_bit_sets(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v_primary_set_size, __pyx_v_num_disjoint_sets);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_17disjoint_bit_sets_2generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":196
 *         from dwave.optimization.symbols import DisjointBitSets, DisjointBitSet  # avoid circular import
 *         main = DisjointBitSets(self, primary_set_size, num_disjoint_sets)
 *         sets = tuple(DisjointBitSet(main, i) for i in range(num_disjoint_sets))             # <<<<<<<<<<<<<<
 *         return main, sets
 * 
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_17disjoint_bit_sets_genexpr(PyObject *__pyx_self, Py_ssize_t __pyx_genexpr_arg_0) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 196, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_5Model_17disjoint_bit_sets_2generator7, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_disjoint_bit_sets_locals_genexpr, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Model.disjoint_bit_sets.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_17disjoint_bit_sets_2generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 196, __pyx_L1_error)
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_DisjointBitSet)) { __Pyx_RaiseClosureNameError("DisjointBitSet"); __PYX_ERR(0, 196, __pyx_L1_error) }
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_main)) { __Pyx_RaiseClosureNameError("main"); __PYX_ERR(0, 196, __pyx_L1_error) }
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_DisjointBitSet);
    __pyx_t_6 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_DisjointBitSet; __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_main, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 196, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":164
 *         return sum(sym.state_size() for sym in self.iter_decisions())
 * 
 *     def disjoint_bit_sets(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_sets):             # <<<<<<<<<<<<<<
 *         """Create a disjoint-sets symbol as a decision variable.
 * 
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_10disjoint_bit_sets(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, Py_ssize_t __pyx_v_primary_set_size, Py_ssize_t __pyx_v_num_disjoint_sets) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets *__pyx_cur_scope;
  PyObject *__pyx_v_DisjointBitSets = NULL;
  PyObject *__pyx_v_sets = NULL;
  PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_17disjoint_bit_sets_2generator7 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("disjoint_bit_sets", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 164, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }

  /* "dwave/optimization/model.pyx":194
 *         """
 * 
 *         from dwave.optimization.symbols import DisjointBitSets, DisjointBitSet  # avoid circular import             # <<<<<<<<<<<<<<
 *         main = DisjointBitSets(self, primary_set_size, num_disjoint_sets)
 *         sets = tuple(DisjointBitSet(main, i) for i in range(num_disjoint_sets))
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_DisjointBitSets);
  __Pyx_GIVEREF(__pyx_n_s_DisjointBitSets);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_DisjointBitSets)) __PYX_ERR(0, 194, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_DisjointBitSet);
  __Pyx_GIVEREF(__pyx_n_s_DisjointBitSet);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_DisjointBitSet)) __PYX_ERR(0, 194, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_DisjointBitSets); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_DisjointBitSets = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_DisjointBitSet); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_DisjointBitSet = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":195
 * 
 *         from dwave.optimization.symbols import DisjointBitSets, DisjointBitSet  # avoid circular import
 *         main = DisjointBitSets(self, primary_set_size, num_disjoint_sets)             # <<<<<<<<<<<<<<
 *         sets = tuple(DisjointBitSet(main, i) for i in range(num_disjoint_sets))
 *         return main, sets
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_primary_set_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_num_disjoint_sets); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_DisjointBitSets);
  __pyx_t_4 = __pyx_v_DisjointBitSets; __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_t_1, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 3+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_main = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":196
 *         from dwave.optimization.symbols import DisjointBitSets, DisjointBitSet  # avoid circular import
 *         main = DisjointBitSets(self, primary_set_size, num_disjoint_sets)
 *         sets = tuple(DisjointBitSet(main, i) for i in range(num_disjoint_sets))             # <<<<<<<<<<<<<<
 *         return main, sets
 * 
 */
  __pyx_t_2 = __pyx_pf_5dwave_12optimization_5model_5Model_17disjoint_bit_sets_genexpr(((PyObject*)__pyx_cur_scope), __pyx_v_num_disjoint_sets); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_sets = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":197
 *         main = DisjointBitSets(self, primary_set_size, num_disjoint_sets)
 *         sets = tuple(DisjointBitSet(main, i) for i in range(num_disjoint_sets))
 *         return main, sets             # <<<<<<<<<<<<<<
 * 
 *     def disjoint_lists(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_lists):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_main);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_main);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_main)) __PYX_ERR(0, 197, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_sets);
  __Pyx_GIVEREF(__pyx_v_sets);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_sets)) __PYX_ERR(0, 197, __pyx_L1_error);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":164
 *         return sum(sym.state_size() for sym in self.iter_decisions())
 * 
 *     def disjoint_bit_sets(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_sets):             # <<<<<<<<<<<<<<
 *         """Create a disjoint-sets symbol as a decision variable.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("dwave.optimization.model.Model.disjoint_bit_sets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_DisjointBitSets);
  __Pyx_XDECREF(__pyx_v_sets);
  __Pyx_XDECREF(__pyx_gb_5dwave_12optimization_5model_5Model_17disjoint_bit_sets_2generator7);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":199
 *         return main, sets
 * 
 *     def disjoint_lists(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_lists):             # <<<<<<<<<<<<<<
 *         """Create a disjoint-lists symbol as a decision variable.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_13disjoint_lists(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_12disjoint_lists, "Create a disjoint-lists symbol as a decision variable. \n        \n        Divides a set of the elements of ``range(primary_set_size)`` into \n        ``num_disjoint_lists`` ordered partitions.\n\n        Also creates ``num_disjoint_lists`` extra successors from the\n        symbol that output the disjoint lists as arrays.\n\n        Args:\n            primary_set_size: Number of elements in the primary set to \n                be partitioned into disjoint lists.\n            num_disjoint_lists: Number of disjoint lists.\n\n        Returns:\n            A tuple where the first element is the disjoint-lists symbol \n            and the second is a list of its newly added successor nodes.\n            \n        Examples:\n            This example creates a symbol of 10 elements that is divided \n            into 4 lists. \n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> destinations, routes = model.disjoint_lists(10, 4)\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_13disjoint_lists = {"disjoint_lists", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_13disjoint_lists, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_12disjoint_lists};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_13disjoint_lists(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  Py_ssize_t __pyx_v_primary_set_size;
  Py_ssize_t __pyx_v_num_disjoint_lists;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disjoint_lists (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_primary_set_size,&__pyx_n_s_num_disjoint_lists,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_primary_set_size)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_num_disjoint_lists)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("disjoint_lists", 1, 2, 2, 1); __PYX_ERR(0, 199, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "disjoint_lists") < 0)) __PYX_ERR(0, 199, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_primary_set_size = __Pyx_PyIndex_AsSsize_t(values[0]); if (unlikely((__pyx_v_primary_set_size == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L3_error)
    __pyx_v_num_disjoint_lists = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_num_disjoint_lists == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("disjoint_lists", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 199, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model.disjoint_lists", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_12disjoint_lists(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v_primary_set_size, __pyx_v_num_disjoint_lists);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_12disjoint_lists(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, Py_ssize_t __pyx_v_primary_set_size, Py_ssize_t __pyx_v_num_disjoint_lists) {
  PyObject *__pyx_v_DisjointLists = NULL;
  PyObject *__pyx_v_DisjointList = NULL;
  PyObject *__pyx_v_main = NULL;
  PyObject *__pyx_v_lists = NULL;
  Py_ssize_t __pyx_8genexpr2__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("disjoint_lists", 1);

  /* "dwave/optimization/model.pyx":225
 *             >>> destinations, routes = model.disjoint_lists(10, 4)
 *         """
 *         from dwave.optimization.symbols import DisjointLists, DisjointList  # avoid circular import             # <<<<<<<<<<<<<<
 *         main = DisjointLists(self, primary_set_size, num_disjoint_lists)
 *         lists = [DisjointList(main, i) for i in range(num_disjoint_lists)]
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_DisjointLists);
  __Pyx_GIVEREF(__pyx_n_s_DisjointLists);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_DisjointLists)) __PYX_ERR(0, 225, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_DisjointList);
  __Pyx_GIVEREF(__pyx_n_s_DisjointList);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_DisjointList)) __PYX_ERR(0, 225, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_DisjointLists); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_DisjointLists = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_DisjointList); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_DisjointList = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":226
 *         """
 *         from dwave.optimization.symbols import DisjointLists, DisjointList  # avoid circular import
 *         main = DisjointLists(self, primary_set_size, num_disjoint_lists)             # <<<<<<<<<<<<<<
 *         lists = [DisjointList(main, i) for i in range(num_disjoint_lists)]
 *         return main, lists
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_primary_set_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_num_disjoint_lists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_DisjointLists);
  __pyx_t_4 = __pyx_v_DisjointLists; __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_t_1, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 3+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_main = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":227
 *         from dwave.optimization.symbols import DisjointLists, DisjointList  # avoid circular import
 *         main = DisjointLists(self, primary_set_size, num_disjoint_lists)
 *         lists = [DisjointList(main, i) for i in range(num_disjoint_lists)]             # <<<<<<<<<<<<<<
 *         return main, lists
 * 
 */
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __pyx_v_num_disjoint_lists;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_8genexpr2__pyx_v_i = __pyx_t_9;
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_8genexpr2__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_DisjointList);
      __pyx_t_1 = __pyx_v_DisjointList; __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_v_main, __pyx_t_3};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 227, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  } /* exit inner scope */
  __pyx_v_lists = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":228
 *         main = DisjointLists(self, primary_set_size, num_disjoint_lists)
 *         lists = [DisjointList(main, i) for i in range(num_disjoint_lists)]
 *         return main, lists             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_main);
  __Pyx_GIVEREF(__pyx_v_main);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_main)) __PYX_ERR(0, 228, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_lists);
  __Pyx_GIVEREF(__pyx_v_lists);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_lists)) __PYX_ERR(0, 228, __pyx_L1_error);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":199
 *         return main, sets
 * 
 *     def disjoint_lists(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_lists):             # <<<<<<<<<<<<<<
 *         """Create a disjoint-lists symbol as a decision variable.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("dwave.optimization.model.Model.disjoint_lists", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_DisjointLists);
  __Pyx_XDECREF(__pyx_v_DisjointList);
  __Pyx_XDECREF(__pyx_v_main);
  __Pyx_XDECREF(__pyx_v_lists);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":230
 *         return main, lists
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_file(cls, file, *,
 *                   check_header = True,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_15from_file(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_14from_file, "Construct a model from the given file.\n\n        Args:\n            file:\n                File pointer to a readable, seekable file-like object encoding\n                a model. Strings are interpreted as a file name.\n\n        Returns:\n            A model.\n\n        See also:\n            :meth:`.into_file`, :meth:`.to_file`\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_15from_file = {"from_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_15from_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_14from_file};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_15from_file(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_file = 0;
  PyObject *__pyx_v_check_header = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,&__pyx_n_s_check_header,0};

    /* "dwave/optimization/model.pyx":232
 *     @classmethod
 *     def from_file(cls, file, *,
 *                   check_header = True,             # <<<<<<<<<<<<<<
 *                   ):
 *         """Construct a model from the given file.
 */
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_file)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 230, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 1;
        PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 230, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "from_file") < 0)) __PYX_ERR(0, 230, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_file = values[0];
    __pyx_v_check_header = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_file", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 230, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_14from_file(((PyTypeObject*)__pyx_v_cls), __pyx_v_file, __pyx_v_check_header);

  /* "dwave/optimization/model.pyx":230
 *         return main, lists
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_file(cls, file, *,
 *                   check_header = True,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_14from_file(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_file, PyObject *__pyx_v_check_header) {
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_prefix = NULL;
  PyObject *__pyx_v_read_prefix = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_version = NULL;
  PyObject *__pyx_v_header_len = NULL;
  PyObject *__pyx_v_header_data = NULL;
  struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_model = 0;
  PyObject *__pyx_v_zf = NULL;
  PyObject *__pyx_v_model_info = NULL;
  PyObject *__pyx_v_num_nodes = NULL;
  PyObject *__pyx_v_fcls = NULL;
  PyObject *__pyx_v_fadj = NULL;
  PyObject *__pyx_v_lineno = NULL;
  PyObject *__pyx_v_classname = NULL;
  PyObject *__pyx_v_adjlist = NULL;
  PyObject *__pyx_v_node_id = NULL;
  PyObject *__pyx_v_predecessor_ids = NULL;
  PyObject *__pyx_v_predecessors = NULL;
  PyObject *__pyx_v_pid = NULL;
  PyObject *__pyx_v_directory = NULL;
  PyObject *__pyx_v_objective_buff = NULL;
  PyObject *__pyx_v_objective_id = NULL;
  PyObject *__pyx_v_cid = NULL;
  PyObject *__pyx_v_num_states = NULL;
  Py_ssize_t __pyx_v_num_decisions;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_expected = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_UCS4 __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *(*__pyx_t_25)(PyObject *);
  PyObject *(*__pyx_t_26)(PyObject *);
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  int __pyx_t_29;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  PyObject *(*__pyx_t_33)(PyObject *);
  Py_ssize_t __pyx_t_34;
  PyObject *__pyx_t_35 = NULL;
  PyObject *__pyx_t_36 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_file", 1);

  /* "dwave/optimization/model.pyx":247
 *             :meth:`.into_file`, :meth:`.to_file`
 *         """
 *         if isinstance(file, str):             # <<<<<<<<<<<<<<
 *             with open(file, "rb") as f:
 *                 return cls.from_file(f)
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_file); 
  if (__pyx_t_1) {

    /* "dwave/optimization/model.pyx":248
 *         """
 *         if isinstance(file, str):
 *             with open(file, "rb") as f:             # <<<<<<<<<<<<<<
 *                 return cls.from_file(f)
 * 
 */
    /*with:*/ {
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_file);
      __Pyx_GIVEREF(__pyx_v_file);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_file)) __PYX_ERR(0, 248, __pyx_L1_error);
      __Pyx_INCREF(__pyx_n_u_rb);
      __Pyx_GIVEREF(__pyx_n_u_rb);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_u_rb)) __PYX_ERR(0, 248, __pyx_L1_error);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 248, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_5 = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_10);
          /*try:*/ {
            __pyx_v_f = __pyx_t_5;
            __pyx_t_5 = 0;

            /* "dwave/optimization/model.pyx":249
 *         if isinstance(file, str):
 *             with open(file, "rb") as f:
 *                 return cls.from_file(f)             # <<<<<<<<<<<<<<
 * 
 *         prefix = b"DWNL"
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_from_file); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = NULL;
            __pyx_t_7 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
                __pyx_t_7 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_f};
              __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
            __pyx_r = __pyx_t_5;
            __pyx_t_5 = 0;
            goto __pyx_L12_try_return;

            /* "dwave/optimization/model.pyx":248
 *         """
 *         if isinstance(file, str):
 *             with open(file, "rb") as f:             # <<<<<<<<<<<<<<
 *                 return cls.from_file(f)
 * 
 */
          }
          __pyx_L8_error:;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("dwave.optimization.model.Model.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_3, &__pyx_t_2) < 0) __PYX_ERR(0, 248, __pyx_L10_except_error)
            __Pyx_XGOTREF(__pyx_t_5);
            __Pyx_XGOTREF(__pyx_t_3);
            __Pyx_XGOTREF(__pyx_t_2);
            __pyx_t_6 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 248, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 248, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (__pyx_t_1 < 0) __PYX_ERR(0, 248, __pyx_L10_except_error)
            __pyx_t_12 = (!__pyx_t_1);
            if (unlikely(__pyx_t_12)) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_3);
              __Pyx_XGIVEREF(__pyx_t_2);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_3, __pyx_t_2);
              __pyx_t_5 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0; 
              __PYX_ERR(0, 248, __pyx_L10_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            goto __pyx_L9_exception_handled;
          }
          __pyx_L10_except_error:;
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          goto __pyx_L1_error;
          __pyx_L12_try_return:;
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          goto __pyx_L5_return;
          __pyx_L9_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_4) {
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__4, NULL);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 248, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          goto __pyx_L7;
        }
        __pyx_L5_return: {
          __pyx_t_10 = __pyx_r;
          __pyx_r = 0;
          if (__pyx_t_4) {
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__4, NULL);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 248, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __pyx_r = __pyx_t_10;
          __pyx_t_10 = 0;
          goto __pyx_L0;
        }
        __pyx_L7:;
      }
      goto __pyx_L17;
      __pyx_L4_error:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L1_error;
      __pyx_L17:;
    }

    /* "dwave/optimization/model.pyx":247
 *             :meth:`.into_file`, :meth:`.to_file`
 *         """
 *         if isinstance(file, str):             # <<<<<<<<<<<<<<
 *             with open(file, "rb") as f:
 *                 return cls.from_file(f)
 */
  }

  /* "dwave/optimization/model.pyx":251
 *                 return cls.from_file(f)
 * 
 *         prefix = b"DWNL"             # <<<<<<<<<<<<<<
 * 
 *         read_prefix = file.read(len(prefix))
 */
  __Pyx_INCREF(__pyx_n_b_DWNL);
  __pyx_v_prefix = __pyx_n_b_DWNL;

  /* "dwave/optimization/model.pyx":253
 *         prefix = b"DWNL"
 * 
 *         read_prefix = file.read(len(prefix))             # <<<<<<<<<<<<<<
 *         if read_prefix != prefix:
 *             raise ValueError("unknown file type, expected magic string "
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_13 = __Pyx_PyBytes_GET_SIZE(__pyx_v_prefix); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 253, __pyx_L1_error)
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_read_prefix = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":254
 * 
 *         read_prefix = file.read(len(prefix))
 *         if read_prefix != prefix:             # <<<<<<<<<<<<<<
 *             raise ValueError("unknown file type, expected magic string "
 *                              f"{prefix!r} but got {read_prefix!r} "
 */
  __pyx_t_12 = (__Pyx_PyBytes_Equals(__pyx_v_read_prefix, __pyx_v_prefix, Py_NE)); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 254, __pyx_L1_error)
  if (unlikely(__pyx_t_12)) {

    /* "dwave/optimization/model.pyx":255
 *         read_prefix = file.read(len(prefix))
 *         if read_prefix != prefix:
 *             raise ValueError("unknown file type, expected magic string "             # <<<<<<<<<<<<<<
 *                              f"{prefix!r} but got {read_prefix!r} "
 *                              "instead")
 */
    __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = 0;
    __pyx_t_14 = 127;
    __Pyx_INCREF(__pyx_kp_u_unknown_file_type_expected_magic);
    __pyx_t_13 += 41;
    __Pyx_GIVEREF(__pyx_kp_u_unknown_file_type_expected_magic);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_unknown_file_type_expected_magic);

    /* "dwave/optimization/model.pyx":256
 *         if read_prefix != prefix:
 *             raise ValueError("unknown file type, expected magic string "
 *                              f"{prefix!r} but got {read_prefix!r} "             # <<<<<<<<<<<<<<
 *                              "instead")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_prefix), __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_14;
    __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_13 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_but_got);
    __pyx_t_3 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_read_prefix), __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_14;
    __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u_instead);
    __pyx_t_13 += 8;
    __Pyx_GIVEREF(__pyx_kp_u_instead);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_instead);

    /* "dwave/optimization/model.pyx":255
 *         read_prefix = file.read(len(prefix))
 *         if read_prefix != prefix:
 *             raise ValueError("unknown file type, expected magic string "             # <<<<<<<<<<<<<<
 *                              f"{prefix!r} but got {read_prefix!r} "
 *                              "instead")
 */
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_2, 5, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 255, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":254
 * 
 *         read_prefix = file.read(len(prefix))
 *         if read_prefix != prefix:             # <<<<<<<<<<<<<<
 *             raise ValueError("unknown file type, expected magic string "
 *                              f"{prefix!r} but got {read_prefix!r} "
 */
  }

  /* "dwave/optimization/model.pyx":259
 *                              "instead")
 * 
 *         version = tuple(file.read(2))             # <<<<<<<<<<<<<<
 * 
 *         if check_header:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_int_2};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_version = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "dwave/optimization/model.pyx":261
 *         version = tuple(file.read(2))
 * 
 *         if check_header:             # <<<<<<<<<<<<<<
 *             # we'll need the header values to check later
 *             header_len = struct.unpack('<I', file.read(4))[0]
 */
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_check_header); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 261, __pyx_L1_error)
  if (__pyx_t_12) {

    /* "dwave/optimization/model.pyx":263
 *         if check_header:
 *             # we'll need the header values to check later
 *             header_len = struct.unpack('<I', file.read(4))[0]             # <<<<<<<<<<<<<<
 *             header_data = json.loads(file.read(header_len).decode('ascii'))
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_struct); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_read); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_15 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_int_4};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_kp_u_I, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_header_len = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "dwave/optimization/model.pyx":264
 *             # we'll need the header values to check later
 *             header_len = struct.unpack('<I', file.read(4))[0]
 *             header_data = json.loads(file.read(header_len).decode('ascii'))             # <<<<<<<<<<<<<<
 * 
 *         cdef Model model = cls()
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_json); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_loads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_read); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_16 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_v_header_len};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 264, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_decode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_n_u_ascii};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    __pyx_t_15 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_t_3};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 264, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_v_header_data = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "dwave/optimization/model.pyx":261
 *         version = tuple(file.read(2))
 * 
 *         if check_header:             # <<<<<<<<<<<<<<
 *             # we'll need the header values to check later
 *             header_len = struct.unpack('<I', file.read(4))[0]
 */
  }

  /* "dwave/optimization/model.pyx":266
 *             header_data = json.loads(file.read(header_len).decode('ascii'))
 * 
 *         cdef Model model = cls()             # <<<<<<<<<<<<<<
 * 
 *         with zipfile.ZipFile(file, mode="r") as zf:
 */
  __pyx_t_5 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_v_cls)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5dwave_12optimization_5model_Model))))) __PYX_ERR(0, 266, __pyx_L1_error)
  __pyx_v_model = ((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "dwave/optimization/model.pyx":268
 *         cdef Model model = cls()
 * 
 *         with zipfile.ZipFile(file, mode="r") as zf:             # <<<<<<<<<<<<<<
 *             model_info = json.loads(zf.read("info.json"))
 * 
 */
  /*with:*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_zipfile); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ZipFile); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_file);
    __Pyx_GIVEREF(__pyx_v_file);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_file)) __PYX_ERR(0, 268, __pyx_L1_error);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_mode, __pyx_n_u_r) < 0) __PYX_ERR(0, 268, __pyx_L1_error)
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_15, __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_15, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L20_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {
          __pyx_v_zf = __pyx_t_5;
          __pyx_t_5 = 0;

          /* "dwave/optimization/model.pyx":269
 * 
 *         with zipfile.ZipFile(file, mode="r") as zf:
 *             model_info = json.loads(zf.read("info.json"))             # <<<<<<<<<<<<<<
 * 
 *             num_nodes = model_info.get("num_nodes")
 */
          __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_json); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 269, __pyx_L24_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_loads); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 269, __pyx_L24_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_read); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 269, __pyx_L24_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_6 = NULL;
          __pyx_t_7 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_7 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u_info_json};
            __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 269, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          __pyx_t_2 = NULL;
          __pyx_t_7 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_7 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_15};
            __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 269, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_v_model_info = __pyx_t_5;
          __pyx_t_5 = 0;

          /* "dwave/optimization/model.pyx":271
 *             model_info = json.loads(zf.read("info.json"))
 * 
 *             num_nodes = model_info.get("num_nodes")             # <<<<<<<<<<<<<<
 *             if not isinstance(num_nodes, int) or num_nodes < 0:
 *                 raise ValueError("expected num_nodes to be a positive integer")
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_model_info, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 271, __pyx_L24_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_15 = NULL;
          __pyx_t_7 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_15)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_15);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_7 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_n_u_num_nodes};
            __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 271, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_v_num_nodes = __pyx_t_5;
          __pyx_t_5 = 0;

          /* "dwave/optimization/model.pyx":272
 * 
 *             num_nodes = model_info.get("num_nodes")
 *             if not isinstance(num_nodes, int) or num_nodes < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("expected num_nodes to be a positive integer")
 * 
 */
          __pyx_t_1 = PyInt_Check(__pyx_v_num_nodes); 
          __pyx_t_17 = (!__pyx_t_1);
          if (!__pyx_t_17) {
          } else {
            __pyx_t_12 = __pyx_t_17;
            goto __pyx_L31_bool_binop_done;
          }
          __pyx_t_5 = PyObject_RichCompare(__pyx_v_num_nodes, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 272, __pyx_L24_error)
          __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_17 < 0))) __PYX_ERR(0, 272, __pyx_L24_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_12 = __pyx_t_17;
          __pyx_L31_bool_binop_done:;
          if (unlikely(__pyx_t_12)) {

            /* "dwave/optimization/model.pyx":273
 *             num_nodes = model_info.get("num_nodes")
 *             if not isinstance(num_nodes, int) or num_nodes < 0:
 *                 raise ValueError("expected num_nodes to be a positive integer")             # <<<<<<<<<<<<<<
 * 
 *             with zf.open("nodetypes.txt", "r") as fcls, zf.open("adj.adjlist", "r") as fadj:
 */
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_Raise(__pyx_t_5, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __PYX_ERR(0, 273, __pyx_L24_error)

            /* "dwave/optimization/model.pyx":272
 * 
 *             num_nodes = model_info.get("num_nodes")
 *             if not isinstance(num_nodes, int) or num_nodes < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("expected num_nodes to be a positive integer")
 * 
 */
          }

          /* "dwave/optimization/model.pyx":275
 *                 raise ValueError("expected num_nodes to be a positive integer")
 * 
 *             with zf.open("nodetypes.txt", "r") as fcls, zf.open("adj.adjlist", "r") as fadj:             # <<<<<<<<<<<<<<
 *                 for lineno, (classname, adjlist) in enumerate(zip(fcls, fadj)):
 *                     # get the predecessors
 */
          /*with:*/ {
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_open); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 275, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_11 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 275, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_15 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 275, __pyx_L33_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_2 = NULL;
            __pyx_t_7 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_15))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_15);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_15, function);
                __pyx_t_7 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
              __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 275, __pyx_L33_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __pyx_t_15 = __pyx_t_5;
            __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            /*try:*/ {
              {
                __Pyx_PyThreadState_declare
                __Pyx_PyThreadState_assign
                __Pyx_ExceptionSave(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
                __Pyx_XGOTREF(__pyx_t_18);
                __Pyx_XGOTREF(__pyx_t_19);
                __Pyx_XGOTREF(__pyx_t_20);
                /*try:*/ {
                  __pyx_v_fcls = __pyx_t_15;
                  __pyx_t_15 = 0;
                  /*with:*/ {
                    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_open); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 275, __pyx_L37_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L37_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                    __pyx_t_21 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 275, __pyx_L37_error)
                    __Pyx_GOTREF(__pyx_t_21);
                    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 275, __pyx_L43_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __pyx_t_2 = NULL;
                    __pyx_t_7 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_5))) {
                      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
                      if (likely(__pyx_t_2)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                        __Pyx_INCREF(__pyx_t_2);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_5, function);
                        __pyx_t_7 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
                      __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
                      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                      if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 275, __pyx_L43_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                    }
                    __pyx_t_5 = __pyx_t_15;
                    __pyx_t_15 = 0;
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    /*try:*/ {
                      {
                        __Pyx_PyThreadState_declare
                        __Pyx_PyThreadState_assign
                        __Pyx_ExceptionSave(&__pyx_t_22, &__pyx_t_23, &__pyx_t_24);
                        __Pyx_XGOTREF(__pyx_t_22);
                        __Pyx_XGOTREF(__pyx_t_23);
                        __Pyx_XGOTREF(__pyx_t_24);
                        /*try:*/ {
                          __pyx_v_fadj = __pyx_t_5;
                          __pyx_t_5 = 0;

                          /* "dwave/optimization/model.pyx":276
 * 
 *             with zf.open("nodetypes.txt", "r") as fcls, zf.open("adj.adjlist", "r") as fadj:
 *                 for lineno, (classname, adjlist) in enumerate(zip(fcls, fadj)):             # <<<<<<<<<<<<<<
 *                     # get the predecessors
 *                     node_id, *predecessor_ids = map(int, adjlist.split(b" "))
 */
                          __Pyx_INCREF(__pyx_int_0);
                          __pyx_t_5 = __pyx_int_0;
                          __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 276, __pyx_L47_error)
                          __Pyx_GOTREF(__pyx_t_3);
                          __Pyx_INCREF(__pyx_v_fcls);
                          __Pyx_GIVEREF(__pyx_v_fcls);
                          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_fcls)) __PYX_ERR(0, 276, __pyx_L47_error);
                          __Pyx_INCREF(__pyx_v_fadj);
                          __Pyx_GIVEREF(__pyx_v_fadj);
                          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_fadj)) __PYX_ERR(0, 276, __pyx_L47_error);
                          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 276, __pyx_L47_error)
                          __Pyx_GOTREF(__pyx_t_15);
                          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                          if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
                            __pyx_t_3 = __pyx_t_15; __Pyx_INCREF(__pyx_t_3);
                            __pyx_t_13 = 0;
                            __pyx_t_25 = NULL;
                          } else {
                            __pyx_t_13 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 276, __pyx_L47_error)
                            __Pyx_GOTREF(__pyx_t_3);
                            __pyx_t_25 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 276, __pyx_L47_error)
                          }
                          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                          for (;;) {
                            if (likely(!__pyx_t_25)) {
                              if (likely(PyList_CheckExact(__pyx_t_3))) {
                                {
                                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
                                  #if !CYTHON_ASSUME_SAFE_MACROS
                                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 276, __pyx_L47_error)
                                  #endif
                                  if (__pyx_t_13 >= __pyx_temp) break;
                                }
                                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                __pyx_t_15 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_15); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 276, __pyx_L47_error)
                                #else
                                __pyx_t_15 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 276, __pyx_L47_error)
                                __Pyx_GOTREF(__pyx_t_15);
                                #endif
                              } else {
                                {
                                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
                                  #if !CYTHON_ASSUME_SAFE_MACROS
                                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 276, __pyx_L47_error)
                                  #endif
                                  if (__pyx_t_13 >= __pyx_temp) break;
                                }
                                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                                __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_15); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 276, __pyx_L47_error)
                                #else
                                __pyx_t_15 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 276, __pyx_L47_error)
                                __Pyx_GOTREF(__pyx_t_15);
                                #endif
                              }
                            } else {
                              __pyx_t_15 = __pyx_t_25(__pyx_t_3);
                              if (unlikely(!__pyx_t_15)) {
                                PyObject* exc_type = PyErr_Occurred();
                                if (exc_type) {
                                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                                  else __PYX_ERR(0, 276, __pyx_L47_error)
                                }
                                break;
                              }
                              __Pyx_GOTREF(__pyx_t_15);
                            }
                            if ((likely(PyTuple_CheckExact(__pyx_t_15))) || (PyList_CheckExact(__pyx_t_15))) {
                              PyObject* sequence = __pyx_t_15;
                              Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                              if (unlikely(size != 2)) {
                                if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                                else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                                __PYX_ERR(0, 276, __pyx_L47_error)
                              }
                              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                              if (likely(PyTuple_CheckExact(sequence))) {
                                __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
                                __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
                              } else {
                                __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
                                __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
                              }
                              __Pyx_INCREF(__pyx_t_2);
                              __Pyx_INCREF(__pyx_t_6);
                              #else
                              __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L47_error)
                              __Pyx_GOTREF(__pyx_t_2);
                              __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 276, __pyx_L47_error)
                              __Pyx_GOTREF(__pyx_t_6);
                              #endif
                              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                            } else {
                              Py_ssize_t index = -1;
                              __pyx_t_16 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 276, __pyx_L47_error)
                              __Pyx_GOTREF(__pyx_t_16);
                              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                              __pyx_t_26 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_16);
                              index = 0; __pyx_t_2 = __pyx_t_26(__pyx_t_16); if (unlikely(!__pyx_t_2)) goto __pyx_L55_unpacking_failed;
                              __Pyx_GOTREF(__pyx_t_2);
                              index = 1; __pyx_t_6 = __pyx_t_26(__pyx_t_16); if (unlikely(!__pyx_t_6)) goto __pyx_L55_unpacking_failed;
                              __Pyx_GOTREF(__pyx_t_6);
                              if (__Pyx_IternextUnpackEndCheck(__pyx_t_26(__pyx_t_16), 2) < 0) __PYX_ERR(0, 276, __pyx_L47_error)
                              __pyx_t_26 = NULL;
                              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                              goto __pyx_L56_unpacking_done;
                              __pyx_L55_unpacking_failed:;
                              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                              __pyx_t_26 = NULL;
                              if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                              __PYX_ERR(0, 276, __pyx_L47_error)
                              __pyx_L56_unpacking_done:;
                            }
                            __Pyx_XDECREF_SET(__pyx_v_classname, __pyx_t_2);
                            __pyx_t_2 = 0;
                            __Pyx_XDECREF_SET(__pyx_v_adjlist, __pyx_t_6);
                            __pyx_t_6 = 0;
                            __Pyx_INCREF(__pyx_t_5);
                            __Pyx_XDECREF_SET(__pyx_v_lineno, __pyx_t_5);
                            __pyx_t_15 = __Pyx_PyInt_AddObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 276, __pyx_L47_error)
                            __Pyx_GOTREF(__pyx_t_15);
                            __Pyx_DECREF(__pyx_t_5);
                            __pyx_t_5 = __pyx_t_15;
                            __pyx_t_15 = 0;

                            /* "dwave/optimization/model.pyx":278
 *                 for lineno, (classname, adjlist) in enumerate(zip(fcls, fadj)):
 *                     # get the predecessors
 *                     node_id, *predecessor_ids = map(int, adjlist.split(b" "))             # <<<<<<<<<<<<<<
 *                     if node_id != lineno:  # sanity check
 *                         raise ValueError("unexpected adj.adjlist format")
 */
                            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_adjlist, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 278, __pyx_L47_error)
                            __Pyx_GOTREF(__pyx_t_6);
                            __pyx_t_2 = NULL;
                            __pyx_t_7 = 0;
                            #if CYTHON_UNPACK_METHODS
                            if (likely(PyMethod_Check(__pyx_t_6))) {
                              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
                              if (likely(__pyx_t_2)) {
                                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                                __Pyx_INCREF(__pyx_t_2);
                                __Pyx_INCREF(function);
                                __Pyx_DECREF_SET(__pyx_t_6, function);
                                __pyx_t_7 = 1;
                              }
                            }
                            #endif
                            {
                              PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_b__8};
                              __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
                              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                              if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 278, __pyx_L47_error)
                              __Pyx_GOTREF(__pyx_t_15);
                              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                            }
                            __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 278, __pyx_L47_error)
                            __Pyx_GOTREF(__pyx_t_6);
                            __Pyx_INCREF((PyObject *)(&PyInt_Type));
                            __Pyx_GIVEREF((PyObject *)(&PyInt_Type));
                            if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)(&PyInt_Type)))) __PYX_ERR(0, 278, __pyx_L47_error);
                            __Pyx_GIVEREF(__pyx_t_15);
                            if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_15)) __PYX_ERR(0, 278, __pyx_L47_error);
                            __pyx_t_15 = 0;
                            __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_6, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 278, __pyx_L47_error)
                            __Pyx_GOTREF(__pyx_t_15);
                            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                            {
                              Py_ssize_t index = -1;
                              PyObject** temps[2] = {&__pyx_t_6};
                              __pyx_t_2 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L47_error)
                              __Pyx_GOTREF(__pyx_t_2);
                              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                              __pyx_t_26 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2);
                              for (index=0; index < 1; index++) {
                                PyObject* item = __pyx_t_26(__pyx_t_2); if (unlikely(!item)) goto __pyx_L57_unpacking_failed;
                                __Pyx_GOTREF(item);
                                *(temps[index]) = item;
                              }
                              goto __pyx_L58_unpacking_done;
                              __pyx_L57_unpacking_failed:;
                              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                              __pyx_t_26 = NULL;
                              if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                              __PYX_ERR(0, 278, __pyx_L47_error)
                              __pyx_L58_unpacking_done:;
                            }
                            __pyx_t_16 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 278, __pyx_L47_error)
                            __Pyx_GOTREF(__pyx_t_16);
                            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                            __Pyx_XDECREF_SET(__pyx_v_node_id, __pyx_t_6);
                            __pyx_t_6 = 0;
                            __Pyx_XDECREF_SET(__pyx_v_predecessor_ids, ((PyObject*)__pyx_t_16));
                            __pyx_t_16 = 0;

                            /* "dwave/optimization/model.pyx":279
 *                     # get the predecessors
 *                     node_id, *predecessor_ids = map(int, adjlist.split(b" "))
 *                     if node_id != lineno:  # sanity check             # <<<<<<<<<<<<<<
 *                         raise ValueError("unexpected adj.adjlist format")
 * 
 */
                            __pyx_t_15 = PyObject_RichCompare(__pyx_v_node_id, __pyx_v_lineno, Py_NE); __Pyx_XGOTREF(__pyx_t_15); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 279, __pyx_L47_error)
                            __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 279, __pyx_L47_error)
                            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                            if (unlikely(__pyx_t_12)) {

                              /* "dwave/optimization/model.pyx":280
 *                     node_id, *predecessor_ids = map(int, adjlist.split(b" "))
 *                     if node_id != lineno:  # sanity check
 *                         raise ValueError("unexpected adj.adjlist format")             # <<<<<<<<<<<<<<
 * 
 *                     predecessors = []
 */
                              __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 280, __pyx_L47_error)
                              __Pyx_GOTREF(__pyx_t_15);
                              __Pyx_Raise(__pyx_t_15, 0, 0, 0);
                              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                              __PYX_ERR(0, 280, __pyx_L47_error)

                              /* "dwave/optimization/model.pyx":279
 *                     # get the predecessors
 *                     node_id, *predecessor_ids = map(int, adjlist.split(b" "))
 *                     if node_id != lineno:  # sanity check             # <<<<<<<<<<<<<<
 *                         raise ValueError("unexpected adj.adjlist format")
 * 
 */
                            }

                            /* "dwave/optimization/model.pyx":282
 *                         raise ValueError("unexpected adj.adjlist format")
 * 
 *                     predecessors = []             # <<<<<<<<<<<<<<
 *                     for pid in predecessor_ids:
 *                         if not 0 <= pid < node_id:
 */
                            __pyx_t_15 = PyList_New(0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 282, __pyx_L47_error)
                            __Pyx_GOTREF(__pyx_t_15);
                            __Pyx_XDECREF_SET(__pyx_v_predecessors, ((PyObject*)__pyx_t_15));
                            __pyx_t_15 = 0;

                            /* "dwave/optimization/model.pyx":283
 * 
 *                     predecessors = []
 *                     for pid in predecessor_ids:             # <<<<<<<<<<<<<<
 *                         if not 0 <= pid < node_id:
 *                             raise ValueError("unexpected predecessor id")
 */
                            __pyx_t_15 = __pyx_v_predecessor_ids; __Pyx_INCREF(__pyx_t_15);
                            __pyx_t_27 = 0;
                            for (;;) {
                              {
                                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_15);
                                #if !CYTHON_ASSUME_SAFE_MACROS
                                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 283, __pyx_L47_error)
                                #endif
                                if (__pyx_t_27 >= __pyx_temp) break;
                              }
                              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                              __pyx_t_16 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_27); __Pyx_INCREF(__pyx_t_16); __pyx_t_27++; if (unlikely((0 < 0))) __PYX_ERR(0, 283, __pyx_L47_error)
                              #else
                              __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_27); __pyx_t_27++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 283, __pyx_L47_error)
                              __Pyx_GOTREF(__pyx_t_16);
                              #endif
                              __Pyx_XDECREF_SET(__pyx_v_pid, __pyx_t_16);
                              __pyx_t_16 = 0;

                              /* "dwave/optimization/model.pyx":284
 *                     predecessors = []
 *                     for pid in predecessor_ids:
 *                         if not 0 <= pid < node_id:             # <<<<<<<<<<<<<<
 *                             raise ValueError("unexpected predecessor id")
 *                         predecessors.append(symbol_from_ptr(model, model._graph.nodes()[pid].get()))
 */
                              __pyx_t_16 = PyObject_RichCompare(__pyx_int_0, __pyx_v_pid, Py_LE); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 284, __pyx_L47_error)
                              if (__Pyx_PyObject_IsTrue(__pyx_t_16)) {
                                __Pyx_DECREF(__pyx_t_16);
                                __pyx_t_16 = PyObject_RichCompare(__pyx_v_pid, __pyx_v_node_id, Py_LT); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 284, __pyx_L47_error)
                              }
                              __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 284, __pyx_L47_error)
                              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                              __pyx_t_17 = (!__pyx_t_12);
                              if (unlikely(__pyx_t_17)) {

                                /* "dwave/optimization/model.pyx":285
 *                     for pid in predecessor_ids:
 *                         if not 0 <= pid < node_id:
 *                             raise ValueError("unexpected predecessor id")             # <<<<<<<<<<<<<<
 *                         predecessors.append(symbol_from_ptr(model, model._graph.nodes()[pid].get()))
 * 
 */
                                __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 285, __pyx_L47_error)
                                __Pyx_GOTREF(__pyx_t_16);
                                __Pyx_Raise(__pyx_t_16, 0, 0, 0);
                                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                                __PYX_ERR(0, 285, __pyx_L47_error)

                                /* "dwave/optimization/model.pyx":284
 *                     predecessors = []
 *                     for pid in predecessor_ids:
 *                         if not 0 <= pid < node_id:             # <<<<<<<<<<<<<<
 *                             raise ValueError("unexpected predecessor id")
 *                         predecessors.append(symbol_from_ptr(model, model._graph.nodes()[pid].get()))
 */
                              }

                              /* "dwave/optimization/model.pyx":286
 *                         if not 0 <= pid < node_id:
 *                             raise ValueError("unexpected predecessor id")
 *                         predecessors.append(symbol_from_ptr(model, model._graph.nodes()[pid].get()))             # <<<<<<<<<<<<<<
 * 
 *                     # now make the node
 */
                              __pyx_t_28 = PyInt_AsSsize_t(__pyx_v_pid); if (unlikely((__pyx_t_28 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 286, __pyx_L47_error)
                              __pyx_t_16 = __pyx_fuse_0__pyx_f_5dwave_12optimization_7symbols_symbol_from_ptr(__pyx_v_model, (__pyx_v_model->_graph.nodes()[__pyx_t_28]).get()); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 286, __pyx_L47_error)
                              __Pyx_GOTREF(__pyx_t_16);
                              __pyx_t_29 = __Pyx_PyList_Append(__pyx_v_predecessors, __pyx_t_16); if (unlikely(__pyx_t_29 == ((int)-1))) __PYX_ERR(0, 286, __pyx_L47_error)
                              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

                              /* "dwave/optimization/model.pyx":283
 * 
 *                     predecessors = []
 *                     for pid in predecessor_ids:             # <<<<<<<<<<<<<<
 *                         if not 0 <= pid < node_id:
 *                             raise ValueError("unexpected predecessor id")
 */
                            }
                            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

                            /* "dwave/optimization/model.pyx":289
 * 
 *                     # now make the node
 *                     directory = f"nodes/{node_id}/"             # <<<<<<<<<<<<<<
 *                     classname = classname.decode("UTF-8").rstrip("\n")
 *                     try:
 */
                            __pyx_t_15 = PyTuple_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 289, __pyx_L47_error)
                            __Pyx_GOTREF(__pyx_t_15);
                            __pyx_t_27 = 0;
                            __pyx_t_14 = 127;
                            __Pyx_INCREF(__pyx_kp_u_nodes);
                            __pyx_t_27 += 6;
                            __Pyx_GIVEREF(__pyx_kp_u_nodes);
                            PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_kp_u_nodes);
                            __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_v_node_id, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 289, __pyx_L47_error)
                            __Pyx_GOTREF(__pyx_t_16);
                            __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_14;
                            __pyx_t_27 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
                            __Pyx_GIVEREF(__pyx_t_16);
                            PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_16);
                            __pyx_t_16 = 0;
                            __Pyx_INCREF(__pyx_kp_u__11);
                            __pyx_t_27 += 1;
                            __Pyx_GIVEREF(__pyx_kp_u__11);
                            PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_kp_u__11);
                            __pyx_t_16 = __Pyx_PyUnicode_Join(__pyx_t_15, 3, __pyx_t_27, __pyx_t_14); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 289, __pyx_L47_error)
                            __Pyx_GOTREF(__pyx_t_16);
                            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                            __Pyx_XDECREF_SET(__pyx_v_directory, ((PyObject*)__pyx_t_16));
                            __pyx_t_16 = 0;

                            /* "dwave/optimization/model.pyx":290
 *                     # now make the node
 *                     directory = f"nodes/{node_id}/"
 *                     classname = classname.decode("UTF-8").rstrip("\n")             # <<<<<<<<<<<<<<
 *                     try:
 *                         _node_subclasses[classname]._from_zipfile(zf, directory, model, predecessors=predecessors)
 */
                            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_classname, __pyx_n_s_decode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 290, __pyx_L47_error)
                            __Pyx_GOTREF(__pyx_t_6);
                            __pyx_t_2 = NULL;
                            __pyx_t_7 = 0;
                            #if CYTHON_UNPACK_METHODS
                            if (likely(PyMethod_Check(__pyx_t_6))) {
                              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
                              if (likely(__pyx_t_2)) {
                                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                                __Pyx_INCREF(__pyx_t_2);
                                __Pyx_INCREF(function);
                                __Pyx_DECREF_SET(__pyx_t_6, function);
                                __pyx_t_7 = 1;
                              }
                            }
                            #endif
                            {
                              PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_u_UTF_8};
                              __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
                              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                              if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 290, __pyx_L47_error)
                              __Pyx_GOTREF(__pyx_t_15);
                              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                            }
                            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_rstrip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 290, __pyx_L47_error)
                            __Pyx_GOTREF(__pyx_t_6);
                            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                            __pyx_t_15 = NULL;
                            __pyx_t_7 = 0;
                            #if CYTHON_UNPACK_METHODS
                            if (likely(PyMethod_Check(__pyx_t_6))) {
                              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_6);
                              if (likely(__pyx_t_15)) {
                                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                                __Pyx_INCREF(__pyx_t_15);
                                __Pyx_INCREF(function);
                                __Pyx_DECREF_SET(__pyx_t_6, function);
                                __pyx_t_7 = 1;
                              }
                            }
                            #endif
                            {
                              PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_kp_u__12};
                              __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
                              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                              if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 290, __pyx_L47_error)
                              __Pyx_GOTREF(__pyx_t_16);
                              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                            }
                            __Pyx_DECREF_SET(__pyx_v_classname, __pyx_t_16);
                            __pyx_t_16 = 0;

                            /* "dwave/optimization/model.pyx":291
 *                     directory = f"nodes/{node_id}/"
 *                     classname = classname.decode("UTF-8").rstrip("\n")
 *                     try:             # <<<<<<<<<<<<<<
 *                         _node_subclasses[classname]._from_zipfile(zf, directory, model, predecessors=predecessors)
 *                     except KeyError:
 */
                            {
                              __Pyx_PyThreadState_declare
                              __Pyx_PyThreadState_assign
                              __Pyx_ExceptionSave(&__pyx_t_30, &__pyx_t_31, &__pyx_t_32);
                              __Pyx_XGOTREF(__pyx_t_30);
                              __Pyx_XGOTREF(__pyx_t_31);
                              __Pyx_XGOTREF(__pyx_t_32);
                              /*try:*/ {

                                /* "dwave/optimization/model.pyx":292
 *                     classname = classname.decode("UTF-8").rstrip("\n")
 *                     try:
 *                         _node_subclasses[classname]._from_zipfile(zf, directory, model, predecessors=predecessors)             # <<<<<<<<<<<<<<
 *                     except KeyError:
 *                         raise ValueError("encoded model has an unsupported node type")
 */
                                __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_node_subclasses); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 292, __pyx_L64_error)
                                __Pyx_GOTREF(__pyx_t_16);
                                __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_16, __pyx_v_classname); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 292, __pyx_L64_error)
                                __Pyx_GOTREF(__pyx_t_6);
                                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                                __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_from_zipfile); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 292, __pyx_L64_error)
                                __Pyx_GOTREF(__pyx_t_16);
                                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                                __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 292, __pyx_L64_error)
                                __Pyx_GOTREF(__pyx_t_6);
                                __Pyx_INCREF(__pyx_v_zf);
                                __Pyx_GIVEREF(__pyx_v_zf);
                                if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_zf)) __PYX_ERR(0, 292, __pyx_L64_error);
                                __Pyx_INCREF(__pyx_v_directory);
                                __Pyx_GIVEREF(__pyx_v_directory);
                                if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_directory)) __PYX_ERR(0, 292, __pyx_L64_error);
                                __Pyx_INCREF((PyObject *)__pyx_v_model);
                                __Pyx_GIVEREF((PyObject *)__pyx_v_model);
                                if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, ((PyObject *)__pyx_v_model))) __PYX_ERR(0, 292, __pyx_L64_error);
                                __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 292, __pyx_L64_error)
                                __Pyx_GOTREF(__pyx_t_15);
                                if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_predecessors, __pyx_v_predecessors) < 0) __PYX_ERR(0, 292, __pyx_L64_error)
                                __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_6, __pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L64_error)
                                __Pyx_GOTREF(__pyx_t_2);
                                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                                /* "dwave/optimization/model.pyx":291
 *                     directory = f"nodes/{node_id}/"
 *                     classname = classname.decode("UTF-8").rstrip("\n")
 *                     try:             # <<<<<<<<<<<<<<
 *                         _node_subclasses[classname]._from_zipfile(zf, directory, model, predecessors=predecessors)
 *                     except KeyError:
 */
                              }
                              __Pyx_XDECREF(__pyx_t_30); __pyx_t_30 = 0;
                              __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
                              __Pyx_XDECREF(__pyx_t_32); __pyx_t_32 = 0;
                              goto __pyx_L71_try_end;
                              __pyx_L64_error:;
                              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                              __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

                              /* "dwave/optimization/model.pyx":293
 *                     try:
 *                         _node_subclasses[classname]._from_zipfile(zf, directory, model, predecessors=predecessors)
 *                     except KeyError:             # <<<<<<<<<<<<<<
 *                         raise ValueError("encoded model has an unsupported node type")
 * 
 */
                              __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
                              if (__pyx_t_7) {
                                __Pyx_AddTraceback("dwave.optimization.model.Model.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
                                if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_15, &__pyx_t_6) < 0) __PYX_ERR(0, 293, __pyx_L66_except_error)
                                __Pyx_XGOTREF(__pyx_t_2);
                                __Pyx_XGOTREF(__pyx_t_15);
                                __Pyx_XGOTREF(__pyx_t_6);

                                /* "dwave/optimization/model.pyx":294
 *                         _node_subclasses[classname]._from_zipfile(zf, directory, model, predecessors=predecessors)
 *                     except KeyError:
 *                         raise ValueError("encoded model has an unsupported node type")             # <<<<<<<<<<<<<<
 * 
 *             objective_buff = zf.read("objective.json")
 */
                                __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 294, __pyx_L66_except_error)
                                __Pyx_GOTREF(__pyx_t_16);
                                __Pyx_Raise(__pyx_t_16, 0, 0, 0);
                                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                                __PYX_ERR(0, 294, __pyx_L66_except_error)
                              }
                              goto __pyx_L66_except_error;

                              /* "dwave/optimization/model.pyx":291
 *                     directory = f"nodes/{node_id}/"
 *                     classname = classname.decode("UTF-8").rstrip("\n")
 *                     try:             # <<<<<<<<<<<<<<
 *                         _node_subclasses[classname]._from_zipfile(zf, directory, model, predecessors=predecessors)
 *                     except KeyError:
 */
                              __pyx_L66_except_error:;
                              __Pyx_XGIVEREF(__pyx_t_30);
                              __Pyx_XGIVEREF(__pyx_t_31);
                              __Pyx_XGIVEREF(__pyx_t_32);
                              __Pyx_ExceptionReset(__pyx_t_30, __pyx_t_31, __pyx_t_32);
                              goto __pyx_L47_error;
                              __pyx_L71_try_end:;
                            }

                            /* "dwave/optimization/model.pyx":276
 * 
 *             with zf.open("nodetypes.txt", "r") as fcls, zf.open("adj.adjlist", "r") as fadj:
 *                 for lineno, (classname, adjlist) in enumerate(zip(fcls, fadj)):             # <<<<<<<<<<<<<<
 *                     # get the predecessors
 *                     node_id, *predecessor_ids = map(int, adjlist.split(b" "))
 */
                          }
                          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

                          /* "dwave/optimization/model.pyx":275
 *                 raise ValueError("expected num_nodes to be a positive integer")
 * 
 *             with zf.open("nodetypes.txt", "r") as fcls, zf.open("adj.adjlist", "r") as fadj:             # <<<<<<<<<<<<<<
 *                 for lineno, (classname, adjlist) in enumerate(zip(fcls, fadj)):
 *                     # get the predecessors
 */
                        }
                        __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
                        __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
                        __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
                        goto __pyx_L52_try_end;
                        __pyx_L47_error:;
                        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                        /*except:*/ {
                          __Pyx_AddTraceback("dwave.optimization.model.Model.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
                          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_3, &__pyx_t_6) < 0) __PYX_ERR(0, 275, __pyx_L49_except_error)
                          __Pyx_XGOTREF(__pyx_t_5);
                          __Pyx_XGOTREF(__pyx_t_3);
                          __Pyx_XGOTREF(__pyx_t_6);
                          __pyx_t_15 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 275, __pyx_L49_except_error)
                          __Pyx_GOTREF(__pyx_t_15);
                          __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_21, __pyx_t_15, NULL);
                          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                          if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 275, __pyx_L49_except_error)
                          __Pyx_GOTREF(__pyx_t_32);
                          __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_32);
                          __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                          if (__pyx_t_17 < 0) __PYX_ERR(0, 275, __pyx_L49_except_error)
                          __pyx_t_12 = (!__pyx_t_17);
                          if (unlikely(__pyx_t_12)) {
                            __Pyx_GIVEREF(__pyx_t_5);
                            __Pyx_GIVEREF(__pyx_t_3);
                            __Pyx_XGIVEREF(__pyx_t_6);
                            __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_3, __pyx_t_6);
                            __pyx_t_5 = 0; __pyx_t_3 = 0; __pyx_t_6 = 0; 
                            __PYX_ERR(0, 275, __pyx_L49_except_error)
                          }
                          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                          goto __pyx_L48_exception_handled;
                        }
                        __pyx_L49_except_error:;
                        __Pyx_XGIVEREF(__pyx_t_22);
                        __Pyx_XGIVEREF(__pyx_t_23);
                        __Pyx_XGIVEREF(__pyx_t_24);
                        __Pyx_ExceptionReset(__pyx_t_22, __pyx_t_23, __pyx_t_24);
                        goto __pyx_L37_error;
                        __pyx_L48_exception_handled:;
                        __Pyx_XGIVEREF(__pyx_t_22);
                        __Pyx_XGIVEREF(__pyx_t_23);
                        __Pyx_XGIVEREF(__pyx_t_24);
                        __Pyx_ExceptionReset(__pyx_t_22, __pyx_t_23, __pyx_t_24);
                        __pyx_L52_try_end:;
                      }
                    }
                    /*finally:*/ {
                      /*normal exit:*/{
                        if (__pyx_t_21) {
                          __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_21, __pyx_tuple__4, NULL);
                          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                          if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 275, __pyx_L37_error)
                          __Pyx_GOTREF(__pyx_t_24);
                          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                        }
                        goto __pyx_L46;
                      }
                      __pyx_L46:;
                    }
                    goto __pyx_L78;
                    __pyx_L43_error:;
                    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                    goto __pyx_L37_error;
                    __pyx_L78:;
                  }
                }
                __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
                __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                goto __pyx_L42_try_end;
                __pyx_L37_error:;
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                /*except:*/ {
                  __Pyx_AddTraceback("dwave.optimization.model.Model.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_3, &__pyx_t_5) < 0) __PYX_ERR(0, 275, __pyx_L39_except_error)
                  __Pyx_XGOTREF(__pyx_t_6);
                  __Pyx_XGOTREF(__pyx_t_3);
                  __Pyx_XGOTREF(__pyx_t_5);
                  __pyx_t_15 = PyTuple_Pack(3, __pyx_t_6, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 275, __pyx_L39_except_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_15, NULL);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 275, __pyx_L39_except_error)
                  __Pyx_GOTREF(__pyx_t_21);
                  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_21);
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  if (__pyx_t_12 < 0) __PYX_ERR(0, 275, __pyx_L39_except_error)
                  __pyx_t_17 = (!__pyx_t_12);
                  if (unlikely(__pyx_t_17)) {
                    __Pyx_GIVEREF(__pyx_t_6);
                    __Pyx_GIVEREF(__pyx_t_3);
                    __Pyx_XGIVEREF(__pyx_t_5);
                    __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_3, __pyx_t_5);
                    __pyx_t_6 = 0; __pyx_t_3 = 0; __pyx_t_5 = 0; 
                    __PYX_ERR(0, 275, __pyx_L39_except_error)
                  }
                  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                  goto __pyx_L38_exception_handled;
                }
                __pyx_L39_except_error:;
                __Pyx_XGIVEREF(__pyx_t_18);
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_XGIVEREF(__pyx_t_20);
                __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
                goto __pyx_L24_error;
                __pyx_L38_exception_handled:;
                __Pyx_XGIVEREF(__pyx_t_18);
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_XGIVEREF(__pyx_t_20);
                __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
                __pyx_L42_try_end:;
              }
            }
            /*finally:*/ {
              /*normal exit:*/{
                if (__pyx_t_11) {
                  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__4, NULL);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 275, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                }
                goto __pyx_L36;
              }
              __pyx_L36:;
            }
            goto __pyx_L82;
            __pyx_L33_error:;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            goto __pyx_L24_error;
            __pyx_L82:;
          }

          /* "dwave/optimization/model.pyx":296
 *                         raise ValueError("encoded model has an unsupported node type")
 * 
 *             objective_buff = zf.read("objective.json")             # <<<<<<<<<<<<<<
 *             if objective_buff:
 *                 objective_id = json.loads(objective_buff)
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L24_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_6 = NULL;
          __pyx_t_7 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_7 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u_objective_json};
            __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_v_objective_buff = __pyx_t_5;
          __pyx_t_5 = 0;

          /* "dwave/optimization/model.pyx":297
 * 
 *             objective_buff = zf.read("objective.json")
 *             if objective_buff:             # <<<<<<<<<<<<<<
 *                 objective_id = json.loads(objective_buff)
 *                 if not isinstance(objective_id, int) or objective_id >= model.num_nodes():
 */
          __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_v_objective_buff); if (unlikely((__pyx_t_17 < 0))) __PYX_ERR(0, 297, __pyx_L24_error)
          if (__pyx_t_17) {

            /* "dwave/optimization/model.pyx":298
 *             objective_buff = zf.read("objective.json")
 *             if objective_buff:
 *                 objective_id = json.loads(objective_buff)             # <<<<<<<<<<<<<<
 *                 if not isinstance(objective_id, int) or objective_id >= model.num_nodes():
 *                     raise ValueError("objective must be an integer and a valid node id")
 */
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_json); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 298, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_loads); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 298, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = NULL;
            __pyx_t_7 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
                __pyx_t_7 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_objective_buff};
              __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 298, __pyx_L24_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            }
            __pyx_v_objective_id = __pyx_t_5;
            __pyx_t_5 = 0;

            /* "dwave/optimization/model.pyx":299
 *             if objective_buff:
 *                 objective_id = json.loads(objective_buff)
 *                 if not isinstance(objective_id, int) or objective_id >= model.num_nodes():             # <<<<<<<<<<<<<<
 *                     raise ValueError("objective must be an integer and a valid node id")
 *                 model.minimize(symbol_from_ptr(model, model._graph.nodes()[objective_id].get()))
 */
            __pyx_t_12 = PyInt_Check(__pyx_v_objective_id); 
            __pyx_t_1 = (!__pyx_t_12);
            if (!__pyx_t_1) {
            } else {
              __pyx_t_17 = __pyx_t_1;
              goto __pyx_L85_bool_binop_done;
            }
            __pyx_t_5 = PyInt_FromSsize_t(((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_model->__pyx_vtab)->num_nodes(__pyx_v_model, 0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 299, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_6 = PyObject_RichCompare(__pyx_v_objective_id, __pyx_t_5, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 299, __pyx_L24_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 299, __pyx_L24_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_17 = __pyx_t_1;
            __pyx_L85_bool_binop_done:;
            if (unlikely(__pyx_t_17)) {

              /* "dwave/optimization/model.pyx":300
 *                 objective_id = json.loads(objective_buff)
 *                 if not isinstance(objective_id, int) or objective_id >= model.num_nodes():
 *                     raise ValueError("objective must be an integer and a valid node id")             # <<<<<<<<<<<<<<
 *                 model.minimize(symbol_from_ptr(model, model._graph.nodes()[objective_id].get()))
 * 
 */
              __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 300, __pyx_L24_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_Raise(__pyx_t_6, 0, 0, 0);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __PYX_ERR(0, 300, __pyx_L24_error)

              /* "dwave/optimization/model.pyx":299
 *             if objective_buff:
 *                 objective_id = json.loads(objective_buff)
 *                 if not isinstance(objective_id, int) or objective_id >= model.num_nodes():             # <<<<<<<<<<<<<<
 *                     raise ValueError("objective must be an integer and a valid node id")
 *                 model.minimize(symbol_from_ptr(model, model._graph.nodes()[objective_id].get()))
 */
            }

            /* "dwave/optimization/model.pyx":301
 *                 if not isinstance(objective_id, int) or objective_id >= model.num_nodes():
 *                     raise ValueError("objective must be an integer and a valid node id")
 *                 model.minimize(symbol_from_ptr(model, model._graph.nodes()[objective_id].get()))             # <<<<<<<<<<<<<<
 * 
 *             for cid in json.loads(zf.read("constraints.json")):
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_model), __pyx_n_s_minimize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_28 = PyInt_AsSsize_t(__pyx_v_objective_id); if (unlikely((__pyx_t_28 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L24_error)
            __pyx_t_3 = __pyx_fuse_0__pyx_f_5dwave_12optimization_7symbols_symbol_from_ptr(__pyx_v_model, (__pyx_v_model->_graph.nodes()[__pyx_t_28]).get()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_15 = NULL;
            __pyx_t_7 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
                __pyx_t_7 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_t_3};
              __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 301, __pyx_L24_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "dwave/optimization/model.pyx":297
 * 
 *             objective_buff = zf.read("objective.json")
 *             if objective_buff:             # <<<<<<<<<<<<<<
 *                 objective_id = json.loads(objective_buff)
 *                 if not isinstance(objective_id, int) or objective_id >= model.num_nodes():
 */
          }

          /* "dwave/optimization/model.pyx":303
 *                 model.minimize(symbol_from_ptr(model, model._graph.nodes()[objective_id].get()))
 * 
 *             for cid in json.loads(zf.read("constraints.json")):             # <<<<<<<<<<<<<<
 *                 model.add_constraint(symbol_from_ptr(model, model._graph.nodes()[cid].get()))
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_json); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 303, __pyx_L24_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_loads); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L24_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_read); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 303, __pyx_L24_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_2 = NULL;
          __pyx_t_7 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
              __pyx_t_7 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_u_constraints_json};
            __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 303, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          __pyx_t_15 = NULL;
          __pyx_t_7 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_15)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_15);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_7 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_t_5};
            __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 303, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
            __pyx_t_3 = __pyx_t_6; __Pyx_INCREF(__pyx_t_3);
            __pyx_t_13 = 0;
            __pyx_t_25 = NULL;
          } else {
            __pyx_t_13 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_25 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 303, __pyx_L24_error)
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          for (;;) {
            if (likely(!__pyx_t_25)) {
              if (likely(PyList_CheckExact(__pyx_t_3))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 303, __pyx_L24_error)
                  #endif
                  if (__pyx_t_13 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_6); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 303, __pyx_L24_error)
                #else
                __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 303, __pyx_L24_error)
                __Pyx_GOTREF(__pyx_t_6);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 303, __pyx_L24_error)
                  #endif
                  if (__pyx_t_13 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_6); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 303, __pyx_L24_error)
                #else
                __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 303, __pyx_L24_error)
                __Pyx_GOTREF(__pyx_t_6);
                #endif
              }
            } else {
              __pyx_t_6 = __pyx_t_25(__pyx_t_3);
              if (unlikely(!__pyx_t_6)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 303, __pyx_L24_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_6);
            }
            __Pyx_XDECREF_SET(__pyx_v_cid, __pyx_t_6);
            __pyx_t_6 = 0;

            /* "dwave/optimization/model.pyx":304
 * 
 *             for cid in json.loads(zf.read("constraints.json")):
 *                 model.add_constraint(symbol_from_ptr(model, model._graph.nodes()[cid].get()))             # <<<<<<<<<<<<<<
 * 
 *             # Read any states that have been encoded
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_model), __pyx_n_s_add_constraint); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 304, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_28 = PyInt_AsSsize_t(__pyx_v_cid); if (unlikely((__pyx_t_28 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 304, __pyx_L24_error)
            __pyx_t_15 = __pyx_fuse_0__pyx_f_5dwave_12optimization_7symbols_symbol_from_ptr(__pyx_v_model, (__pyx_v_model->_graph.nodes()[__pyx_t_28]).get()); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 304, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_2 = NULL;
            __pyx_t_7 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
                __pyx_t_7 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_15};
              __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 304, __pyx_L24_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "dwave/optimization/model.pyx":303
 *                 model.minimize(symbol_from_ptr(model, model._graph.nodes()[objective_id].get()))
 * 
 *             for cid in json.loads(zf.read("constraints.json")):             # <<<<<<<<<<<<<<
 *                 model.add_constraint(symbol_from_ptr(model, model._graph.nodes()[cid].get()))
 * 
 */
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "dwave/optimization/model.pyx":307
 * 
 *             # Read any states that have been encoded
 *             num_states = model_info.get("num_states")             # <<<<<<<<<<<<<<
 *             if not isinstance(num_states, int) or num_states < 0:
 *                 raise ValueError("expected num_states to be a positive integer")
 */
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_model_info, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 307, __pyx_L24_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_5 = NULL;
          __pyx_t_7 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
              __pyx_t_7 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_n_u_num_states};
            __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 307, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          }
          __pyx_v_num_states = __pyx_t_3;
          __pyx_t_3 = 0;

          /* "dwave/optimization/model.pyx":308
 *             # Read any states that have been encoded
 *             num_states = model_info.get("num_states")
 *             if not isinstance(num_states, int) or num_states < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("expected num_states to be a positive integer")
 * 
 */
          __pyx_t_1 = PyInt_Check(__pyx_v_num_states); 
          __pyx_t_12 = (!__pyx_t_1);
          if (!__pyx_t_12) {
          } else {
            __pyx_t_17 = __pyx_t_12;
            goto __pyx_L91_bool_binop_done;
          }
          __pyx_t_3 = PyObject_RichCompare(__pyx_v_num_states, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L24_error)
          __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 308, __pyx_L24_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_17 = __pyx_t_12;
          __pyx_L91_bool_binop_done:;
          if (unlikely(__pyx_t_17)) {

            /* "dwave/optimization/model.pyx":309
 *             num_states = model_info.get("num_states")
 *             if not isinstance(num_states, int) or num_states < 0:
 *                 raise ValueError("expected num_states to be a positive integer")             # <<<<<<<<<<<<<<
 * 
 *             if num_states > 0:
 */
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_Raise(__pyx_t_3, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __PYX_ERR(0, 309, __pyx_L24_error)

            /* "dwave/optimization/model.pyx":308
 *             # Read any states that have been encoded
 *             num_states = model_info.get("num_states")
 *             if not isinstance(num_states, int) or num_states < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("expected num_states to be a positive integer")
 * 
 */
          }

          /* "dwave/optimization/model.pyx":311
 *                 raise ValueError("expected num_states to be a positive integer")
 * 
 *             if num_states > 0:             # <<<<<<<<<<<<<<
 *                 model.states.resize(num_states)
 * 
 */
          __pyx_t_3 = PyObject_RichCompare(__pyx_v_num_states, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L24_error)
          __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_17 < 0))) __PYX_ERR(0, 311, __pyx_L24_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__pyx_t_17) {

            /* "dwave/optimization/model.pyx":312
 * 
 *             if num_states > 0:
 *                 model.states.resize(num_states)             # <<<<<<<<<<<<<<
 * 
 *                 # now read the states of the decision variables
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_model->states), __pyx_n_s_resize); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 312, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_5 = NULL;
            __pyx_t_7 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
                __pyx_t_7 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_num_states};
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L24_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "dwave/optimization/model.pyx":315
 * 
 *                 # now read the states of the decision variables
 *                 num_decisions = model.num_decisions()  # use the model not the serialization             # <<<<<<<<<<<<<<
 *                 for node in itertools.islice(model.iter_symbols(), 0, num_decisions):
 *                     for i in range(num_states):
 */
            __pyx_v_num_decisions = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_model->__pyx_vtab)->num_decisions(__pyx_v_model, 0);

            /* "dwave/optimization/model.pyx":316
 *                 # now read the states of the decision variables
 *                 num_decisions = model.num_decisions()  # use the model not the serialization
 *                 for node in itertools.islice(model.iter_symbols(), 0, num_decisions):             # <<<<<<<<<<<<<<
 *                     for i in range(num_states):
 *                         node._state_from_zipfile(zf, f"nodes/{node.topological_index()}/states/{i}/", i)
 */
            __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_itertools); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 316, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_islice); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_model), __pyx_n_s_iter_symbols); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 316, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_2 = NULL;
            __pyx_t_7 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_15))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_15);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_15, function);
                __pyx_t_7 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
              __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 316, __pyx_L24_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __pyx_t_15 = PyInt_FromSsize_t(__pyx_v_num_decisions); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 316, __pyx_L24_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_2 = NULL;
            __pyx_t_7 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
                __pyx_t_7 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[4] = {__pyx_t_2, __pyx_t_6, __pyx_int_0, __pyx_t_15};
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 3+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 316, __pyx_L24_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
              __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5);
              __pyx_t_13 = 0;
              __pyx_t_25 = NULL;
            } else {
              __pyx_t_13 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L24_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_25 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 316, __pyx_L24_error)
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            for (;;) {
              if (likely(!__pyx_t_25)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 316, __pyx_L24_error)
                    #endif
                    if (__pyx_t_13 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 316, __pyx_L24_error)
                  #else
                  __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 316, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  #endif
                } else {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 316, __pyx_L24_error)
                    #endif
                    if (__pyx_t_13 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 316, __pyx_L24_error)
                  #else
                  __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 316, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  #endif
                }
              } else {
                __pyx_t_3 = __pyx_t_25(__pyx_t_5);
                if (unlikely(!__pyx_t_3)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 316, __pyx_L24_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_3);
              }
              __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_3);
              __pyx_t_3 = 0;

              /* "dwave/optimization/model.pyx":317
 *                 num_decisions = model.num_decisions()  # use the model not the serialization
 *                 for node in itertools.islice(model.iter_symbols(), 0, num_decisions):
 *                     for i in range(num_states):             # <<<<<<<<<<<<<<
 *                         node._state_from_zipfile(zf, f"nodes/{node.topological_index()}/states/{i}/", i)
 * 
 */
              __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_num_states); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L24_error)
              __Pyx_GOTREF(__pyx_t_3);
              if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
                __pyx_t_15 = __pyx_t_3; __Pyx_INCREF(__pyx_t_15);
                __pyx_t_27 = 0;
                __pyx_t_33 = NULL;
              } else {
                __pyx_t_27 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 317, __pyx_L24_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_33 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_15); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 317, __pyx_L24_error)
              }
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              for (;;) {
                if (likely(!__pyx_t_33)) {
                  if (likely(PyList_CheckExact(__pyx_t_15))) {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_15);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 317, __pyx_L24_error)
                      #endif
                      if (__pyx_t_27 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_27); __Pyx_INCREF(__pyx_t_3); __pyx_t_27++; if (unlikely((0 < 0))) __PYX_ERR(0, 317, __pyx_L24_error)
                    #else
                    __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_27); __pyx_t_27++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L24_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    #endif
                  } else {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_15);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 317, __pyx_L24_error)
                      #endif
                      if (__pyx_t_27 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_27); __Pyx_INCREF(__pyx_t_3); __pyx_t_27++; if (unlikely((0 < 0))) __PYX_ERR(0, 317, __pyx_L24_error)
                    #else
                    __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_27); __pyx_t_27++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L24_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    #endif
                  }
                } else {
                  __pyx_t_3 = __pyx_t_33(__pyx_t_15);
                  if (unlikely(!__pyx_t_3)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 317, __pyx_L24_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_3);
                }
                __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
                __pyx_t_3 = 0;

                /* "dwave/optimization/model.pyx":318
 *                 for node in itertools.islice(model.iter_symbols(), 0, num_decisions):
 *                     for i in range(num_states):
 *                         node._state_from_zipfile(zf, f"nodes/{node.topological_index()}/states/{i}/", i)             # <<<<<<<<<<<<<<
 * 
 *         if check_header:
 */
                __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_state_from_zipfile); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 318, __pyx_L24_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L24_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_34 = 0;
                __pyx_t_14 = 127;
                __Pyx_INCREF(__pyx_kp_u_nodes);
                __pyx_t_34 += 6;
                __Pyx_GIVEREF(__pyx_kp_u_nodes);
                PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_nodes);
                __pyx_t_35 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_topological_index); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 318, __pyx_L24_error)
                __Pyx_GOTREF(__pyx_t_35);
                __pyx_t_36 = NULL;
                __pyx_t_7 = 0;
                #if CYTHON_UNPACK_METHODS
                if (likely(PyMethod_Check(__pyx_t_35))) {
                  __pyx_t_36 = PyMethod_GET_SELF(__pyx_t_35);
                  if (likely(__pyx_t_36)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_35);
                    __Pyx_INCREF(__pyx_t_36);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_35, function);
                    __pyx_t_7 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_36, NULL};
                  __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_35, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
                  __Pyx_XDECREF(__pyx_t_36); __pyx_t_36 = 0;
                  if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 318, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;
                }
                __pyx_t_35 = __Pyx_PyObject_FormatSimple(__pyx_t_16, __pyx_empty_unicode); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 318, __pyx_L24_error)
                __Pyx_GOTREF(__pyx_t_35);
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_35) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_35) : __pyx_t_14;
                __pyx_t_34 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_35);
                __Pyx_GIVEREF(__pyx_t_35);
                PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_35);
                __pyx_t_35 = 0;
                __Pyx_INCREF(__pyx_kp_u_states);
                __pyx_t_34 += 8;
                __Pyx_GIVEREF(__pyx_kp_u_states);
                PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_states);
                __pyx_t_35 = __Pyx_PyObject_FormatSimple(__pyx_v_i, __pyx_empty_unicode); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 318, __pyx_L24_error)
                __Pyx_GOTREF(__pyx_t_35);
                __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_35) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_35) : __pyx_t_14;
                __pyx_t_34 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_35);
                __Pyx_GIVEREF(__pyx_t_35);
                PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_35);
                __pyx_t_35 = 0;
                __Pyx_INCREF(__pyx_kp_u__11);
                __pyx_t_34 += 1;
                __Pyx_GIVEREF(__pyx_kp_u__11);
                PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u__11);
                __pyx_t_35 = __Pyx_PyUnicode_Join(__pyx_t_2, 5, __pyx_t_34, __pyx_t_14); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 318, __pyx_L24_error)
                __Pyx_GOTREF(__pyx_t_35);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __pyx_t_2 = NULL;
                __pyx_t_7 = 0;
                #if CYTHON_UNPACK_METHODS
                if (likely(PyMethod_Check(__pyx_t_6))) {
                  __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
                  if (likely(__pyx_t_2)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                    __Pyx_INCREF(__pyx_t_2);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_6, function);
                    __pyx_t_7 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[4] = {__pyx_t_2, __pyx_v_zf, __pyx_t_35, __pyx_v_i};
                  __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 3+__pyx_t_7);
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;
                  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                }
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                /* "dwave/optimization/model.pyx":317
 *                 num_decisions = model.num_decisions()  # use the model not the serialization
 *                 for node in itertools.islice(model.iter_symbols(), 0, num_decisions):
 *                     for i in range(num_states):             # <<<<<<<<<<<<<<
 *                         node._state_from_zipfile(zf, f"nodes/{node.topological_index()}/states/{i}/", i)
 * 
 */
              }
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

              /* "dwave/optimization/model.pyx":316
 *                 # now read the states of the decision variables
 *                 num_decisions = model.num_decisions()  # use the model not the serialization
 *                 for node in itertools.islice(model.iter_symbols(), 0, num_decisions):             # <<<<<<<<<<<<<<
 *                     for i in range(num_states):
 *                         node._state_from_zipfile(zf, f"nodes/{node.topological_index()}/states/{i}/", i)
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "dwave/optimization/model.pyx":311
 *                 raise ValueError("expected num_states to be a positive integer")
 * 
 *             if num_states > 0:             # <<<<<<<<<<<<<<
 *                 model.states.resize(num_states)
 * 
 */
          }

          /* "dwave/optimization/model.pyx":268
 *         cdef Model model = cls()
 * 
 *         with zipfile.ZipFile(file, mode="r") as zf:             # <<<<<<<<<<<<<<
 *             model_info = json.loads(zf.read("info.json"))
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L29_try_end;
        __pyx_L24_error:;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_35); __pyx_t_35 = 0;
        __Pyx_XDECREF(__pyx_t_36); __pyx_t_36 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("dwave.optimization.model.Model.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_15, &__pyx_t_3) < 0) __PYX_ERR(0, 268, __pyx_L26_except_error)
          __Pyx_XGOTREF(__pyx_t_5);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_6 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_15, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 268, __pyx_L26_except_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 268, __pyx_L26_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (__pyx_t_17 < 0) __PYX_ERR(0, 268, __pyx_L26_except_error)
          __pyx_t_12 = (!__pyx_t_17);
          if (unlikely(__pyx_t_12)) {
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_15, __pyx_t_3);
            __pyx_t_5 = 0; __pyx_t_15 = 0; __pyx_t_3 = 0; 
            __PYX_ERR(0, 268, __pyx_L26_except_error)
          }
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L25_exception_handled;
        }
        __pyx_L26_except_error:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        goto __pyx_L1_error;
        __pyx_L25_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        __pyx_L29_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_4) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__4, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 268, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        goto __pyx_L23;
      }
      __pyx_L23:;
    }
    goto __pyx_L103;
    __pyx_L20_error:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L1_error;
    __pyx_L103:;
  }

  /* "dwave/optimization/model.pyx":320
 *                         node._state_from_zipfile(zf, f"nodes/{node.topological_index()}/states/{i}/", i)
 * 
 *         if check_header:             # <<<<<<<<<<<<<<
 *             expected = model._header_data(only_decision=False)
 * 
 */
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_check_header); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 320, __pyx_L1_error)
  if (__pyx_t_12) {

    /* "dwave/optimization/model.pyx":321
 * 
 *         if check_header:
 *             expected = model._header_data(only_decision=False)             # <<<<<<<<<<<<<<
 * 
 *             if not expected.items() <= header_data.items():
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_model), __pyx_n_s_header_data); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_only_decision, Py_False) < 0) __PYX_ERR(0, 321, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_v_expected = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "dwave/optimization/model.pyx":323
 *             expected = model._header_data(only_decision=False)
 * 
 *             if not expected.items() <= header_data.items():             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "header data does not match the deserialized CQM. "
 */
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_expected, __pyx_n_s_items); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_3 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    if (unlikely(!__pyx_v_header_data)) { __Pyx_RaiseUnboundLocalError("header_data"); __PYX_ERR(0, 323, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_header_data, __pyx_n_s_items); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
      __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_15, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_17 = (!__pyx_t_12);
    if (unlikely(__pyx_t_17)) {

      /* "dwave/optimization/model.pyx":325
 *             if not expected.items() <= header_data.items():
 *                 raise ValueError(
 *                     "header data does not match the deserialized CQM. "             # <<<<<<<<<<<<<<
 *                     f"Expected {expected!r} to be a subset of {header_data!r}"
 *                     )
 */
      __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_13 = 0;
      __pyx_t_14 = 127;
      __Pyx_INCREF(__pyx_kp_u_header_data_does_not_match_the_d);
      __pyx_t_13 += 58;
      __Pyx_GIVEREF(__pyx_kp_u_header_data_does_not_match_the_d);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_header_data_does_not_match_the_d);

      /* "dwave/optimization/model.pyx":326
 *                 raise ValueError(
 *                     "header data does not match the deserialized CQM. "
 *                     f"Expected {expected!r} to be a subset of {header_data!r}"             # <<<<<<<<<<<<<<
 *                     )
 * 
 */
      __pyx_t_15 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_expected), __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_15);
      __pyx_t_15 = 0;
      __Pyx_INCREF(__pyx_kp_u_to_be_a_subset_of);
      __pyx_t_13 += 19;
      __Pyx_GIVEREF(__pyx_kp_u_to_be_a_subset_of);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_to_be_a_subset_of);
      if (unlikely(!__pyx_v_header_data)) { __Pyx_RaiseUnboundLocalError("header_data"); __PYX_ERR(0, 326, __pyx_L1_error) }
      __pyx_t_15 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_header_data), __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_15);
      __pyx_t_15 = 0;

      /* "dwave/optimization/model.pyx":325
 *             if not expected.items() <= header_data.items():
 *                 raise ValueError(
 *                     "header data does not match the deserialized CQM. "             # <<<<<<<<<<<<<<
 *                     f"Expected {expected!r} to be a subset of {header_data!r}"
 *                     )
 */
      __pyx_t_15 = __Pyx_PyUnicode_Join(__pyx_t_3, 4, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "dwave/optimization/model.pyx":324
 * 
 *             if not expected.items() <= header_data.items():
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "header data does not match the deserialized CQM. "
 *                     f"Expected {expected!r} to be a subset of {header_data!r}"
 */
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 324, __pyx_L1_error)

      /* "dwave/optimization/model.pyx":323
 *             expected = model._header_data(only_decision=False)
 * 
 *             if not expected.items() <= header_data.items():             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "header data does not match the deserialized CQM. "
 */
    }

    /* "dwave/optimization/model.pyx":320
 *                         node._state_from_zipfile(zf, f"nodes/{node.topological_index()}/states/{i}/", i)
 * 
 *         if check_header:             # <<<<<<<<<<<<<<
 *             expected = model._header_data(only_decision=False)
 * 
 */
  }

  /* "dwave/optimization/model.pyx":329
 *                     )
 * 
 *         return model             # <<<<<<<<<<<<<<
 * 
 *     def integer(self, shape=None, lower_bound=None, upper_bound=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_model);
  __pyx_r = ((PyObject *)__pyx_v_model);
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":230
 *         return main, lists
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_file(cls, file, *,
 *                   check_header = True,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_35);
  __Pyx_XDECREF(__pyx_t_36);
  __Pyx_AddTraceback("dwave.optimization.model.Model.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_prefix);
  __Pyx_XDECREF(__pyx_v_read_prefix);
  __Pyx_XDECREF(__pyx_v_version);
  __Pyx_XDECREF(__pyx_v_header_len);
  __Pyx_XDECREF(__pyx_v_header_data);
  __Pyx_XDECREF((PyObject *)__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_zf);
  __Pyx_XDECREF(__pyx_v_model_info);
  __Pyx_XDECREF(__pyx_v_num_nodes);
  __Pyx_XDECREF(__pyx_v_fcls);
  __Pyx_XDECREF(__pyx_v_fadj);
  __Pyx_XDECREF(__pyx_v_lineno);
  __Pyx_XDECREF(__pyx_v_classname);
  __Pyx_XDECREF(__pyx_v_adjlist);
  __Pyx_XDECREF(__pyx_v_node_id);
  __Pyx_XDECREF(__pyx_v_predecessor_ids);
  __Pyx_XDECREF(__pyx_v_predecessors);
  __Pyx_XDECREF(__pyx_v_pid);
  __Pyx_XDECREF(__pyx_v_directory);
  __Pyx_XDECREF(__pyx_v_objective_buff);
  __Pyx_XDECREF(__pyx_v_objective_id);
  __Pyx_XDECREF(__pyx_v_cid);
  __Pyx_XDECREF(__pyx_v_num_states);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_expected);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":331
 *         return model
 * 
 *     def integer(self, shape=None, lower_bound=None, upper_bound=None):             # <<<<<<<<<<<<<<
 *         r"""Create an integer symbol as a decision variable.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_17integer(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_16integer, "Create an integer symbol as a decision variable.\n        \n        Args:\n            shape: Shape of the integer array to create.\n    \n            lower_bound: Lower bound for the symbol, which is the \n                smallest allowed integer value. If None, the default \n                value is used.\n            upper_bound: Upper bound for the symbol, which is the \n                largest allowed integer value. If None, the default \n                value is used.\n                \n        Returns:\n            An integer symbol. \n            \n        Examples:\n            This example creates a :math:`20 \\times 20`-sized integer symbol.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer((20,20), lower_bound=-100, upper_bound=100)\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_17integer = {"integer", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_17integer, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_16integer};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_17integer(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_shape = 0;
  PyObject *__pyx_v_lower_bound = 0;
  PyObject *__pyx_v_upper_bound = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("integer (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_lower_bound,&__pyx_n_s_upper_bound,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_shape);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 331, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lower_bound);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 331, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_upper_bound);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 331, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "integer") < 0)) __PYX_ERR(0, 331, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
    __pyx_v_lower_bound = values[1];
    __pyx_v_upper_bound = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("integer", 0, 0, 3, __pyx_nargs); __PYX_ERR(0, 331, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model.integer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_16integer(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v_shape, __pyx_v_lower_bound, __pyx_v_upper_bound);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_16integer(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_shape, PyObject *__pyx_v_lower_bound, PyObject *__pyx_v_upper_bound) {
  PyObject *__pyx_v_IntegerVariable = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("integer", 1);

  /* "dwave/optimization/model.pyx":354
 *             >>> i = model.integer((20,20), lower_bound=-100, upper_bound=100)
 *         """
 *         from dwave.optimization.symbols import IntegerVariable #avoid circular import             # <<<<<<<<<<<<<<
 *         return IntegerVariable(self, shape, lower_bound, upper_bound)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_IntegerVariable);
  __Pyx_GIVEREF(__pyx_n_s_IntegerVariable);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_IntegerVariable)) __PYX_ERR(0, 354, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_IntegerVariable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_IntegerVariable = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":355
 *         """
 *         from dwave.optimization.symbols import IntegerVariable #avoid circular import
 *         return IntegerVariable(self, shape, lower_bound, upper_bound)             # <<<<<<<<<<<<<<
 * 
 *     def _header_data(self, *, only_decision, max_num_states=float('inf')):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_IntegerVariable);
  __pyx_t_1 = __pyx_v_IntegerVariable; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[5] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_shape, __pyx_v_lower_bound, __pyx_v_upper_bound};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":331
 *         return model
 * 
 *     def integer(self, shape=None, lower_bound=None, upper_bound=None):             # <<<<<<<<<<<<<<
 *         r"""Create an integer symbol as a decision variable.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.Model.integer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_IntegerVariable);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":357
 *         return IntegerVariable(self, shape, lower_bound, upper_bound)
 * 
 *     def _header_data(self, *, only_decision, max_num_states=float('inf')):             # <<<<<<<<<<<<<<
 *         """The header data associated with the model (but not the states)."""
 *         num_nodes = self.num_decisions() if only_decision else self.num_nodes()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_19_header_data(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_18_header_data, "The header data associated with the model (but not the states).");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_19_header_data = {"_header_data", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_19_header_data, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_18_header_data};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_19_header_data(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_only_decision = 0;
  PyObject *__pyx_v_max_num_states = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_header_data (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_only_decision,&__pyx_n_s_max_num_states,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(__pyx_k__16);
    if (likely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_only_decision)) != 0)) {
        (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
        kw_args--;
      }
      else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L3_error)
      else {
        __Pyx_RaiseKeywordRequired("_header_data", __pyx_n_s_only_decision); __PYX_ERR(0, 357, __pyx_L3_error)
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 1;
        PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, 0, "_header_data") < 0)) __PYX_ERR(0, 357, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
      __Pyx_RaiseKeywordRequired("_header_data", __pyx_n_s_only_decision); __PYX_ERR(0, 357, __pyx_L3_error)
    }
    __pyx_v_only_decision = values[0];
    __pyx_v_max_num_states = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_header_data", 1, 0, 0, __pyx_nargs); __PYX_ERR(0, 357, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model._header_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_18_header_data(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v_only_decision, __pyx_v_max_num_states);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_18_header_data(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_only_decision, PyObject *__pyx_v_max_num_states) {
  Py_ssize_t __pyx_v_num_nodes;
  PyObject *__pyx_v_num_states = NULL;
  PyObject *__pyx_v_decision_state_size = NULL;
  PyObject *__pyx_v_state_size = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  long __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_header_data", 1);

  /* "dwave/optimization/model.pyx":359
 *     def _header_data(self, *, only_decision, max_num_states=float('inf')):
 *         """The header data associated with the model (but not the states)."""
 *         num_nodes = self.num_decisions() if only_decision else self.num_nodes()             # <<<<<<<<<<<<<<
 *         num_states = max(0, min(self.states.size(), max_num_states))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_only_decision); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 359, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_1 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_self->__pyx_vtab)->num_decisions(__pyx_v_self, 0);
  } else {
    __pyx_t_1 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_self->__pyx_vtab)->num_nodes(__pyx_v_self, 0);
  }
  __pyx_v_num_nodes = __pyx_t_1;

  /* "dwave/optimization/model.pyx":360
 *         """The header data associated with the model (but not the states)."""
 *         num_nodes = self.num_decisions() if only_decision else self.num_nodes()
 *         num_states = max(0, min(self.states.size(), max_num_states))             # <<<<<<<<<<<<<<
 * 
 *         decision_state_size = self.decision_state_size()
 */
  __Pyx_INCREF(__pyx_v_max_num_states);
  __pyx_t_3 = __pyx_v_max_num_states;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->states->__pyx_vtab)->size(__pyx_v_self->states, 0); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 360, __pyx_L1_error)
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __pyx_t_6;
    __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __pyx_t_5;
    __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_t_4;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_num_states = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "dwave/optimization/model.pyx":362
 *         num_states = max(0, min(self.states.size(), max_num_states))
 * 
 *         decision_state_size = self.decision_state_size()             # <<<<<<<<<<<<<<
 *         state_size = decision_state_size if only_decision else self.state_size()
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_decision_state_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_8 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_decision_state_size = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "dwave/optimization/model.pyx":363
 * 
 *         decision_state_size = self.decision_state_size()
 *         state_size = decision_state_size if only_decision else self.state_size()             # <<<<<<<<<<<<<<
 * 
 *         return dict(
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_only_decision); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 363, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_decision_state_size);
    __pyx_t_3 = __pyx_v_decision_state_size;
  } else {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_state_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_state_size = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "dwave/optimization/model.pyx":365
 *         state_size = decision_state_size if only_decision else self.state_size()
 * 
 *         return dict(             # <<<<<<<<<<<<<<
 *             decision_state_size=decision_state_size,
 *             num_nodes=num_nodes,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "dwave/optimization/model.pyx":366
 * 
 *         return dict(
 *             decision_state_size=decision_state_size,             # <<<<<<<<<<<<<<
 *             num_nodes=num_nodes,
 *             state_size=state_size,
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_decision_state_size, __pyx_v_decision_state_size) < 0) __PYX_ERR(0, 366, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":367
 *         return dict(
 *             decision_state_size=decision_state_size,
 *             num_nodes=num_nodes,             # <<<<<<<<<<<<<<
 *             state_size=state_size,
 *             num_states=num_states,
 */
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_num_nodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_num_nodes, __pyx_t_4) < 0) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":368
 *             decision_state_size=decision_state_size,
 *             num_nodes=num_nodes,
 *             state_size=state_size,             # <<<<<<<<<<<<<<
 *             num_states=num_states,
 *         )
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_state_size, __pyx_v_state_size) < 0) __PYX_ERR(0, 366, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":369
 *             num_nodes=num_nodes,
 *             state_size=state_size,
 *             num_states=num_states,             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_num_states, __pyx_v_num_states) < 0) __PYX_ERR(0, 366, __pyx_L1_error)
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":357
 *         return IntegerVariable(self, shape, lower_bound, upper_bound)
 * 
 *     def _header_data(self, *, only_decision, max_num_states=float('inf')):             # <<<<<<<<<<<<<<
 *         """The header data associated with the model (but not the states)."""
 *         num_nodes = self.num_decisions() if only_decision else self.num_nodes()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("dwave.optimization.model.Model._header_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_num_states);
  __Pyx_XDECREF(__pyx_v_decision_state_size);
  __Pyx_XDECREF(__pyx_v_state_size);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":372
 *         )
 * 
 *     def into_file(self, file, *,             # <<<<<<<<<<<<<<
 *                   Py_ssize_t max_num_states = 0,
 *                   bool only_decision = False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_21into_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_20into_file, "Serialize the model into an existing file.\n\n        Args:\n            file:\n                File pointer to an existing writeable, seekable \n                file-like object encoding a model. Strings are \n                interpreted as a file name.\n            max_num_states:\n                Maximum number of states to serialize along with the model.\n                The number of states serialized is\n                ``min(model.states.size(), max_num_states)``.\n            only_decision:\n                If ``True``, only decision variables are serialized.\n                If ``False``, all symbols are serialized.\n                \n        See also:\n            :meth:`.from_file`, :meth:`.to_file`\n\n        TODO: describe the format\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_21into_file = {"into_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_21into_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_20into_file};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_21into_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_file = 0;
  Py_ssize_t __pyx_v_max_num_states;
  bool __pyx_v_only_decision;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("into_file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,&__pyx_n_s_max_num_states,&__pyx_n_s_only_decision,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_file)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 1; index < 3 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "into_file") < 0)) __PYX_ERR(0, 372, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_file = values[0];
    if (values[1]) {
      __pyx_v_max_num_states = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_max_num_states == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L3_error)
    } else {
      __pyx_v_max_num_states = ((Py_ssize_t)0);
    }
    if (values[2]) {
      __pyx_v_only_decision = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_only_decision == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 374, __pyx_L3_error)
    } else {

      /* "dwave/optimization/model.pyx":374
 *     def into_file(self, file, *,
 *                   Py_ssize_t max_num_states = 0,
 *                   bool only_decision = False,             # <<<<<<<<<<<<<<
 *                   ):
 *         """Serialize the model into an existing file.
 */
      __pyx_v_only_decision = ((bool)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("into_file", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 372, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model.into_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_20into_file(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v_file, __pyx_v_max_num_states, __pyx_v_only_decision);

  /* "dwave/optimization/model.pyx":372
 *         )
 * 
 *     def into_file(self, file, *,             # <<<<<<<<<<<<<<
 *                   Py_ssize_t max_num_states = 0,
 *                   bool only_decision = False,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_20into_file(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_file, Py_ssize_t __pyx_v_max_num_states, bool __pyx_v_only_decision) {
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_version = NULL;
  PyObject *__pyx_v_model_info = NULL;
  PyObject *__pyx_v_num_states = NULL;
  PyObject *__pyx_v_encoder = NULL;
  PyObject *__pyx_v_header_data = NULL;
  PyObject *__pyx_v_padding = NULL;
  PyObject *__pyx_v_zf = NULL;
  Py_ssize_t __pyx_v_stop;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_pred = NULL;
  PyObject *__pyx_v_directory = NULL;
  PyObject *__pyx_v_constraints = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *(*__pyx_t_20)(PyObject *);
  PyObject *__pyx_t_21 = NULL;
  PyObject *(*__pyx_t_22)(PyObject *);
  PyObject *__pyx_t_23 = NULL;
  Py_UCS4 __pyx_t_24;
  int __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("into_file", 1);

  /* "dwave/optimization/model.pyx":396
 *         TODO: describe the format
 *         """
 *         if not self.is_locked():             # <<<<<<<<<<<<<<
 *             # lock for the duration of the method
 *             with self.lock():
 */
  __pyx_t_1 = (!(((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_self->__pyx_vtab)->is_locked(__pyx_v_self, 0) != 0));
  if (__pyx_t_1) {

    /* "dwave/optimization/model.pyx":398
 *         if not self.is_locked():
 *             # lock for the duration of the method
 *             with self.lock():             # <<<<<<<<<<<<<<
 *                 return self.into_file(file, max_num_states=max_num_states, only_decision=only_decision)
 * 
 */
    /*with:*/ {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_lock); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 398, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 398, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 398, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 398, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 398, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_10);
          /*try:*/ {

            /* "dwave/optimization/model.pyx":399
 *             # lock for the duration of the method
 *             with self.lock():
 *                 return self.into_file(file, max_num_states=max_num_states, only_decision=only_decision)             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(file, str):
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_into_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 399, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 399, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_INCREF(__pyx_v_file);
            __Pyx_GIVEREF(__pyx_v_file);
            if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_file)) __PYX_ERR(0, 399, __pyx_L8_error);
            __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 399, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_max_num_states); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 399, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_7);
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_max_num_states, __pyx_t_7) < 0) __PYX_ERR(0, 399, __pyx_L8_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_only_decision); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 399, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_7);
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_only_decision, __pyx_t_7) < 0) __PYX_ERR(0, 399, __pyx_L8_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 399, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_r = __pyx_t_7;
            __pyx_t_7 = 0;
            goto __pyx_L12_try_return;

            /* "dwave/optimization/model.pyx":398
 *         if not self.is_locked():
 *             # lock for the duration of the method
 *             with self.lock():             # <<<<<<<<<<<<<<
 *                 return self.into_file(file, max_num_states=max_num_states, only_decision=only_decision)
 * 
 */
          }
          __pyx_L8_error:;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("dwave.optimization.model.Model.into_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_4, &__pyx_t_3) < 0) __PYX_ERR(0, 398, __pyx_L10_except_error)
            __Pyx_XGOTREF(__pyx_t_7);
            __Pyx_XGOTREF(__pyx_t_4);
            __Pyx_XGOTREF(__pyx_t_3);
            __pyx_t_2 = PyTuple_Pack(3, __pyx_t_7, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 398, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 398, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (__pyx_t_1 < 0) __PYX_ERR(0, 398, __pyx_L10_except_error)
            __pyx_t_12 = (!__pyx_t_1);
            if (unlikely(__pyx_t_12)) {
              __Pyx_GIVEREF(__pyx_t_7);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_3);
              __Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_4, __pyx_t_3);
              __pyx_t_7 = 0; __pyx_t_4 = 0; __pyx_t_3 = 0; 
              __PYX_ERR(0, 398, __pyx_L10_except_error)
            }
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            goto __pyx_L9_exception_handled;
          }
          __pyx_L10_except_error:;
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          goto __pyx_L1_error;
          __pyx_L12_try_return:;
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          goto __pyx_L5_return;
          __pyx_L9_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_6) {
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__4, NULL);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 398, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          goto __pyx_L7;
        }
        __pyx_L5_return: {
          __pyx_t_10 = __pyx_r;
          __pyx_r = 0;
          if (__pyx_t_6) {
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__4, NULL);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 398, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __pyx_r = __pyx_t_10;
          __pyx_t_10 = 0;
          goto __pyx_L0;
        }
        __pyx_L7:;
      }
      goto __pyx_L17;
      __pyx_L4_error:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L1_error;
      __pyx_L17:;
    }

    /* "dwave/optimization/model.pyx":396
 *         TODO: describe the format
 *         """
 *         if not self.is_locked():             # <<<<<<<<<<<<<<
 *             # lock for the duration of the method
 *             with self.lock():
 */
  }

  /* "dwave/optimization/model.pyx":401
 *                 return self.into_file(file, max_num_states=max_num_states, only_decision=only_decision)
 * 
 *         if isinstance(file, str):             # <<<<<<<<<<<<<<
 *             with open(file, "wb") as f:
 *                 return self.into_file(
 */
  __pyx_t_12 = PyUnicode_Check(__pyx_v_file); 
  if (__pyx_t_12) {

    /* "dwave/optimization/model.pyx":402
 * 
 *         if isinstance(file, str):
 *             with open(file, "wb") as f:             # <<<<<<<<<<<<<<
 *                 return self.into_file(
 *                     f,
 */
    /*with:*/ {
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_file);
      __Pyx_GIVEREF(__pyx_v_file);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_file)) __PYX_ERR(0, 402, __pyx_L1_error);
      __Pyx_INCREF(__pyx_n_u_wb);
      __Pyx_GIVEREF(__pyx_n_u_wb);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_u_wb)) __PYX_ERR(0, 402, __pyx_L1_error);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_enter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 402, __pyx_L19_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L19_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __pyx_t_7 = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_8);
          /*try:*/ {
            __pyx_v_f = __pyx_t_7;
            __pyx_t_7 = 0;

            /* "dwave/optimization/model.pyx":403
 *         if isinstance(file, str):
 *             with open(file, "wb") as f:
 *                 return self.into_file(             # <<<<<<<<<<<<<<
 *                     f,
 *                     max_num_states=max_num_states,
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_into_file); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 403, __pyx_L23_error)
            __Pyx_GOTREF(__pyx_t_7);

            /* "dwave/optimization/model.pyx":404
 *             with open(file, "wb") as f:
 *                 return self.into_file(
 *                     f,             # <<<<<<<<<<<<<<
 *                     max_num_states=max_num_states,
 *                     only_decision=only_decision,
 */
            __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L23_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_INCREF(__pyx_v_f);
            __Pyx_GIVEREF(__pyx_v_f);
            if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_f)) __PYX_ERR(0, 403, __pyx_L23_error);

            /* "dwave/optimization/model.pyx":405
 *                 return self.into_file(
 *                     f,
 *                     max_num_states=max_num_states,             # <<<<<<<<<<<<<<
 *                     only_decision=only_decision,
 *                     )
 */
            __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 405, __pyx_L23_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_max_num_states); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 405, __pyx_L23_error)
            __Pyx_GOTREF(__pyx_t_2);
            if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_max_num_states, __pyx_t_2) < 0) __PYX_ERR(0, 405, __pyx_L23_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "dwave/optimization/model.pyx":406
 *                     f,
 *                     max_num_states=max_num_states,
 *                     only_decision=only_decision,             # <<<<<<<<<<<<<<
 *                     )
 * 
 */
            __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_only_decision); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L23_error)
            __Pyx_GOTREF(__pyx_t_2);
            if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_only_decision, __pyx_t_2) < 0) __PYX_ERR(0, 405, __pyx_L23_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "dwave/optimization/model.pyx":403
 *         if isinstance(file, str):
 *             with open(file, "wb") as f:
 *                 return self.into_file(             # <<<<<<<<<<<<<<
 *                     f,
 *                     max_num_states=max_num_states,
 */
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L23_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_r = __pyx_t_2;
            __pyx_t_2 = 0;
            goto __pyx_L27_try_return;

            /* "dwave/optimization/model.pyx":402
 * 
 *         if isinstance(file, str):
 *             with open(file, "wb") as f:             # <<<<<<<<<<<<<<
 *                 return self.into_file(
 *                     f,
 */
          }
          __pyx_L23_error:;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("dwave.optimization.model.Model.into_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4) < 0) __PYX_ERR(0, 402, __pyx_L25_except_error)
            __Pyx_XGOTREF(__pyx_t_2);
            __Pyx_XGOTREF(__pyx_t_3);
            __Pyx_XGOTREF(__pyx_t_4);
            __pyx_t_7 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 402, __pyx_L25_except_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 402, __pyx_L25_except_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (__pyx_t_12 < 0) __PYX_ERR(0, 402, __pyx_L25_except_error)
            __pyx_t_1 = (!__pyx_t_12);
            if (unlikely(__pyx_t_1)) {
              __Pyx_GIVEREF(__pyx_t_2);
              __Pyx_GIVEREF(__pyx_t_3);
              __Pyx_XGIVEREF(__pyx_t_4);
              __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_3, __pyx_t_4);
              __pyx_t_2 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; 
              __PYX_ERR(0, 402, __pyx_L25_except_error)
            }
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            goto __pyx_L24_exception_handled;
          }
          __pyx_L25_except_error:;
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
          goto __pyx_L1_error;
          __pyx_L27_try_return:;
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
          goto __pyx_L20_return;
          __pyx_L24_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_6) {
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__4, NULL);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 402, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          goto __pyx_L22;
        }
        __pyx_L20_return: {
          __pyx_t_8 = __pyx_r;
          __pyx_r = 0;
          if (__pyx_t_6) {
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__4, NULL);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 402, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __pyx_r = __pyx_t_8;
          __pyx_t_8 = 0;
          goto __pyx_L0;
        }
        __pyx_L22:;
      }
      goto __pyx_L32;
      __pyx_L19_error:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L1_error;
      __pyx_L32:;
    }

    /* "dwave/optimization/model.pyx":401
 *                 return self.into_file(file, max_num_states=max_num_states, only_decision=only_decision)
 * 
 *         if isinstance(file, str):             # <<<<<<<<<<<<<<
 *             with open(file, "wb") as f:
 *                 return self.into_file(
 */
  }

  /* "dwave/optimization/model.pyx":409
 *                     )
 * 
 *         version = (0, 1)             # <<<<<<<<<<<<<<
 * 
 *         model_info = self._header_data(max_num_states=max_num_states, only_decision=only_decision)
 */
  __Pyx_INCREF(__pyx_tuple__17);
  __pyx_v_version = __pyx_tuple__17;

  /* "dwave/optimization/model.pyx":411
 *         version = (0, 1)
 * 
 *         model_info = self._header_data(max_num_states=max_num_states, only_decision=only_decision)             # <<<<<<<<<<<<<<
 *         num_states = model_info["num_states"]
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_header_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_max_num_states); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_max_num_states, __pyx_t_2) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_only_decision); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_only_decision, __pyx_t_2) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_model_info = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":412
 * 
 *         model_info = self._header_data(max_num_states=max_num_states, only_decision=only_decision)
 *         num_states = model_info["num_states"]             # <<<<<<<<<<<<<<
 * 
 *         encoder = json.JSONEncoder(separators=(',', ':'))
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_model_info, __pyx_n_u_num_states); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_num_states = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":414
 *         num_states = model_info["num_states"]
 * 
 *         encoder = json.JSONEncoder(separators=(',', ':'))             # <<<<<<<<<<<<<<
 * 
 *         # First prepend the header
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_json); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_JSONEncoder); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_separators, __pyx_tuple__20) < 0) __PYX_ERR(0, 414, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_encoder = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":419
 * 
 *         # The first 4 bytes are DWNL
 *         file.write(b"DWNL")             # <<<<<<<<<<<<<<
 * 
 *         # The next 1 byte is an unsigned byte encoding the major version of the
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_b_DWNL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":425
 *         # The next 1 byte is an unsigned byte encoding the minor version of the
 *         # file format
 *         file.write(bytes(version))             # <<<<<<<<<<<<<<
 * 
 *         # The next 4 bytes form a little-endian unsigned int, the length of
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_version); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":432
 *         # The next `HEADER_LEN` bytes form the header data. This will be `data`
 *         # json-serialized and encoded with 'ascii'.
 *         header_data = encoder.encode(model_info).encode("ascii")             # <<<<<<<<<<<<<<
 * 
 *         # Now pad to make the entire header divisible by 64
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_encoder, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_model_info};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_u_ascii};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_header_data = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":435
 * 
 *         # Now pad to make the entire header divisible by 64
 *         padding = b' '*(64 - (len(header_data) + 4 + 2 + 4)  % 64)             # <<<<<<<<<<<<<<
 * 
 *         file.write(struct.pack('<I', len(header_data) + len(padding)))  # header length
 */
  __pyx_t_13 = PyObject_Length(__pyx_v_header_data); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 435, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PySequence_Multiply(__pyx_kp_b__8, (64 - __Pyx_mod_Py_ssize_t((((__pyx_t_13 + 4) + 2) + 4), 64))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_padding = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":437
 *         padding = b' '*(64 - (len(header_data) + 4 + 2 + 4)  % 64)
 * 
 *         file.write(struct.pack('<I', len(header_data) + len(padding)))  # header length             # <<<<<<<<<<<<<<
 *         file.write(header_data)
 *         file.write(padding)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_struct); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_pack); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_13 = PyObject_Length(__pyx_v_header_data); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 437, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyBytes_GET_SIZE(__pyx_v_padding); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 437, __pyx_L1_error)
  __pyx_t_7 = PyInt_FromSsize_t((__pyx_t_13 + __pyx_t_15)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_16 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_16, __pyx_kp_u_I, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __pyx_t_14 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_t_2};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":438
 * 
 *         file.write(struct.pack('<I', len(header_data) + len(padding)))  # header length
 *         file.write(header_data)             # <<<<<<<<<<<<<<
 *         file.write(padding)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_header_data};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":439
 *         file.write(struct.pack('<I', len(header_data) + len(padding)))  # header length
 *         file.write(header_data)
 *         file.write(padding)             # <<<<<<<<<<<<<<
 * 
 *         # The rest of it is a zipfile
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_padding};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":442
 * 
 *         # The rest of it is a zipfile
 *         with zipfile.ZipFile(file, mode="w") as zf:             # <<<<<<<<<<<<<<
 *             zf.writestr("info.json", encoder.encode(model_info))
 *             zf.writestr("version.txt", ".".join(map(str, version)))
 */
  /*with:*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_zipfile); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ZipFile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_file);
    __Pyx_GIVEREF(__pyx_v_file);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_file)) __PYX_ERR(0, 442, __pyx_L1_error);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_mode, __pyx_n_u_w) < 0) __PYX_ERR(0, 442, __pyx_L1_error)
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_14, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_14, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 442, __pyx_L33_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_4 = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {
          __pyx_v_zf = __pyx_t_4;
          __pyx_t_4 = 0;

          /* "dwave/optimization/model.pyx":443
 *         # The rest of it is a zipfile
 *         with zipfile.ZipFile(file, mode="w") as zf:
 *             zf.writestr("info.json", encoder.encode(model_info))             # <<<<<<<<<<<<<<
 *             zf.writestr("version.txt", ".".join(map(str, version)))
 * 
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_writestr); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 443, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_encoder, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = NULL;
          __pyx_t_5 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_5 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_model_info};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_t_3 = NULL;
          __pyx_t_5 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
              __pyx_t_5 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_kp_u_info_json, __pyx_t_2};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "dwave/optimization/model.pyx":444
 *         with zipfile.ZipFile(file, mode="w") as zf:
 *             zf.writestr("info.json", encoder.encode(model_info))
 *             zf.writestr("version.txt", ".".join(map(str, version)))             # <<<<<<<<<<<<<<
 * 
 *             # Do three passes over the nodes
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_writestr); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 444, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_INCREF((PyObject *)(&PyUnicode_Type));
          __Pyx_GIVEREF((PyObject *)(&PyUnicode_Type));
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&PyUnicode_Type)))) __PYX_ERR(0, 444, __pyx_L37_error);
          __Pyx_INCREF(__pyx_v_version);
          __Pyx_GIVEREF(__pyx_v_version);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_version)) __PYX_ERR(0, 444, __pyx_L37_error);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 444, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyUnicode_Join(__pyx_kp_u__3, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = NULL;
          __pyx_t_5 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
              __pyx_t_5 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_kp_u_version_txt, __pyx_t_2};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 444, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "dwave/optimization/model.pyx":451
 *             # We know that we're topologically sorted so the first num_decisions are
 *             # exactly the decision variables.
 *             stop = self.num_decisions() if only_decision else self.num_nodes()             # <<<<<<<<<<<<<<
 * 
 *             # On the first pass we made a nodetypes.txt file that has the node names
 */
          __pyx_t_1 = (__pyx_v_only_decision != 0);
          if (__pyx_t_1) {
            __pyx_t_15 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_self->__pyx_vtab)->num_decisions(__pyx_v_self, 0);
          } else {
            __pyx_t_15 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_self->__pyx_vtab)->num_nodes(__pyx_v_self, 0);
          }
          __pyx_v_stop = __pyx_t_15;

          /* "dwave/optimization/model.pyx":454
 * 
 *             # On the first pass we made a nodetypes.txt file that has the node names
 *             with zf.open("nodetypes.txt", "w", force_zip64=True) as f:             # <<<<<<<<<<<<<<
 *                 for node in itertools.islice(self.iter_symbols(), 0, stop):
 *                     f.write(type(node).__name__.encode("UTF-8"))
 */
          /*with:*/ {
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_open); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 454, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 454, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_14);
            if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_force_zip64, Py_True) < 0) __PYX_ERR(0, 454, __pyx_L37_error)
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__21, __pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_11 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 454, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 454, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_3 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
              __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 454, __pyx_L43_error)
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __pyx_t_4 = __pyx_t_14;
            __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            /*try:*/ {
              {
                __Pyx_PyThreadState_declare
                __Pyx_PyThreadState_assign
                __Pyx_ExceptionSave(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
                __Pyx_XGOTREF(__pyx_t_17);
                __Pyx_XGOTREF(__pyx_t_18);
                __Pyx_XGOTREF(__pyx_t_19);
                /*try:*/ {
                  __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_4);
                  __pyx_t_4 = 0;

                  /* "dwave/optimization/model.pyx":455
 *             # On the first pass we made a nodetypes.txt file that has the node names
 *             with zf.open("nodetypes.txt", "w", force_zip64=True) as f:
 *                 for node in itertools.islice(self.iter_symbols(), 0, stop):             # <<<<<<<<<<<<<<
 *                     f.write(type(node).__name__.encode("UTF-8"))
 *                     f.write(b"\n")
 */
                  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_itertools); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 455, __pyx_L47_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_islice); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 455, __pyx_L47_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_symbols); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 455, __pyx_L47_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_7 = NULL;
                  __pyx_t_5 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_7)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_7);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                      __pyx_t_5 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
                    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
                    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 455, __pyx_L47_error)
                    __Pyx_GOTREF(__pyx_t_2);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  }
                  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_stop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 455, __pyx_L47_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_7 = NULL;
                  __pyx_t_5 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (unlikely(PyMethod_Check(__pyx_t_14))) {
                    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_14);
                    if (likely(__pyx_t_7)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
                      __Pyx_INCREF(__pyx_t_7);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_14, function);
                      __pyx_t_5 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[4] = {__pyx_t_7, __pyx_t_2, __pyx_int_0, __pyx_t_3};
                    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_5, 3+__pyx_t_5);
                    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 455, __pyx_L47_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                  }
                  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
                    __pyx_t_14 = __pyx_t_4; __Pyx_INCREF(__pyx_t_14);
                    __pyx_t_15 = 0;
                    __pyx_t_20 = NULL;
                  } else {
                    __pyx_t_15 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 455, __pyx_L47_error)
                    __Pyx_GOTREF(__pyx_t_14);
                    __pyx_t_20 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_14); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 455, __pyx_L47_error)
                  }
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  for (;;) {
                    if (likely(!__pyx_t_20)) {
                      if (likely(PyList_CheckExact(__pyx_t_14))) {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_14);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 455, __pyx_L47_error)
                          #endif
                          if (__pyx_t_15 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_15); __Pyx_INCREF(__pyx_t_4); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 455, __pyx_L47_error)
                        #else
                        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_14, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 455, __pyx_L47_error)
                        __Pyx_GOTREF(__pyx_t_4);
                        #endif
                      } else {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_14);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 455, __pyx_L47_error)
                          #endif
                          if (__pyx_t_15 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_15); __Pyx_INCREF(__pyx_t_4); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 455, __pyx_L47_error)
                        #else
                        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_14, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 455, __pyx_L47_error)
                        __Pyx_GOTREF(__pyx_t_4);
                        #endif
                      }
                    } else {
                      __pyx_t_4 = __pyx_t_20(__pyx_t_14);
                      if (unlikely(!__pyx_t_4)) {
                        PyObject* exc_type = PyErr_Occurred();
                        if (exc_type) {
                          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                          else __PYX_ERR(0, 455, __pyx_L47_error)
                        }
                        break;
                      }
                      __Pyx_GOTREF(__pyx_t_4);
                    }
                    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_4);
                    __pyx_t_4 = 0;

                    /* "dwave/optimization/model.pyx":456
 *             with zf.open("nodetypes.txt", "w", force_zip64=True) as f:
 *                 for node in itertools.islice(self.iter_symbols(), 0, stop):
 *                     f.write(type(node).__name__.encode("UTF-8"))             # <<<<<<<<<<<<<<
 *                     f.write(b"\n")
 * 
 */
                    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L47_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_v_node)), __pyx_n_s_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 456, __pyx_L47_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_encode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 456, __pyx_L47_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_7 = NULL;
                    __pyx_t_5 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_16))) {
                      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_16);
                      if (likely(__pyx_t_7)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                        __Pyx_INCREF(__pyx_t_7);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_16, function);
                        __pyx_t_5 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_kp_u_UTF_8};
                      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
                      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L47_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    }
                    __pyx_t_16 = NULL;
                    __pyx_t_5 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_3))) {
                      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_3);
                      if (likely(__pyx_t_16)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                        __Pyx_INCREF(__pyx_t_16);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_3, function);
                        __pyx_t_5 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_2};
                      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
                      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 456, __pyx_L47_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    }
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                    /* "dwave/optimization/model.pyx":457
 *                 for node in itertools.islice(self.iter_symbols(), 0, stop):
 *                     f.write(type(node).__name__.encode("UTF-8"))
 *                     f.write(b"\n")             # <<<<<<<<<<<<<<
 * 
 *             # On the second pass we encode the adjacency
 */
                    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L47_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_2 = NULL;
                    __pyx_t_5 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_3))) {
                      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                      if (likely(__pyx_t_2)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                        __Pyx_INCREF(__pyx_t_2);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_3, function);
                        __pyx_t_5 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_b__12};
                      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
                      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 457, __pyx_L47_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    }
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                    /* "dwave/optimization/model.pyx":455
 *             # On the first pass we made a nodetypes.txt file that has the node names
 *             with zf.open("nodetypes.txt", "w", force_zip64=True) as f:
 *                 for node in itertools.islice(self.iter_symbols(), 0, stop):             # <<<<<<<<<<<<<<
 *                     f.write(type(node).__name__.encode("UTF-8"))
 *                     f.write(b"\n")
 */
                  }
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

                  /* "dwave/optimization/model.pyx":454
 * 
 *             # On the first pass we made a nodetypes.txt file that has the node names
 *             with zf.open("nodetypes.txt", "w", force_zip64=True) as f:             # <<<<<<<<<<<<<<
 *                 for node in itertools.islice(self.iter_symbols(), 0, stop):
 *                     f.write(type(node).__name__.encode("UTF-8"))
 */
                }
                __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
                goto __pyx_L52_try_end;
                __pyx_L47_error:;
                __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                /*except:*/ {
                  __Pyx_AddTraceback("dwave.optimization.model.Model.into_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  if (__Pyx_GetException(&__pyx_t_14, &__pyx_t_4, &__pyx_t_3) < 0) __PYX_ERR(0, 454, __pyx_L49_except_error)
                  __Pyx_XGOTREF(__pyx_t_14);
                  __Pyx_XGOTREF(__pyx_t_4);
                  __Pyx_XGOTREF(__pyx_t_3);
                  __pyx_t_2 = PyTuple_Pack(3, __pyx_t_14, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L49_except_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_2, NULL);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 454, __pyx_L49_except_error)
                  __Pyx_GOTREF(__pyx_t_21);
                  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_21);
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  if (__pyx_t_1 < 0) __PYX_ERR(0, 454, __pyx_L49_except_error)
                  __pyx_t_12 = (!__pyx_t_1);
                  if (unlikely(__pyx_t_12)) {
                    __Pyx_GIVEREF(__pyx_t_14);
                    __Pyx_GIVEREF(__pyx_t_4);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ErrRestoreWithState(__pyx_t_14, __pyx_t_4, __pyx_t_3);
                    __pyx_t_14 = 0; __pyx_t_4 = 0; __pyx_t_3 = 0; 
                    __PYX_ERR(0, 454, __pyx_L49_except_error)
                  }
                  __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                  goto __pyx_L48_exception_handled;
                }
                __pyx_L49_except_error:;
                __Pyx_XGIVEREF(__pyx_t_17);
                __Pyx_XGIVEREF(__pyx_t_18);
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
                goto __pyx_L37_error;
                __pyx_L48_exception_handled:;
                __Pyx_XGIVEREF(__pyx_t_17);
                __Pyx_XGIVEREF(__pyx_t_18);
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
                __pyx_L52_try_end:;
              }
            }
            /*finally:*/ {
              /*normal exit:*/{
                if (__pyx_t_11) {
                  __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__4, NULL);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 454, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_19);
                  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                }
                goto __pyx_L46;
              }
              __pyx_L46:;
            }
            goto __pyx_L59;
            __pyx_L43_error:;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            goto __pyx_L37_error;
            __pyx_L59:;
          }

          /* "dwave/optimization/model.pyx":460
 * 
 *             # On the second pass we encode the adjacency
 *             with zf.open("adj.adjlist", "w", force_zip64=True) as f:             # <<<<<<<<<<<<<<
 *                 # We don't actually need to make the Python symbols here, but it's convenient
 *                 # Also, if we're only_decision then there will never be predecessors, but
 */
          /*with:*/ {
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_open); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_force_zip64, Py_True) < 0) __PYX_ERR(0, 460, __pyx_L37_error)
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__22, __pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 460, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_11 = __Pyx_PyObject_LookupSpecial(__pyx_t_14, __pyx_n_s_exit); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 460, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_14, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L60_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
              __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L60_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
            __pyx_t_3 = __pyx_t_4;
            __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            /*try:*/ {
              {
                __Pyx_PyThreadState_declare
                __Pyx_PyThreadState_assign
                __Pyx_ExceptionSave(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
                __Pyx_XGOTREF(__pyx_t_19);
                __Pyx_XGOTREF(__pyx_t_18);
                __Pyx_XGOTREF(__pyx_t_17);
                /*try:*/ {
                  __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_3);
                  __pyx_t_3 = 0;

                  /* "dwave/optimization/model.pyx":464
 *                 # Also, if we're only_decision then there will never be predecessors, but
 *                 # let's reuse the code for now.
 *                 stop = self.num_decisions() if only_decision else self.num_nodes()             # <<<<<<<<<<<<<<
 *                 for node in itertools.islice(self.iter_symbols(), 0, stop):
 *                     f.write(f"{node.topological_index()}".encode("UTF-8"))
 */
                  __pyx_t_12 = (__pyx_v_only_decision != 0);
                  if (__pyx_t_12) {
                    __pyx_t_15 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_self->__pyx_vtab)->num_decisions(__pyx_v_self, 0);
                  } else {
                    __pyx_t_15 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_self->__pyx_vtab)->num_nodes(__pyx_v_self, 0);
                  }
                  __pyx_v_stop = __pyx_t_15;

                  /* "dwave/optimization/model.pyx":465
 *                 # let's reuse the code for now.
 *                 stop = self.num_decisions() if only_decision else self.num_nodes()
 *                 for node in itertools.islice(self.iter_symbols(), 0, stop):             # <<<<<<<<<<<<<<
 *                     f.write(f"{node.topological_index()}".encode("UTF-8"))
 *                     for pred in node.iter_predecessors():
 */
                  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_itertools); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 465, __pyx_L64_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_islice); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 465, __pyx_L64_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_symbols); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L64_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_16 = NULL;
                  __pyx_t_5 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (likely(PyMethod_Check(__pyx_t_2))) {
                    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_2);
                    if (likely(__pyx_t_16)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                      __Pyx_INCREF(__pyx_t_16);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_2, function);
                      __pyx_t_5 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_16, NULL};
                    __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
                    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                    if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 465, __pyx_L64_error)
                    __Pyx_GOTREF(__pyx_t_14);
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  }
                  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L64_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_16 = NULL;
                  __pyx_t_5 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (unlikely(PyMethod_Check(__pyx_t_4))) {
                    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_4);
                    if (likely(__pyx_t_16)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                      __Pyx_INCREF(__pyx_t_16);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_4, function);
                      __pyx_t_5 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[4] = {__pyx_t_16, __pyx_t_14, __pyx_int_0, __pyx_t_2};
                    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 3+__pyx_t_5);
                    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 465, __pyx_L64_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  }
                  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
                    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4);
                    __pyx_t_15 = 0;
                    __pyx_t_20 = NULL;
                  } else {
                    __pyx_t_15 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 465, __pyx_L64_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __pyx_t_20 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 465, __pyx_L64_error)
                  }
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  for (;;) {
                    if (likely(!__pyx_t_20)) {
                      if (likely(PyList_CheckExact(__pyx_t_4))) {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 465, __pyx_L64_error)
                          #endif
                          if (__pyx_t_15 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_15); __Pyx_INCREF(__pyx_t_3); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 465, __pyx_L64_error)
                        #else
                        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 465, __pyx_L64_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        #endif
                      } else {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 465, __pyx_L64_error)
                          #endif
                          if (__pyx_t_15 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_15); __Pyx_INCREF(__pyx_t_3); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 465, __pyx_L64_error)
                        #else
                        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 465, __pyx_L64_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        #endif
                      }
                    } else {
                      __pyx_t_3 = __pyx_t_20(__pyx_t_4);
                      if (unlikely(!__pyx_t_3)) {
                        PyObject* exc_type = PyErr_Occurred();
                        if (exc_type) {
                          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                          else __PYX_ERR(0, 465, __pyx_L64_error)
                        }
                        break;
                      }
                      __Pyx_GOTREF(__pyx_t_3);
                    }
                    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_3);
                    __pyx_t_3 = 0;

                    /* "dwave/optimization/model.pyx":466
 *                 stop = self.num_decisions() if only_decision else self.num_nodes()
 *                 for node in itertools.islice(self.iter_symbols(), 0, stop):
 *                     f.write(f"{node.topological_index()}".encode("UTF-8"))             # <<<<<<<<<<<<<<
 *                     for pred in node.iter_predecessors():
 *                         f.write(f" {pred.topological_index()}".encode("UTF-8"))
 */
                    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 466, __pyx_L64_error)
                    __Pyx_GOTREF(__pyx_t_2);
                    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_topological_index); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 466, __pyx_L64_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __pyx_t_7 = NULL;
                    __pyx_t_5 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_16))) {
                      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_16);
                      if (likely(__pyx_t_7)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                        __Pyx_INCREF(__pyx_t_7);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_16, function);
                        __pyx_t_5 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
                      __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
                      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                      if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 466, __pyx_L64_error)
                      __Pyx_GOTREF(__pyx_t_14);
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    }
                    __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_t_14, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 466, __pyx_L64_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                    __pyx_t_14 = PyUnicode_AsUTF8String(((PyObject*)__pyx_t_16)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 466, __pyx_L64_error)
                    __Pyx_GOTREF(__pyx_t_14);
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __pyx_t_16 = NULL;
                    __pyx_t_5 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_2))) {
                      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_2);
                      if (likely(__pyx_t_16)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                        __Pyx_INCREF(__pyx_t_16);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_2, function);
                        __pyx_t_5 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_14};
                      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
                      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 466, __pyx_L64_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                    }
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                    /* "dwave/optimization/model.pyx":467
 *                 for node in itertools.islice(self.iter_symbols(), 0, stop):
 *                     f.write(f"{node.topological_index()}".encode("UTF-8"))
 *                     for pred in node.iter_predecessors():             # <<<<<<<<<<<<<<
 *                         f.write(f" {pred.topological_index()}".encode("UTF-8"))
 *                     f.write(b"\n")
 */
                    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_iter_predecessors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L64_error)
                    __Pyx_GOTREF(__pyx_t_2);
                    __pyx_t_14 = NULL;
                    __pyx_t_5 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_2))) {
                      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
                      if (likely(__pyx_t_14)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                        __Pyx_INCREF(__pyx_t_14);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_2, function);
                        __pyx_t_5 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_14, NULL};
                      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
                      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L64_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                    }
                    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
                      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
                      __pyx_t_13 = 0;
                      __pyx_t_22 = NULL;
                    } else {
                      __pyx_t_13 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L64_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      __pyx_t_22 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 467, __pyx_L64_error)
                    }
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    for (;;) {
                      if (likely(!__pyx_t_22)) {
                        if (likely(PyList_CheckExact(__pyx_t_2))) {
                          {
                            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
                            #if !CYTHON_ASSUME_SAFE_MACROS
                            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 467, __pyx_L64_error)
                            #endif
                            if (__pyx_t_13 >= __pyx_temp) break;
                          }
                          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 467, __pyx_L64_error)
                          #else
                          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L64_error)
                          __Pyx_GOTREF(__pyx_t_3);
                          #endif
                        } else {
                          {
                            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
                            #if !CYTHON_ASSUME_SAFE_MACROS
                            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 467, __pyx_L64_error)
                            #endif
                            if (__pyx_t_13 >= __pyx_temp) break;
                          }
                          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 467, __pyx_L64_error)
                          #else
                          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L64_error)
                          __Pyx_GOTREF(__pyx_t_3);
                          #endif
                        }
                      } else {
                        __pyx_t_3 = __pyx_t_22(__pyx_t_2);
                        if (unlikely(!__pyx_t_3)) {
                          PyObject* exc_type = PyErr_Occurred();
                          if (exc_type) {
                            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                            else __PYX_ERR(0, 467, __pyx_L64_error)
                          }
                          break;
                        }
                        __Pyx_GOTREF(__pyx_t_3);
                      }
                      __Pyx_XDECREF_SET(__pyx_v_pred, __pyx_t_3);
                      __pyx_t_3 = 0;

                      /* "dwave/optimization/model.pyx":468
 *                     f.write(f"{node.topological_index()}".encode("UTF-8"))
 *                     for pred in node.iter_predecessors():
 *                         f.write(f" {pred.topological_index()}".encode("UTF-8"))             # <<<<<<<<<<<<<<
 *                     f.write(b"\n")
 * 
 */
                      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 468, __pyx_L64_error)
                      __Pyx_GOTREF(__pyx_t_14);
                      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_pred, __pyx_n_s_topological_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 468, __pyx_L64_error)
                      __Pyx_GOTREF(__pyx_t_7);
                      __pyx_t_23 = NULL;
                      __pyx_t_5 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_7))) {
                        __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_7);
                        if (likely(__pyx_t_23)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                          __Pyx_INCREF(__pyx_t_23);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_7, function);
                          __pyx_t_5 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_23, NULL};
                        __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
                        __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
                        if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 468, __pyx_L64_error)
                        __Pyx_GOTREF(__pyx_t_16);
                        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                      }
                      __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_16, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 468, __pyx_L64_error)
                      __Pyx_GOTREF(__pyx_t_7);
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                      __pyx_t_16 = __Pyx_PyUnicode_Concat(__pyx_kp_u__8, __pyx_t_7); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 468, __pyx_L64_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                      __pyx_t_7 = PyUnicode_AsUTF8String(((PyObject*)__pyx_t_16)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 468, __pyx_L64_error)
                      __Pyx_GOTREF(__pyx_t_7);
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                      __pyx_t_16 = NULL;
                      __pyx_t_5 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_14))) {
                        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_14);
                        if (likely(__pyx_t_16)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
                          __Pyx_INCREF(__pyx_t_16);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_14, function);
                          __pyx_t_5 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_7};
                        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
                        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L64_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                      }
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                      /* "dwave/optimization/model.pyx":467
 *                 for node in itertools.islice(self.iter_symbols(), 0, stop):
 *                     f.write(f"{node.topological_index()}".encode("UTF-8"))
 *                     for pred in node.iter_predecessors():             # <<<<<<<<<<<<<<
 *                         f.write(f" {pred.topological_index()}".encode("UTF-8"))
 *                     f.write(b"\n")
 */
                    }
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                    /* "dwave/optimization/model.pyx":469
 *                     for pred in node.iter_predecessors():
 *                         f.write(f" {pred.topological_index()}".encode("UTF-8"))
 *                     f.write(b"\n")             # <<<<<<<<<<<<<<
 * 
 *             # On the third pass, we allow nodes to save whatever info they want
 */
                    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 469, __pyx_L64_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_14 = NULL;
                    __pyx_t_5 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_3))) {
                      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
                      if (likely(__pyx_t_14)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                        __Pyx_INCREF(__pyx_t_14);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_3, function);
                        __pyx_t_5 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_kp_b__12};
                      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
                      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 469, __pyx_L64_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    }
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                    /* "dwave/optimization/model.pyx":465
 *                 # let's reuse the code for now.
 *                 stop = self.num_decisions() if only_decision else self.num_nodes()
 *                 for node in itertools.islice(self.iter_symbols(), 0, stop):             # <<<<<<<<<<<<<<
 *                     f.write(f"{node.topological_index()}".encode("UTF-8"))
 *                     for pred in node.iter_predecessors():
 */
                  }
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                  /* "dwave/optimization/model.pyx":460
 * 
 *             # On the second pass we encode the adjacency
 *             with zf.open("adj.adjlist", "w", force_zip64=True) as f:             # <<<<<<<<<<<<<<
 *                 # We don't actually need to make the Python symbols here, but it's convenient
 *                 # Also, if we're only_decision then there will never be predecessors, but
 */
                }
                __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
                __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                goto __pyx_L69_try_end;
                __pyx_L64_error:;
                __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                /*except:*/ {
                  __Pyx_AddTraceback("dwave.optimization.model.Model.into_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 460, __pyx_L66_except_error)
                  __Pyx_XGOTREF(__pyx_t_4);
                  __Pyx_XGOTREF(__pyx_t_2);
                  __Pyx_XGOTREF(__pyx_t_3);
                  __pyx_t_14 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 460, __pyx_L66_except_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_14, NULL);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                  if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 460, __pyx_L66_except_error)
                  __Pyx_GOTREF(__pyx_t_21);
                  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_21);
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  if (__pyx_t_12 < 0) __PYX_ERR(0, 460, __pyx_L66_except_error)
                  __pyx_t_1 = (!__pyx_t_12);
                  if (unlikely(__pyx_t_1)) {
                    __Pyx_GIVEREF(__pyx_t_4);
                    __Pyx_GIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_2, __pyx_t_3);
                    __pyx_t_4 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0; 
                    __PYX_ERR(0, 460, __pyx_L66_except_error)
                  }
                  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                  goto __pyx_L65_exception_handled;
                }
                __pyx_L66_except_error:;
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_XGIVEREF(__pyx_t_18);
                __Pyx_XGIVEREF(__pyx_t_17);
                __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_18, __pyx_t_17);
                goto __pyx_L37_error;
                __pyx_L65_exception_handled:;
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_XGIVEREF(__pyx_t_18);
                __Pyx_XGIVEREF(__pyx_t_17);
                __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_18, __pyx_t_17);
                __pyx_L69_try_end:;
              }
            }
            /*finally:*/ {
              /*normal exit:*/{
                if (__pyx_t_11) {
                  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__4, NULL);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 460, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_17);
                  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                }
                goto __pyx_L63;
              }
              __pyx_L63:;
            }
            goto __pyx_L79;
            __pyx_L60_error:;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            goto __pyx_L37_error;
            __pyx_L79:;
          }

          /* "dwave/optimization/model.pyx":473
 *             # On the third pass, we allow nodes to save whatever info they want
 *             # to in a nested node/<topological_index> directory
 *             for node in itertools.islice(self.iter_symbols(), 0, stop):             # <<<<<<<<<<<<<<
 *                 directory = f"nodes/{node.topological_index()}/"
 *                 node._into_zipfile(zf, directory)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_itertools); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 473, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_islice); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_symbols); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 473, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_7 = NULL;
          __pyx_t_5 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
              __pyx_t_5 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 473, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          __pyx_t_14 = PyInt_FromSsize_t(__pyx_v_stop); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 473, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_7 = NULL;
          __pyx_t_5 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_5 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[4] = {__pyx_t_7, __pyx_t_2, __pyx_int_0, __pyx_t_14};
            __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 3+__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
            __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4);
            __pyx_t_15 = 0;
            __pyx_t_20 = NULL;
          } else {
            __pyx_t_15 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_20 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 473, __pyx_L37_error)
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          for (;;) {
            if (likely(!__pyx_t_20)) {
              if (likely(PyList_CheckExact(__pyx_t_4))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 473, __pyx_L37_error)
                  #endif
                  if (__pyx_t_15 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_15); __Pyx_INCREF(__pyx_t_3); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 473, __pyx_L37_error)
                #else
                __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 473, __pyx_L37_error)
                  #endif
                  if (__pyx_t_15 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_15); __Pyx_INCREF(__pyx_t_3); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 473, __pyx_L37_error)
                #else
                __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
              }
            } else {
              __pyx_t_3 = __pyx_t_20(__pyx_t_4);
              if (unlikely(!__pyx_t_3)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 473, __pyx_L37_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_3);
            }
            __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_3);
            __pyx_t_3 = 0;

            /* "dwave/optimization/model.pyx":474
 *             # to in a nested node/<topological_index> directory
 *             for node in itertools.islice(self.iter_symbols(), 0, stop):
 *                 directory = f"nodes/{node.topological_index()}/"             # <<<<<<<<<<<<<<
 *                 node._into_zipfile(zf, directory)
 * 
 */
            __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_13 = 0;
            __pyx_t_24 = 127;
            __Pyx_INCREF(__pyx_kp_u_nodes);
            __pyx_t_13 += 6;
            __Pyx_GIVEREF(__pyx_kp_u_nodes);
            PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_nodes);
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_topological_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_7 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_7)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_7);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
              __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 474, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }
            __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_14, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_24 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_24) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_24;
            __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
            __pyx_t_2 = 0;
            __Pyx_INCREF(__pyx_kp_u__11);
            __pyx_t_13 += 1;
            __Pyx_GIVEREF(__pyx_kp_u__11);
            PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__11);
            __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_13, __pyx_t_24); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF_SET(__pyx_v_directory, ((PyObject*)__pyx_t_2));
            __pyx_t_2 = 0;

            /* "dwave/optimization/model.pyx":475
 *             for node in itertools.islice(self.iter_symbols(), 0, stop):
 *                 directory = f"nodes/{node.topological_index()}/"
 *                 node._into_zipfile(zf, directory)             # <<<<<<<<<<<<<<
 * 
 *             # Encode the objective and the constraints
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_into_zipfile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_14 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_14)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_14);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_14, __pyx_v_zf, __pyx_v_directory};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 475, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "dwave/optimization/model.pyx":473
 *             # On the third pass, we allow nodes to save whatever info they want
 *             # to in a nested node/<topological_index> directory
 *             for node in itertools.islice(self.iter_symbols(), 0, stop):             # <<<<<<<<<<<<<<
 *                 directory = f"nodes/{node.topological_index()}/"
 *                 node._into_zipfile(zf, directory)
 */
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "dwave/optimization/model.pyx":478
 * 
 *             # Encode the objective and the constraints
 *             if self.objective is not None and self.objective.topological_index() < stop:             # <<<<<<<<<<<<<<
 *                 zf.writestr("objective.json", encoder.encode(self.objective.topological_index()))
 *             else:
 */
          __pyx_t_12 = (__pyx_v_self->objective != Py_None);
          if (__pyx_t_12) {
          } else {
            __pyx_t_1 = __pyx_t_12;
            goto __pyx_L84_bool_binop_done;
          }
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->objective, __pyx_n_s_topological_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 478, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = NULL;
          __pyx_t_5 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_5 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 478, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 478, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 478, __pyx_L37_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 478, __pyx_L37_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_1 = __pyx_t_12;
          __pyx_L84_bool_binop_done:;
          if (__pyx_t_1) {

            /* "dwave/optimization/model.pyx":479
 *             # Encode the objective and the constraints
 *             if self.objective is not None and self.objective.topological_index() < stop:
 *                 zf.writestr("objective.json", encoder.encode(self.objective.topological_index()))             # <<<<<<<<<<<<<<
 *             else:
 *                 zf.writestr("objective.json", b"")
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_writestr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_encoder, __pyx_n_s_encode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 479, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->objective, __pyx_n_s_topological_index); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 479, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_23 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_16))) {
              __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_16);
              if (likely(__pyx_t_23)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                __Pyx_INCREF(__pyx_t_23);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_16, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_23, NULL};
              __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
              if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 479, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            }
            __pyx_t_16 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_14))) {
              __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_14);
              if (likely(__pyx_t_16)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
                __Pyx_INCREF(__pyx_t_16);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_14, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_7};
              __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 479, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            }
            __pyx_t_14 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_14)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_14);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_14, __pyx_kp_u_objective_json, __pyx_t_4};
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "dwave/optimization/model.pyx":478
 * 
 *             # Encode the objective and the constraints
 *             if self.objective is not None and self.objective.topological_index() < stop:             # <<<<<<<<<<<<<<
 *                 zf.writestr("objective.json", encoder.encode(self.objective.topological_index()))
 *             else:
 */
            goto __pyx_L83;
          }

          /* "dwave/optimization/model.pyx":481
 *                 zf.writestr("objective.json", encoder.encode(self.objective.topological_index()))
 *             else:
 *                 zf.writestr("objective.json", b"")             # <<<<<<<<<<<<<<
 * 
 *             constraints = []  # todo: not yet available at the python level
 */
          /*else*/ {
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_writestr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 481, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 481, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          __pyx_L83:;

          /* "dwave/optimization/model.pyx":483
 *                 zf.writestr("objective.json", b"")
 * 
 *             constraints = []  # todo: not yet available at the python level             # <<<<<<<<<<<<<<
 *             for c in self.iter_constraints():
 *                 if c is not None and c.topological_index() < stop:
 */
          __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_v_constraints = ((PyObject*)__pyx_t_2);
          __pyx_t_2 = 0;

          /* "dwave/optimization/model.pyx":484
 * 
 *             constraints = []  # todo: not yet available at the python level
 *             for c in self.iter_constraints():             # <<<<<<<<<<<<<<
 *                 if c is not None and c.topological_index() < stop:
 *                     constraints.append(c.topological_index())
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_constraints); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = NULL;
          __pyx_t_5 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_5 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 484, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
            __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3);
            __pyx_t_15 = 0;
            __pyx_t_20 = NULL;
          } else {
            __pyx_t_15 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_20 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 484, __pyx_L37_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          for (;;) {
            if (likely(!__pyx_t_20)) {
              if (likely(PyList_CheckExact(__pyx_t_3))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 484, __pyx_L37_error)
                  #endif
                  if (__pyx_t_15 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_15); __Pyx_INCREF(__pyx_t_2); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 484, __pyx_L37_error)
                #else
                __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 484, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_2);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 484, __pyx_L37_error)
                  #endif
                  if (__pyx_t_15 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_15); __Pyx_INCREF(__pyx_t_2); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 484, __pyx_L37_error)
                #else
                __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 484, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_2);
                #endif
              }
            } else {
              __pyx_t_2 = __pyx_t_20(__pyx_t_3);
              if (unlikely(!__pyx_t_2)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 484, __pyx_L37_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_2);
            }
            __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_2);
            __pyx_t_2 = 0;

            /* "dwave/optimization/model.pyx":485
 *             constraints = []  # todo: not yet available at the python level
 *             for c in self.iter_constraints():
 *                 if c is not None and c.topological_index() < stop:             # <<<<<<<<<<<<<<
 *                     constraints.append(c.topological_index())
 *             zf.writestr("constraints.json", encoder.encode(constraints))
 */
            __pyx_t_12 = (__pyx_v_c != Py_None);
            if (__pyx_t_12) {
            } else {
              __pyx_t_1 = __pyx_t_12;
              goto __pyx_L89_bool_binop_done;
            }
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_topological_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_14 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_14)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_14);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_14, NULL};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 485, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_stop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_14 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 485, __pyx_L37_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 485, __pyx_L37_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_1 = __pyx_t_12;
            __pyx_L89_bool_binop_done:;
            if (__pyx_t_1) {

              /* "dwave/optimization/model.pyx":486
 *             for c in self.iter_constraints():
 *                 if c is not None and c.topological_index() < stop:
 *                     constraints.append(c.topological_index())             # <<<<<<<<<<<<<<
 *             zf.writestr("constraints.json", encoder.encode(constraints))
 * 
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_topological_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_2 = NULL;
              __pyx_t_5 = 0;
              #if CYTHON_UNPACK_METHODS
              if (likely(PyMethod_Check(__pyx_t_4))) {
                __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
                if (likely(__pyx_t_2)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                  __Pyx_INCREF(__pyx_t_2);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_4, function);
                  __pyx_t_5 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
                __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 486, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_14);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              }
              __pyx_t_25 = __Pyx_PyList_Append(__pyx_v_constraints, __pyx_t_14); if (unlikely(__pyx_t_25 == ((int)-1))) __PYX_ERR(0, 486, __pyx_L37_error)
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

              /* "dwave/optimization/model.pyx":485
 *             constraints = []  # todo: not yet available at the python level
 *             for c in self.iter_constraints():
 *                 if c is not None and c.topological_index() < stop:             # <<<<<<<<<<<<<<
 *                     constraints.append(c.topological_index())
 *             zf.writestr("constraints.json", encoder.encode(constraints))
 */
            }

            /* "dwave/optimization/model.pyx":484
 * 
 *             constraints = []  # todo: not yet available at the python level
 *             for c in self.iter_constraints():             # <<<<<<<<<<<<<<
 *                 if c is not None and c.topological_index() < stop:
 *                     constraints.append(c.topological_index())
 */
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "dwave/optimization/model.pyx":487
 *                 if c is not None and c.topological_index() < stop:
 *                     constraints.append(c.topological_index())
 *             zf.writestr("constraints.json", encoder.encode(constraints))             # <<<<<<<<<<<<<<
 * 
 *             # Encode the states if requested
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_writestr); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 487, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_encoder, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 487, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_7 = NULL;
          __pyx_t_5 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_5 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_constraints};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          __pyx_t_2 = NULL;
          __pyx_t_5 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
              __pyx_t_5 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_kp_u_constraints_json, __pyx_t_4};
            __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 487, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "dwave/optimization/model.pyx":490
 * 
 *             # Encode the states if requested
 *             if num_states > 0:  # redundant, but good short circuit             # <<<<<<<<<<<<<<
 *                 for node in itertools.islice(self.iter_symbols(), self.num_decisions()):
 *                     # only save states that have been initialized
 */
          __pyx_t_3 = PyObject_RichCompare(__pyx_v_num_states, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 490, __pyx_L37_error)
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 490, __pyx_L37_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__pyx_t_1) {

            /* "dwave/optimization/model.pyx":491
 *             # Encode the states if requested
 *             if num_states > 0:  # redundant, but good short circuit
 *                 for node in itertools.islice(self.iter_symbols(), self.num_decisions()):             # <<<<<<<<<<<<<<
 *                     # only save states that have been initialized
 *                     for i in filter(node.has_state, range(num_states)):
 */
            __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_itertools); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 491, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_islice); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 491, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_symbols); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 491, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_7 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_7)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_7);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
              __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 491, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }
            __pyx_t_2 = PyInt_FromSsize_t(((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_self->__pyx_vtab)->num_decisions(__pyx_v_self, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 491, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_7 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_7)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_7);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_t_14, __pyx_t_2};
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 491, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
              __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4);
              __pyx_t_15 = 0;
              __pyx_t_20 = NULL;
            } else {
              __pyx_t_15 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 491, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_20 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 491, __pyx_L37_error)
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            for (;;) {
              if (likely(!__pyx_t_20)) {
                if (likely(PyList_CheckExact(__pyx_t_4))) {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 491, __pyx_L37_error)
                    #endif
                    if (__pyx_t_15 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_15); __Pyx_INCREF(__pyx_t_3); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 491, __pyx_L37_error)
                  #else
                  __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 491, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  #endif
                } else {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 491, __pyx_L37_error)
                    #endif
                    if (__pyx_t_15 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_15); __Pyx_INCREF(__pyx_t_3); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 491, __pyx_L37_error)
                  #else
                  __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 491, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  #endif
                }
              } else {
                __pyx_t_3 = __pyx_t_20(__pyx_t_4);
                if (unlikely(!__pyx_t_3)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 491, __pyx_L37_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_3);
              }
              __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_3);
              __pyx_t_3 = 0;

              /* "dwave/optimization/model.pyx":493
 *                 for node in itertools.islice(self.iter_symbols(), self.num_decisions()):
 *                     # only save states that have been initialized
 *                     for i in filter(node.has_state, range(num_states)):             # <<<<<<<<<<<<<<
 *                         directory = f"nodes/{node.topological_index()}/states/{i}/"
 *                         node._state_into_zipfile(zf, directory, i)
 */
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_has_state); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 493, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_num_states); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 493, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_GIVEREF(__pyx_t_3);
              if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_3)) __PYX_ERR(0, 493, __pyx_L37_error);
              __Pyx_GIVEREF(__pyx_t_2);
              if (__Pyx_PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_2)) __PYX_ERR(0, 493, __pyx_L37_error);
              __pyx_t_3 = 0;
              __pyx_t_2 = 0;
              __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
                __pyx_t_14 = __pyx_t_2; __Pyx_INCREF(__pyx_t_14);
                __pyx_t_13 = 0;
                __pyx_t_22 = NULL;
              } else {
                __pyx_t_13 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 493, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_14);
                __pyx_t_22 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_14); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 493, __pyx_L37_error)
              }
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              for (;;) {
                if (likely(!__pyx_t_22)) {
                  if (likely(PyList_CheckExact(__pyx_t_14))) {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_14);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 493, __pyx_L37_error)
                      #endif
                      if (__pyx_t_13 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_13); __Pyx_INCREF(__pyx_t_2); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 493, __pyx_L37_error)
                    #else
                    __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_14, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L37_error)
                    __Pyx_GOTREF(__pyx_t_2);
                    #endif
                  } else {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_14);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 493, __pyx_L37_error)
                      #endif
                      if (__pyx_t_13 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_13); __Pyx_INCREF(__pyx_t_2); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 493, __pyx_L37_error)
                    #else
                    __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_14, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L37_error)
                    __Pyx_GOTREF(__pyx_t_2);
                    #endif
                  }
                } else {
                  __pyx_t_2 = __pyx_t_22(__pyx_t_14);
                  if (unlikely(!__pyx_t_2)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 493, __pyx_L37_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_2);
                }
                __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
                __pyx_t_2 = 0;

                /* "dwave/optimization/model.pyx":494
 *                     # only save states that have been initialized
 *                     for i in filter(node.has_state, range(num_states)):
 *                         directory = f"nodes/{node.topological_index()}/states/{i}/"             # <<<<<<<<<<<<<<
 *                         node._state_into_zipfile(zf, directory, i)
 * 
 */
                __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 494, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_26 = 0;
                __pyx_t_24 = 127;
                __Pyx_INCREF(__pyx_kp_u_nodes);
                __pyx_t_26 += 6;
                __Pyx_GIVEREF(__pyx_kp_u_nodes);
                PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_nodes);
                __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_topological_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 494, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_7);
                __pyx_t_16 = NULL;
                __pyx_t_5 = 0;
                #if CYTHON_UNPACK_METHODS
                if (likely(PyMethod_Check(__pyx_t_7))) {
                  __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_7);
                  if (likely(__pyx_t_16)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                    __Pyx_INCREF(__pyx_t_16);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_7, function);
                    __pyx_t_5 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_16, NULL};
                  __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 494, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                }
                __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 494, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_7);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_24 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_24) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_24;
                __pyx_t_26 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
                __Pyx_GIVEREF(__pyx_t_7);
                PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
                __pyx_t_7 = 0;
                __Pyx_INCREF(__pyx_kp_u_states);
                __pyx_t_26 += 8;
                __Pyx_GIVEREF(__pyx_kp_u_states);
                PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_states);
                __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_i, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 494, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_7);
                __pyx_t_24 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_24) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_24;
                __pyx_t_26 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
                __Pyx_GIVEREF(__pyx_t_7);
                PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_7);
                __pyx_t_7 = 0;
                __Pyx_INCREF(__pyx_kp_u__11);
                __pyx_t_26 += 1;
                __Pyx_GIVEREF(__pyx_kp_u__11);
                PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u__11);
                __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_2, 5, __pyx_t_26, __pyx_t_24); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 494, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_7);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_XDECREF_SET(__pyx_v_directory, ((PyObject*)__pyx_t_7));
                __pyx_t_7 = 0;

                /* "dwave/optimization/model.pyx":495
 *                     for i in filter(node.has_state, range(num_states)):
 *                         directory = f"nodes/{node.topological_index()}/states/{i}/"
 *                         node._state_into_zipfile(zf, directory, i)             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool is_locked(self) noexcept:
 */
                __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_state_into_zipfile); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 495, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_3 = NULL;
                __pyx_t_5 = 0;
                #if CYTHON_UNPACK_METHODS
                if (likely(PyMethod_Check(__pyx_t_2))) {
                  __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
                  if (likely(__pyx_t_3)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                    __Pyx_INCREF(__pyx_t_3);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_2, function);
                    __pyx_t_5 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[4] = {__pyx_t_3, __pyx_v_zf, __pyx_v_directory, __pyx_v_i};
                  __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 3+__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 495, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                }
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                /* "dwave/optimization/model.pyx":493
 *                 for node in itertools.islice(self.iter_symbols(), self.num_decisions()):
 *                     # only save states that have been initialized
 *                     for i in filter(node.has_state, range(num_states)):             # <<<<<<<<<<<<<<
 *                         directory = f"nodes/{node.topological_index()}/states/{i}/"
 *                         node._state_into_zipfile(zf, directory, i)
 */
              }
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

              /* "dwave/optimization/model.pyx":491
 *             # Encode the states if requested
 *             if num_states > 0:  # redundant, but good short circuit
 *                 for node in itertools.islice(self.iter_symbols(), self.num_decisions()):             # <<<<<<<<<<<<<<
 *                     # only save states that have been initialized
 *                     for i in filter(node.has_state, range(num_states)):
 */
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "dwave/optimization/model.pyx":490
 * 
 *             # Encode the states if requested
 *             if num_states > 0:  # redundant, but good short circuit             # <<<<<<<<<<<<<<
 *                 for node in itertools.islice(self.iter_symbols(), self.num_decisions()):
 *                     # only save states that have been initialized
 */
          }

          /* "dwave/optimization/model.pyx":442
 * 
 *         # The rest of it is a zipfile
 *         with zipfile.ZipFile(file, mode="w") as zf:             # <<<<<<<<<<<<<<
 *             zf.writestr("info.json", encoder.encode(model_info))
 *             zf.writestr("version.txt", ".".join(map(str, version)))
 */
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L42_try_end;
        __pyx_L37_error:;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("dwave.optimization.model.Model.into_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_14, &__pyx_t_7) < 0) __PYX_ERR(0, 442, __pyx_L39_except_error)
          __Pyx_XGOTREF(__pyx_t_4);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_7);
          __pyx_t_2 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_14, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L39_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 442, __pyx_L39_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (__pyx_t_1 < 0) __PYX_ERR(0, 442, __pyx_L39_except_error)
          __pyx_t_12 = (!__pyx_t_1);
          if (unlikely(__pyx_t_12)) {
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_7);
            __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_14, __pyx_t_7);
            __pyx_t_4 = 0; __pyx_t_14 = 0; __pyx_t_7 = 0; 
            __PYX_ERR(0, 442, __pyx_L39_except_error)
          }
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          goto __pyx_L38_exception_handled;
        }
        __pyx_L39_except_error:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L1_error;
        __pyx_L38_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_L42_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__4, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 442, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        goto __pyx_L36;
      }
      __pyx_L36:;
    }
    goto __pyx_L102;
    __pyx_L33_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L102:;
  }

  /* "dwave/optimization/model.pyx":372
 *         )
 * 
 *     def into_file(self, file, *,             # <<<<<<<<<<<<<<
 *                   Py_ssize_t max_num_states = 0,
 *                   bool only_decision = False,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_AddTraceback("dwave.optimization.model.Model.into_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_version);
  __Pyx_XDECREF(__pyx_v_model_info);
  __Pyx_XDECREF(__pyx_v_num_states);
  __Pyx_XDECREF(__pyx_v_encoder);
  __Pyx_XDECREF(__pyx_v_header_data);
  __Pyx_XDECREF(__pyx_v_padding);
  __Pyx_XDECREF(__pyx_v_zf);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_pred);
  __Pyx_XDECREF(__pyx_v_directory);
  __Pyx_XDECREF(__pyx_v_constraints);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":497
 *                         node._state_into_zipfile(zf, directory, i)
 * 
 *     cpdef bool is_locked(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Lock status of the model.
 * 
 */

static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_23is_locked(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static bool __pyx_f_5dwave_12optimization_5model_5Model_is_locked(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, int __pyx_skip_dispatch) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_locked", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_locked); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_5dwave_12optimization_5model_5Model_23is_locked)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 497, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 497, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "dwave/optimization/model.pyx":505
 *             :meth:`.lock`, :meth:`.unlock`
 *         """
 *         return self._lock_count > 0             # <<<<<<<<<<<<<<
 * 
 *     def iter_constraints(self):
 */
  __pyx_r = (__pyx_v_self->_lock_count > 0);
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":497
 *                         node._state_into_zipfile(zf, directory, i)
 * 
 *     cpdef bool is_locked(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Lock status of the model.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("dwave.optimization.model.Model.is_locked", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_23is_locked(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_22is_locked, "Lock status of the model.\n\n        No new symbols can be added to a locked model.\n        \n        See also:\n            :meth:`.lock`, :meth:`.unlock`\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_23is_locked = {"is_locked", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_23is_locked, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_22is_locked};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_23is_locked(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_locked (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_locked", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_locked", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_22is_locked(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_22is_locked(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_locked", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_5dwave_12optimization_5model_5Model_is_locked(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.Model.is_locked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_26generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":507
 *         return self._lock_count > 0
 * 
 *     def iter_constraints(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all constraints in the model.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_25iter_constraints(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_24iter_constraints, "Iterate over all constraints in the model.\n        \n        Examples:\n            This example adds a single constraint to a model and iterates over it.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer()\n            >>> c = model.constant(5)\n            >>> model.add_constraint(i <= c)\n            >>> constraints = next(model.iter_constraints())\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_25iter_constraints = {"iter_constraints", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_25iter_constraints, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_24iter_constraints};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_25iter_constraints(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_constraints (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("iter_constraints", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "iter_constraints", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_24iter_constraints(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_24iter_constraints(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_constraints", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 507, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_5Model_26generator1, __pyx_codeobj__25, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_constraints, __pyx_n_s_Model_iter_constraints, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Model.iter_constraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_26generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_constraints", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 507, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":520
 *             >>> constraints = next(model.iter_constraints())
 *         """
 *         for i in range(self._graph.num_constraints()):             # <<<<<<<<<<<<<<
 *             yield symbol_from_ptr(self, self._graph.constraints()[i])
 * 
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_graph.num_constraints();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;

    /* "dwave/optimization/model.pyx":521
 *         """
 *         for i in range(self._graph.num_constraints()):
 *             yield symbol_from_ptr(self, self._graph.constraints()[i])             # <<<<<<<<<<<<<<
 * 
 *     def iter_decisions(self):
 */
    __pyx_t_4 = __pyx_fuse_1__pyx_f_5dwave_12optimization_7symbols_symbol_from_ptr(__pyx_cur_scope->__pyx_v_self, (__pyx_cur_scope->__pyx_v_self->_graph.constraints()[__pyx_cur_scope->__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 521, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "dwave/optimization/model.pyx":507
 *         return self._lock_count > 0
 * 
 *     def iter_constraints(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all constraints in the model.
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("iter_constraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_29generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":523
 *             yield symbol_from_ptr(self, self._graph.constraints()[i])
 * 
 *     def iter_decisions(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all decision variables in the model.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_28iter_decisions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_27iter_decisions, "Iterate over all decision variables in the model.\n        \n        Examples:\n            This example adds a single decision symbol to a model and iterates over it.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer()\n            >>> c = model.constant(5)\n            >>> model.add_constraint(i <= c)\n            >>> decisions = next(model.iter_decisions())\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_28iter_decisions = {"iter_decisions", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_28iter_decisions, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_27iter_decisions};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_28iter_decisions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_decisions (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("iter_decisions", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "iter_decisions", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_27iter_decisions(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_27iter_decisions(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_decisions", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 523, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_5Model_29generator2, __pyx_codeobj__26, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_decisions, __pyx_n_s_Model_iter_decisions, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Model.iter_decisions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_29generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_decisions", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 523, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":536
 *             >>> decisions = next(model.iter_decisions())
 *         """
 *         cdef Py_ssize_t num_decisions = self.num_decisions()             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t seen_decisions = 0
 * 
 */
  __pyx_cur_scope->__pyx_v_num_decisions = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->num_decisions(__pyx_cur_scope->__pyx_v_self, 0);

  /* "dwave/optimization/model.pyx":537
 *         """
 *         cdef Py_ssize_t num_decisions = self.num_decisions()
 *         cdef Py_ssize_t seen_decisions = 0             # <<<<<<<<<<<<<<
 * 
 *         cdef Symbol symbol
 */
  __pyx_cur_scope->__pyx_v_seen_decisions = 0;

  /* "dwave/optimization/model.pyx":540
 * 
 *         cdef Symbol symbol
 *         for symbol in self.iter_symbols():             # <<<<<<<<<<<<<<
 *             if 0 <= symbol.node_ptr.topological_index() < num_decisions:
 *                 # we found a decision!
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_iter_symbols); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 540, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 540, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 540, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 540, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 540, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 540, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5dwave_12optimization_5model_Symbol))))) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_XGOTREF((PyObject *)__pyx_cur_scope->__pyx_v_symbol);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_symbol, ((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "dwave/optimization/model.pyx":541
 *         cdef Symbol symbol
 *         for symbol in self.iter_symbols():
 *             if 0 <= symbol.node_ptr.topological_index() < num_decisions:             # <<<<<<<<<<<<<<
 *                 # we found a decision!
 *                 yield symbol
 */
    __pyx_t_7 = __pyx_cur_scope->__pyx_v_symbol->node_ptr->topological_index();
    __pyx_t_8 = (0 <= __pyx_t_7);
    if (__pyx_t_8) {
      __pyx_t_8 = (__pyx_t_7 < __pyx_cur_scope->__pyx_v_num_decisions);
    }
    if (__pyx_t_8) {

      /* "dwave/optimization/model.pyx":543
 *             if 0 <= symbol.node_ptr.topological_index() < num_decisions:
 *                 # we found a decision!
 *                 yield symbol             # <<<<<<<<<<<<<<
 *                 seen_decisions += 1
 * 
 */
      __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_symbol);
      __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_symbol);
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 543, __pyx_L1_error)

      /* "dwave/optimization/model.pyx":544
 *                 # we found a decision!
 *                 yield symbol
 *                 seen_decisions += 1             # <<<<<<<<<<<<<<
 * 
 *                 if seen_decisions >= num_decisions:
 */
      __pyx_cur_scope->__pyx_v_seen_decisions = (__pyx_cur_scope->__pyx_v_seen_decisions + 1);

      /* "dwave/optimization/model.pyx":546
 *                 seen_decisions += 1
 * 
 *                 if seen_decisions >= num_decisions:             # <<<<<<<<<<<<<<
 *                     # we found them all
 *                     return
 */
      __pyx_t_8 = (__pyx_cur_scope->__pyx_v_seen_decisions >= __pyx_cur_scope->__pyx_v_num_decisions);
      if (__pyx_t_8) {

        /* "dwave/optimization/model.pyx":548
 *                 if seen_decisions >= num_decisions:
 *                     # we found them all
 *                     return             # <<<<<<<<<<<<<<
 * 
 *     def iter_symbols(self):
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = NULL;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "dwave/optimization/model.pyx":546
 *                 seen_decisions += 1
 * 
 *                 if seen_decisions >= num_decisions:             # <<<<<<<<<<<<<<
 *                     # we found them all
 *                     return
 */
      }

      /* "dwave/optimization/model.pyx":541
 *         cdef Symbol symbol
 *         for symbol in self.iter_symbols():
 *             if 0 <= symbol.node_ptr.topological_index() < num_decisions:             # <<<<<<<<<<<<<<
 *                 # we found a decision!
 *                 yield symbol
 */
    }

    /* "dwave/optimization/model.pyx":540
 * 
 *         cdef Symbol symbol
 *         for symbol in self.iter_symbols():             # <<<<<<<<<<<<<<
 *             if 0 <= symbol.node_ptr.topological_index() < num_decisions:
 *                 # we found a decision!
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "dwave/optimization/model.pyx":523
 *             yield symbol_from_ptr(self, self._graph.constraints()[i])
 * 
 *     def iter_decisions(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all decision variables in the model.
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("iter_decisions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_32generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":550
 *                     return
 * 
 *     def iter_symbols(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all symbols in the model.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_31iter_symbols(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_30iter_symbols, "Iterate over all symbols in the model.\n        \n        Examples:\n            This example iterates over a model's symbols.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer(1, lower_bound=10)\n            >>> c = model.constant([[2, 3], [5, 6]])\n            >>> symbol_1, symbol_2 = model.iter_symbols()\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_31iter_symbols = {"iter_symbols", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_31iter_symbols, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_30iter_symbols};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_31iter_symbols(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_symbols (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("iter_symbols", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "iter_symbols", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_30iter_symbols(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_30iter_symbols(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_symbols", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 550, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_5Model_32generator3, __pyx_codeobj__27, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_symbols, __pyx_n_s_Model_iter_symbols, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Model.iter_symbols", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_32generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_symbols", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 550, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":562
 *             >>> symbol_1, symbol_2 = model.iter_symbols()
 *         """
 *         for i in range(self._graph.num_nodes()):             # <<<<<<<<<<<<<<
 *             yield symbol_from_ptr(self, self._graph.nodes()[i].get())
 * 
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_graph.num_nodes();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;

    /* "dwave/optimization/model.pyx":563
 *         """
 *         for i in range(self._graph.num_nodes()):
 *             yield symbol_from_ptr(self, self._graph.nodes()[i].get())             # <<<<<<<<<<<<<<
 * 
 *     def list(self, n : int):
 */
    __pyx_t_4 = __pyx_fuse_0__pyx_f_5dwave_12optimization_7symbols_symbol_from_ptr(__pyx_cur_scope->__pyx_v_self, (__pyx_cur_scope->__pyx_v_self->_graph.nodes()[__pyx_cur_scope->__pyx_v_i]).get()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 563, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "dwave/optimization/model.pyx":550
 *                     return
 * 
 *     def iter_symbols(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all symbols in the model.
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("iter_symbols", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":565
 *             yield symbol_from_ptr(self, self._graph.nodes()[i].get())
 * 
 *     def list(self, n : int):             # <<<<<<<<<<<<<<
 *         """Create a list symbol as a decision variable.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_34list(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_33list, "Create a list symbol as a decision variable.\n\n        Args:\n            n: Values in the list are permutations of ``range(n)``.\n            \n        Returns:\n            A list symbol. \n            \n        Examples:\n            This example creates a list symbol of 200 elements.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> routes = model.list(200)\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_34list = {"list", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_34list, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_33list};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_34list(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_n = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_n)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 565, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "list") < 0)) __PYX_ERR(0, 565, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_n = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("list", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 565, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model.list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n), (&PyInt_Type), 0, "n", 1))) __PYX_ERR(0, 565, __pyx_L1_error)
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_33list(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v_n);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_33list(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_v_ListVariable = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list", 1);

  /* "dwave/optimization/model.pyx":581
 *             >>> routes = model.list(200)
 *         """
 *         from dwave.optimization.symbols import ListVariable  # avoid circular import             # <<<<<<<<<<<<<<
 *         return ListVariable(self, n)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ListVariable);
  __Pyx_GIVEREF(__pyx_n_s_ListVariable);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ListVariable)) __PYX_ERR(0, 581, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ListVariable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ListVariable = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":582
 *         """
 *         from dwave.optimization.symbols import ListVariable  # avoid circular import
 *         return ListVariable(self, n)             # <<<<<<<<<<<<<<
 * 
 *     def lock(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ListVariable);
  __pyx_t_1 = __pyx_v_ListVariable; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_v_n};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":565
 *             yield symbol_from_ptr(self, self._graph.nodes()[i].get())
 * 
 *     def list(self, n : int):             # <<<<<<<<<<<<<<
 *         """Create a list symbol as a decision variable.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.Model.list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ListVariable);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":584
 *         return ListVariable(self, n)
 * 
 *     def lock(self):             # <<<<<<<<<<<<<<
 *         """Lock the model.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_36lock(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_35lock, "Lock the model. \n        \n        No new symbols can be added to a locked model.\n\n        Returns:\n            A context manager. If the context is subsequently exited then the\n            :meth:`.unlock` will be called.\n        \n        See also:\n            :meth:`.is_locked`, :meth:`.unlock`\n            \n        Examples:\n            This example checks the status of a model after locking it and\n            subsequently unlocking it.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer(20, upper_bound=100)\n            >>> cntx = model.lock()\n            >>> model.is_locked()\n            True\n            >>> model.unlock()\n            >>> model.is_locked()\n            False\n\n            This example locks a model temporarily with a context manager.\n\n            >>> model = Model()\n            >>> with model.lock():\n            ...     # no nodes can be added within the context\n            ...     print(model.is_locked())\n            True\n            >>> model.is_locked()\n            False\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_36lock = {"lock", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_36lock, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_35lock};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_36lock(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lock (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("lock", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "lock", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_35lock(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_35lock(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lock", 1);

  /* "dwave/optimization/model.pyx":620
 *             False
 *         """
 *         self._graph.topological_sort()  # does nothing if already sorted, so safe to call always             # <<<<<<<<<<<<<<
 *         self._lock_count += 1
 * 
 */
  __pyx_v_self->_graph.topological_sort();

  /* "dwave/optimization/model.pyx":621
 *         """
 *         self._graph.topological_sort()  # does nothing if already sorted, so safe to call always
 *         self._lock_count += 1             # <<<<<<<<<<<<<<
 * 
 *         # note that we do not initialize the nodes or resize the states!
 */
  __pyx_v_self->_lock_count = (__pyx_v_self->_lock_count + 1);

  /* "dwave/optimization/model.pyx":626
 *         # We do it lazily for performance
 * 
 *         return locked(self)             # <<<<<<<<<<<<<<
 * 
 *     def minimize(self, ArraySymbol value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_locked); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":584
 *         return ListVariable(self, n)
 * 
 *     def lock(self):             # <<<<<<<<<<<<<<
 *         """Lock the model.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.Model.lock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":628
 *         return locked(self)
 * 
 *     def minimize(self, ArraySymbol value):             # <<<<<<<<<<<<<<
 *         """Set the objective value to minimize.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_38minimize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_37minimize, "Set the objective value to minimize.\n        \n        Optimization problems have an objective and/or constraints. The objective\n        expresses one or more aspects of the problem that should be minimized \n        (equivalent to maximization when multiplied by a minus sign). For example,\n        an optimized itinerary might minimize the value of distance traveled or\n        cost of transportation or travel time.\n        \n        Args:\n            value: Value for which to minimize the cost function.\n            \n        Examples:\n            This example minimizes a simple polynomial, :math:`y = i^2 - 4i`, \n            within bounds. \n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> i = model.integer(lower_bound=-5, upper_bound=5)\n            >>> c = model.constant(4)\n            >>> y = i*i - c*i\n            >>> model.minimize(y)\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_38minimize = {"minimize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_38minimize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_37minimize};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_38minimize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("minimize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "minimize") < 0)) __PYX_ERR(0, 628, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_value = ((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("minimize", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 628, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model.minimize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_5dwave_12optimization_5model_ArraySymbol, 1, "value", 0))) __PYX_ERR(0, 628, __pyx_L1_error)
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_37minimize(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_37minimize(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("minimize", 1);

  /* "dwave/optimization/model.pyx":651
 *             >>> model.minimize(y)
 *         """
 *         if value is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("value cannot be None")
 *         if value.size() < 1:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_value) == Py_None);
  if (unlikely(__pyx_t_1)) {

    /* "dwave/optimization/model.pyx":652
 *         """
 *         if value is None:
 *             raise ValueError("value cannot be None")             # <<<<<<<<<<<<<<
 *         if value.size() < 1:
 *             raise ValueError("the value of an empty array is ambiguous")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 652, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":651
 *             >>> model.minimize(y)
 *         """
 *         if value is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("value cannot be None")
 *         if value.size() < 1:
 */
  }

  /* "dwave/optimization/model.pyx":653
 *         if value is None:
 *             raise ValueError("value cannot be None")
 *         if value.size() < 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("the value of an empty array is ambiguous")
 *         if value.size() > 1:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_value), __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "dwave/optimization/model.pyx":654
 *             raise ValueError("value cannot be None")
 *         if value.size() < 1:
 *             raise ValueError("the value of an empty array is ambiguous")             # <<<<<<<<<<<<<<
 *         if value.size() > 1:
 *             raise ValueError("the value of an array with more than one element is ambiguous")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 654, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":653
 *         if value is None:
 *             raise ValueError("value cannot be None")
 *         if value.size() < 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("the value of an empty array is ambiguous")
 *         if value.size() > 1:
 */
  }

  /* "dwave/optimization/model.pyx":655
 *         if value.size() < 1:
 *             raise ValueError("the value of an empty array is ambiguous")
 *         if value.size() > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("the value of an array with more than one element is ambiguous")
 *         self._graph.set_objective(value.array_ptr)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_value), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "dwave/optimization/model.pyx":656
 *             raise ValueError("the value of an empty array is ambiguous")
 *         if value.size() > 1:
 *             raise ValueError("the value of an array with more than one element is ambiguous")             # <<<<<<<<<<<<<<
 *         self._graph.set_objective(value.array_ptr)
 *         self.objective = value
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 656, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":655
 *         if value.size() < 1:
 *             raise ValueError("the value of an empty array is ambiguous")
 *         if value.size() > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("the value of an array with more than one element is ambiguous")
 *         self._graph.set_objective(value.array_ptr)
 */
  }

  /* "dwave/optimization/model.pyx":657
 *         if value.size() > 1:
 *             raise ValueError("the value of an array with more than one element is ambiguous")
 *         self._graph.set_objective(value.array_ptr)             # <<<<<<<<<<<<<<
 *         self.objective = value
 * 
 */
  try {
    __pyx_v_self->_graph.set_objective(__pyx_v_value->array_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 657, __pyx_L1_error)
  }

  /* "dwave/optimization/model.pyx":658
 *             raise ValueError("the value of an array with more than one element is ambiguous")
 *         self._graph.set_objective(value.array_ptr)
 *         self.objective = value             # <<<<<<<<<<<<<<
 * 
 *     cpdef Py_ssize_t num_constraints(self) noexcept:
 */
  __Pyx_INCREF((PyObject *)__pyx_v_value);
  __Pyx_GIVEREF((PyObject *)__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->objective);
  __Pyx_DECREF(__pyx_v_self->objective);
  __pyx_v_self->objective = ((PyObject *)__pyx_v_value);

  /* "dwave/optimization/model.pyx":628
 *         return locked(self)
 * 
 *     def minimize(self, ArraySymbol value):             # <<<<<<<<<<<<<<
 *         """Set the objective value to minimize.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dwave.optimization.model.Model.minimize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":660
 *         self.objective = value
 * 
 *     cpdef Py_ssize_t num_constraints(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Number of constraints in the model.
 * 
 */

static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_40num_constraints(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static Py_ssize_t __pyx_f_5dwave_12optimization_5model_5Model_num_constraints(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("num_constraints", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_constraints); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_5dwave_12optimization_5model_5Model_40num_constraints)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 660, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 660, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "dwave/optimization/model.pyx":676
 *             2
 *         """
 *         return self._graph.num_constraints()             # <<<<<<<<<<<<<<
 * 
 *     cpdef Py_ssize_t num_decisions(self) noexcept:
 */
  __pyx_r = __pyx_v_self->_graph.num_constraints();
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":660
 *         self.objective = value
 * 
 *     cpdef Py_ssize_t num_constraints(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Number of constraints in the model.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("dwave.optimization.model.Model.num_constraints", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_40num_constraints(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_39num_constraints, "Number of constraints in the model.\n        \n        Examples:\n            This example checks the number of constraints in the model after \n            adding a couple of constraints.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer()\n            >>> c = model.constant([5, -14])\n            >>> model.add_constraint(i <= c[0])\n            >>> model.add_constraint(c[1] <= i)\n            >>> model.num_constraints()\n            2\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_40num_constraints = {"num_constraints", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_40num_constraints, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_39num_constraints};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_40num_constraints(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_constraints (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("num_constraints", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "num_constraints", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_39num_constraints(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_39num_constraints(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("num_constraints", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_f_5dwave_12optimization_5model_5Model_num_constraints(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.Model.num_constraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":678
 *         return self._graph.num_constraints()
 * 
 *     cpdef Py_ssize_t num_decisions(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Number of independent decision nodes in the model.
 * 
 */

static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_42num_decisions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static Py_ssize_t __pyx_f_5dwave_12optimization_5model_5Model_num_decisions(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("num_decisions", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_decisions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_5dwave_12optimization_5model_5Model_42num_decisions)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 678, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "dwave/optimization/model.pyx":695
 *             1
 *         """
 *         return self._graph.num_decisions()             # <<<<<<<<<<<<<<
 * 
 *     cpdef Py_ssize_t num_nodes(self) noexcept:
 */
  __pyx_r = __pyx_v_self->_graph.num_decisions();
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":678
 *         return self._graph.num_constraints()
 * 
 *     cpdef Py_ssize_t num_decisions(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Number of independent decision nodes in the model.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("dwave.optimization.model.Model.num_decisions", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_42num_decisions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_41num_decisions, "Number of independent decision nodes in the model. \n        \n        An array-of-integers symbol, for example, counts as a single \n        decision node.\n        \n        Examples:\n            This example checks the number of decisions in a model after \n            adding a single (size 20) decision symbol.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> c = model.constant([1, 5, 8.4])\n            >>> i = model.integer(20, upper_bound=100)\n            >>> model.num_decisions()\n            1\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_42num_decisions = {"num_decisions", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_42num_decisions, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_41num_decisions};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_42num_decisions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_decisions (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("num_decisions", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "num_decisions", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_41num_decisions(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_41num_decisions(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("num_decisions", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_f_5dwave_12optimization_5model_5Model_num_decisions(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.Model.num_decisions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":697
 *         return self._graph.num_decisions()
 * 
 *     cpdef Py_ssize_t num_nodes(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Number of nodes in the directed acyclic graph for the model.
 * 
 */

static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_44num_nodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static Py_ssize_t __pyx_f_5dwave_12optimization_5model_5Model_num_nodes(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("num_nodes", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_5dwave_12optimization_5model_5Model_44num_nodes)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 697, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 697, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "dwave/optimization/model.pyx":715
 *             2
 *         """
 *         return self._graph.num_nodes()             # <<<<<<<<<<<<<<
 * 
 *     def num_symbols(self):
 */
  __pyx_r = __pyx_v_self->_graph.num_nodes();
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":697
 *         return self._graph.num_decisions()
 * 
 *     cpdef Py_ssize_t num_nodes(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Number of nodes in the directed acyclic graph for the model.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("dwave.optimization.model.Model.num_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_44num_nodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_43num_nodes, "Number of nodes in the directed acyclic graph for the model.\n        \n        See also:\n            :meth:`.num_symbols`\n        \n        Examples:\n            This example add a single (size 20) decision symbol and \n            a single (size 3) constant symbol checks the number of \n            nodes in the model.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> c = model.constant([1, 5, 8.4])\n            >>> i = model.integer(20, upper_bound=100)\n            >>> model.num_nodes()\n            2\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_44num_nodes = {"num_nodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_44num_nodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_43num_nodes};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_44num_nodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_nodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("num_nodes", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "num_nodes", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_43num_nodes(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_43num_nodes(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("num_nodes", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_f_5dwave_12optimization_5model_5Model_num_nodes(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.Model.num_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":717
 *         return self._graph.num_nodes()
 * 
 *     def num_symbols(self):             # <<<<<<<<<<<<<<
 *         """Number of symbols tracked by the model.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_46num_symbols(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_45num_symbols, "Number of symbols tracked by the model. \n        \n        Equivalent to the number of nodes in the directed acyclic \n        graph for the model.\n        \n        See also:\n            :meth:`.num_nodes`\n        \n        Examples:\n            This example add a single (size 20) decision symbol and \n            a single (size 3) constant symbol checks the number of \n            symbols in the model.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> c = model.constant([1, 5, 8.4])\n            >>> i = model.integer(20, upper_bound=100)\n            >>> model.num_symbols()\n            2\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_46num_symbols = {"num_symbols", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_46num_symbols, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_45num_symbols};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_46num_symbols(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_symbols (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("num_symbols", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "num_symbols", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_45num_symbols(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_45num_symbols(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("num_symbols", 1);

  /* "dwave/optimization/model.pyx":738
 *             2
 *         """
 *         return self.num_nodes()             # <<<<<<<<<<<<<<
 * 
 *     def quadratic_model(self, ArraySymbol x, quadratic, linear=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_self->__pyx_vtab)->num_nodes(__pyx_v_self, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":717
 *         return self._graph.num_nodes()
 * 
 *     def num_symbols(self):             # <<<<<<<<<<<<<<
 *         """Number of symbols tracked by the model.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.Model.num_symbols", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":740
 *         return self.num_nodes()
 * 
 *     def quadratic_model(self, ArraySymbol x, quadratic, linear=None):             # <<<<<<<<<<<<<<
 *         """Create a quadratic model from an array and a quadratic model.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_48quadratic_model(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_47quadratic_model, "Create a quadratic model from an array and a quadratic model.\n        \n        Args:\n            x: An array.\n            \n            quadratic: Quadratic values for the quadratic model.\n            \n            linear: Linear values for the quadratic model.\n        \n        Returns:\n            A quadratic model. \n            \n        Examples:\n            This example creates a quadratic model.\n        \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> x = model.binary(3)\n            >>> Q = {(0, 0): 0, (0, 1): 1, (0, 2): 2, (1, 1): 1, (1, 2): 3, (2, 2): 2}\n            >>> qm = model.quadratic_model(x, Q)\n            \n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_48quadratic_model = {"quadratic_model", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_48quadratic_model, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_47quadratic_model};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_48quadratic_model(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_x = 0;
  PyObject *__pyx_v_quadratic = 0;
  PyObject *__pyx_v_linear = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quadratic_model (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_quadratic,&__pyx_n_s_linear,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 740, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_quadratic)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 740, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("quadratic_model", 0, 2, 3, 1); __PYX_ERR(0, 740, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_linear);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 740, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "quadratic_model") < 0)) __PYX_ERR(0, 740, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = ((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)values[0]);
    __pyx_v_quadratic = values[1];
    __pyx_v_linear = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("quadratic_model", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 740, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model.quadratic_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_5dwave_12optimization_5model_ArraySymbol, 1, "x", 0))) __PYX_ERR(0, 740, __pyx_L1_error)
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_47quadratic_model(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v_x, __pyx_v_quadratic, __pyx_v_linear);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_47quadratic_model(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_x, PyObject *__pyx_v_quadratic, PyObject *__pyx_v_linear) {
  PyObject *__pyx_v_QuadraticModel = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("quadratic_model", 1);

  /* "dwave/optimization/model.pyx":763
 * 
 *         """
 *         from dwave.optimization.symbols import QuadraticModel             # <<<<<<<<<<<<<<
 *         return QuadraticModel(x, quadratic, linear)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_QuadraticModel);
  __Pyx_GIVEREF(__pyx_n_s_QuadraticModel);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_QuadraticModel)) __PYX_ERR(0, 763, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_QuadraticModel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_QuadraticModel = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":764
 *         """
 *         from dwave.optimization.symbols import QuadraticModel
 *         return QuadraticModel(x, quadratic, linear)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_QuadraticModel);
  __pyx_t_1 = __pyx_v_QuadraticModel; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_3, ((PyObject *)__pyx_v_x), __pyx_v_quadratic, __pyx_v_linear};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":740
 *         return self.num_nodes()
 * 
 *     def quadratic_model(self, ArraySymbol x, quadratic, linear=None):             # <<<<<<<<<<<<<<
 *         """Create a quadratic model from an array and a quadratic model.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.Model.quadratic_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_QuadraticModel);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":767
 * 
 * 
 *     def set(self, Py_ssize_t n, Py_ssize_t min_size = 0, max_size = None):             # <<<<<<<<<<<<<<
 *         """Create a set symbol as a decision variable.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_50set(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_49set, "Create a set symbol as a decision variable.\n\n        Args:\n            n: Values in the set are subsets of ``range(n)``.\n            min_size: Minimum set size. Defaults to ``0``.\n            max_size: Maximum set size. Defaults to ``n``.\n\n        Returns:\n            A set symbol.\n            \n        Examples:\n            This example creates a set symbol of up to 4 elements\n            with values between 0 to 99.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> destinations = model.set(100, max_size=4)\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_50set = {"set", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_50set, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_49set};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_50set(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  Py_ssize_t __pyx_v_n;
  Py_ssize_t __pyx_v_min_size;
  PyObject *__pyx_v_max_size = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_min_size,&__pyx_n_s_max_size,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_n)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 767, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_min_size);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 767, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max_size);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 767, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set") < 0)) __PYX_ERR(0, 767, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_n = __Pyx_PyIndex_AsSsize_t(values[0]); if (unlikely((__pyx_v_n == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 767, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_min_size = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_min_size == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 767, __pyx_L3_error)
    } else {
      __pyx_v_min_size = ((Py_ssize_t)0);
    }
    __pyx_v_max_size = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 767, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_49set(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v_n, __pyx_v_min_size, __pyx_v_max_size);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_49set(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, Py_ssize_t __pyx_v_n, Py_ssize_t __pyx_v_min_size, PyObject *__pyx_v_max_size) {
  PyObject *__pyx_v_SetVariable = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set", 1);

  /* "dwave/optimization/model.pyx":786
 *             >>> destinations = model.set(100, max_size=4)
 *         """
 *         from dwave.optimization.symbols import SetVariable  # avoid circular import             # <<<<<<<<<<<<<<
 *         return SetVariable(self, n, min_size, n if max_size is None else max_size)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_SetVariable);
  __Pyx_GIVEREF(__pyx_n_s_SetVariable);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_SetVariable)) __PYX_ERR(0, 786, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_SetVariable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_SetVariable = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":787
 *         """
 *         from dwave.optimization.symbols import SetVariable  # avoid circular import
 *         return SetVariable(self, n, min_size, n if max_size is None else max_size)             # <<<<<<<<<<<<<<
 * 
 *     def state_size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_min_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_max_size == Py_None);
  if (__pyx_t_5) {
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_n); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __pyx_t_6;
    __pyx_t_6 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_max_size);
    __pyx_t_4 = __pyx_v_max_size;
  }
  __Pyx_INCREF(__pyx_v_SetVariable);
  __pyx_t_6 = __pyx_v_SetVariable; __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_8 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[5] = {__pyx_t_7, ((PyObject *)__pyx_v_self), __pyx_t_1, __pyx_t_3, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 4+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":767
 * 
 * 
 *     def set(self, Py_ssize_t n, Py_ssize_t min_size = 0, max_size = None):             # <<<<<<<<<<<<<<
 *         """Create a set symbol as a decision variable.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("dwave.optimization.model.Model.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_SetVariable);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":789
 *         return SetVariable(self, n, min_size, n if max_size is None else max_size)
 * 
 *     def state_size(self):             # <<<<<<<<<<<<<<
 *         """An estimate of the size, in bytes, of all states in the model.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_52state_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_51state_size, "An estimate of the size, in bytes, of all states in the model.\n\n        Iterates over the model's states and totals the sizes of all. \n        \n        Examples:\n            This example estimates the size of a model's states. \n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> c = model.constant([1, 5, 8.4])\n            >>> i = model.integer(20, upper_bound=100)\n            >>> model.state_size()     \n            184\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_52state_size = {"state_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_52state_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_51state_size};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_52state_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("state_size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("state_size", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "state_size", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_51state_size(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_10state_size_2generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":804
 *             184
 *         """
 *         return sum(sym.state_size() for sym in self.iter_symbols())             # <<<<<<<<<<<<<<
 * 
 *     def to_file(self, **kwargs):
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_10state_size_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 804, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_5Model_10state_size_2generator8, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_state_size_locals_genexpr, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Model.state_size.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_10state_size_2generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 804, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 804, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 804, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 804, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 804, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 804, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 804, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 804, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_sym);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_sym, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_sym, __pyx_n_s_state_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 804, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":789
 *         return SetVariable(self, n, min_size, n if max_size is None else max_size)
 * 
 *     def state_size(self):             # <<<<<<<<<<<<<<
 *         """An estimate of the size, in bytes, of all states in the model.
 * 
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_51state_size(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  PyObject *__pyx_gb_5dwave_12optimization_5model_5Model_10state_size_2generator8 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("state_size", 1);

  /* "dwave/optimization/model.pyx":804
 *             184
 *         """
 *         return sum(sym.state_size() for sym in self.iter_symbols())             # <<<<<<<<<<<<<<
 * 
 *     def to_file(self, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_symbols); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __pyx_pf_5dwave_12optimization_5model_5Model_10state_size_genexpr(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":789
 *         return SetVariable(self, n, min_size, n if max_size is None else max_size)
 * 
 *     def state_size(self):             # <<<<<<<<<<<<<<
 *         """An estimate of the size, in bytes, of all states in the model.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.Model.state_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_5dwave_12optimization_5model_5Model_10state_size_2generator8);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":806
 *         return sum(sym.state_size() for sym in self.iter_symbols())
 * 
 *     def to_file(self, **kwargs):             # <<<<<<<<<<<<<<
 *         """Serialize the model to a new file-like object.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_54to_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_53to_file, "Serialize the model to a new file-like object.\n        \n        See also:\n            :meth:`.into_file`, :meth:`.from_file`\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_54to_file = {"to_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_54to_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_53to_file};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_54to_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("to_file", 1, 0, 0, __pyx_nargs); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "to_file", 1))) return NULL;
  if (__pyx_kwds) {
    __pyx_v_kwargs = __Pyx_KwargsAsDict_FASTCALL(__pyx_kwds, __pyx_kwvalues);
    if (unlikely(!__pyx_v_kwargs)) return NULL;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = PyDict_New();
    if (unlikely(!__pyx_v_kwargs)) return NULL;
    __Pyx_GOTREF(__pyx_v_kwargs);
  }
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_53to_file(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_53to_file(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_file = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_file", 1);

  /* "dwave/optimization/model.pyx":812
 *             :meth:`.into_file`, :meth:`.from_file`
 *         """
 *         file = tempfile.TemporaryFile(mode="w+b")             # <<<<<<<<<<<<<<
 *         self.into_file(file, **kwargs)
 *         file.seek(0)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_tempfile); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TemporaryFile); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mode, __pyx_kp_u_w_b) < 0) __PYX_ERR(0, 812, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_file = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "dwave/optimization/model.pyx":813
 *         """
 *         file = tempfile.TemporaryFile(mode="w+b")
 *         self.into_file(file, **kwargs)             # <<<<<<<<<<<<<<
 *         file.seek(0)
 *         return file
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_into_file); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_file);
  __Pyx_GIVEREF(__pyx_v_file);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_file)) __PYX_ERR(0, 813, __pyx_L1_error);
  __pyx_t_2 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":814
 *         file = tempfile.TemporaryFile(mode="w+b")
 *         self.into_file(file, **kwargs)
 *         file.seek(0)             # <<<<<<<<<<<<<<
 *         return file
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_seek); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_int_0};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":815
 *         self.into_file(file, **kwargs)
 *         file.seek(0)
 *         return file             # <<<<<<<<<<<<<<
 * 
 *     def to_networkx(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_file);
  __pyx_r = __pyx_v_file;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":806
 *         return sum(sym.state_size() for sym in self.iter_symbols())
 * 
 *     def to_file(self, **kwargs):             # <<<<<<<<<<<<<<
 *         """Serialize the model to a new file-like object.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dwave.optimization.model.Model.to_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":817
 *         return file
 * 
 *     def to_networkx(self):             # <<<<<<<<<<<<<<
 *         """Convert the model to a NetworkX graph.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_56to_networkx(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_55to_networkx, "Convert the model to a NetworkX graph.\n        \n        Note:\n            Currently requires the installation of a GNU compiler.  \n        \n        Returns:\n            A :obj:`NetworkX <networkx:networkx.Graph>` graph.\n            \n        Examples:\n            This example converts a model to a graph. \n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> c = model.constant(8)\n            >>> i = model.integer((20, 30))\n            >>> g = model.to_networkx()   # doctest: +SKIP\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_56to_networkx = {"to_networkx", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_56to_networkx, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_55to_networkx};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_56to_networkx(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_networkx (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("to_networkx", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "to_networkx", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_55to_networkx(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_55to_networkx(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  PyObject *__pyx_v_re = NULL;
  PyObject *__pyx_v_networkx = NULL;
  PyObject *__pyx_v_G = NULL;
  dwave::optimization::Node *__pyx_v_ptr;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_match = NULL;
  PyObject *__pyx_v_u = NULL;
  std::vector<dwave::optimization::Node *> ::size_type __pyx_v_j;
  dwave::optimization::Node *__pyx_v_pptr;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_FakeReference<std::type_info const > __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  std::vector<dwave::optimization::Node *> ::size_type __pyx_t_12;
  std::vector<dwave::optimization::Node *> ::size_type __pyx_t_13;
  std::vector<dwave::optimization::Node *> ::size_type __pyx_t_14;
  __Pyx_FakeReference<std::type_info const > __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_networkx", 1);

  /* "dwave/optimization/model.pyx":839
 *         # but it is useful for development
 * 
 *         import re             # <<<<<<<<<<<<<<
 *         import networkx
 * 
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_re, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_re = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":840
 * 
 *         import re
 *         import networkx             # <<<<<<<<<<<<<<
 * 
 *         G = networkx.DiGraph()
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_networkx, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_networkx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":842
 *         import networkx
 * 
 *         G = networkx.DiGraph()             # <<<<<<<<<<<<<<
 * 
 *         cdef cppNode* ptr
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_networkx, __pyx_n_s_DiGraph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_G = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":845
 * 
 *         cdef cppNode* ptr
 *         for i in range(self._graph.num_nodes()):             # <<<<<<<<<<<<<<
 *             ptr = self._graph.nodes()[i].get()
 * 
 */
  __pyx_t_5 = __pyx_v_self->_graph.num_nodes();
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "dwave/optimization/model.pyx":846
 *         cdef cppNode* ptr
 *         for i in range(self._graph.num_nodes()):
 *             ptr = self._graph.nodes()[i].get()             # <<<<<<<<<<<<<<
 * 
 *             # this regex is compiler specific! Don't do this for the general case
 */
    __pyx_v_ptr = (__pyx_v_self->_graph.nodes()[__pyx_v_i]).get();

    /* "dwave/optimization/model.pyx":849
 * 
 *             # this regex is compiler specific! Don't do this for the general case
 *             match = re.search("\d+([a-zA-z]+Node)", str(typeid(deref(ptr)).name()))             # <<<<<<<<<<<<<<
 *             if not match:
 *                 raise ValueError
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_re, __pyx_n_s_search); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    try {
      __pyx_t_8 = typeid((*__pyx_v_ptr));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 849, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_t_8->name()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_kp_u_d_a_zA_z_Node, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_match, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "dwave/optimization/model.pyx":850
 *             # this regex is compiler specific! Don't do this for the general case
 *             match = re.search("\d+([a-zA-z]+Node)", str(typeid(deref(ptr)).name()))
 *             if not match:             # <<<<<<<<<<<<<<
 *                 raise ValueError
 * 
 */
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_match); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 850, __pyx_L1_error)
    __pyx_t_11 = (!__pyx_t_10);
    if (unlikely(__pyx_t_11)) {

      /* "dwave/optimization/model.pyx":851
 *             match = re.search("\d+([a-zA-z]+Node)", str(typeid(deref(ptr)).name()))
 *             if not match:
 *                 raise ValueError             # <<<<<<<<<<<<<<
 * 
 *             u = (match[1], <long>(ptr))
 */
      __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
      __PYX_ERR(0, 851, __pyx_L1_error)

      /* "dwave/optimization/model.pyx":850
 *             # this regex is compiler specific! Don't do this for the general case
 *             match = re.search("\d+([a-zA-z]+Node)", str(typeid(deref(ptr)).name()))
 *             if not match:             # <<<<<<<<<<<<<<
 *                 raise ValueError
 * 
 */
    }

    /* "dwave/optimization/model.pyx":853
 *                 raise ValueError
 * 
 *             u = (match[1], <long>(ptr))             # <<<<<<<<<<<<<<
 * 
 *             G.add_node(u)
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_match, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_v_ptr)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1)) __PYX_ERR(0, 853, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2)) __PYX_ERR(0, 853, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_u, ((PyObject*)__pyx_t_9));
    __pyx_t_9 = 0;

    /* "dwave/optimization/model.pyx":855
 *             u = (match[1], <long>(ptr))
 * 
 *             G.add_node(u)             # <<<<<<<<<<<<<<
 * 
 *             for j in range(ptr.predecessors().size()):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_add_node); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_u};
      __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "dwave/optimization/model.pyx":857
 *             G.add_node(u)
 * 
 *             for j in range(ptr.predecessors().size()):             # <<<<<<<<<<<<<<
 *                 pptr = ptr.predecessors()[j]
 * 
 */
    __pyx_t_12 = __pyx_v_ptr->predecessors().size();
    __pyx_t_13 = __pyx_t_12;
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_v_j = __pyx_t_14;

      /* "dwave/optimization/model.pyx":858
 * 
 *             for j in range(ptr.predecessors().size()):
 *                 pptr = ptr.predecessors()[j]             # <<<<<<<<<<<<<<
 * 
 *                 match = re.search("\d+([a-zA-z]+Node)", str(typeid(deref(pptr)).name()))
 */
      __pyx_v_pptr = (__pyx_v_ptr->predecessors()[__pyx_v_j]);

      /* "dwave/optimization/model.pyx":860
 *                 pptr = ptr.predecessors()[j]
 * 
 *                 match = re.search("\d+([a-zA-z]+Node)", str(typeid(deref(pptr)).name()))             # <<<<<<<<<<<<<<
 *                 if not match:
 *                     raise ValueError
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_re, __pyx_n_s_search); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      try {
        __pyx_t_15 = typeid((*__pyx_v_pptr));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 860, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_t_15->name()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_kp_u_d_a_zA_z_Node, __pyx_t_3};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 860, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_match, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "dwave/optimization/model.pyx":861
 * 
 *                 match = re.search("\d+([a-zA-z]+Node)", str(typeid(deref(pptr)).name()))
 *                 if not match:             # <<<<<<<<<<<<<<
 *                     raise ValueError
 * 
 */
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_match); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 861, __pyx_L1_error)
      __pyx_t_10 = (!__pyx_t_11);
      if (unlikely(__pyx_t_10)) {

        /* "dwave/optimization/model.pyx":862
 *                 match = re.search("\d+([a-zA-z]+Node)", str(typeid(deref(pptr)).name()))
 *                 if not match:
 *                     raise ValueError             # <<<<<<<<<<<<<<
 * 
 *                 v = (match[1], <long>(pptr))
 */
        __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
        __PYX_ERR(0, 862, __pyx_L1_error)

        /* "dwave/optimization/model.pyx":861
 * 
 *                 match = re.search("\d+([a-zA-z]+Node)", str(typeid(deref(pptr)).name()))
 *                 if not match:             # <<<<<<<<<<<<<<
 *                     raise ValueError
 * 
 */
      }

      /* "dwave/optimization/model.pyx":864
 *                     raise ValueError
 * 
 *                 v = (match[1], <long>(pptr))             # <<<<<<<<<<<<<<
 * 
 *                 G.add_edge(v, u)
 */
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_match, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_v_pptr)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_9);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9)) __PYX_ERR(0, 864, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_2);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 864, __pyx_L1_error);
      __pyx_t_9 = 0;
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "dwave/optimization/model.pyx":866
 *                 v = (match[1], <long>(pptr))
 * 
 *                 G.add_edge(v, u)             # <<<<<<<<<<<<<<
 * 
 *         return G
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_add_edge); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_v_v, __pyx_v_u};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 866, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }

  /* "dwave/optimization/model.pyx":868
 *                 G.add_edge(v, u)
 * 
 *         return G             # <<<<<<<<<<<<<<
 * 
 *     def unlock(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_G);
  __pyx_r = __pyx_v_G;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":817
 *         return file
 * 
 *     def to_networkx(self):             # <<<<<<<<<<<<<<
 *         """Convert the model to a NetworkX graph.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("dwave.optimization.model.Model.to_networkx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_re);
  __Pyx_XDECREF(__pyx_v_networkx);
  __Pyx_XDECREF(__pyx_v_G);
  __Pyx_XDECREF(__pyx_v_match);
  __Pyx_XDECREF(__pyx_v_u);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":870
 *         return G
 * 
 *     def unlock(self):             # <<<<<<<<<<<<<<
 *         """Release a lock, decrementing the lock count.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_58unlock(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5Model_57unlock, "Release a lock, decrementing the lock count.\n        \n        Symbols can be added to unlocked models only.\n        \n        See also:\n            :meth:`.is_locked`, :meth:`.lock`\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_58unlock = {"unlock", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_58unlock, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_57unlock};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_58unlock(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unlock (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("unlock", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "unlock", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_57unlock(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_57unlock(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unlock", 1);

  /* "dwave/optimization/model.pyx":878
 *             :meth:`.is_locked`, :meth:`.lock`
 *         """
 *         if self._lock_count < 1:             # <<<<<<<<<<<<<<
 *             return  # already unlocked, nothing to do
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_lock_count < 1);
  if (__pyx_t_1) {

    /* "dwave/optimization/model.pyx":879
 *         """
 *         if self._lock_count < 1:
 *             return  # already unlocked, nothing to do             # <<<<<<<<<<<<<<
 * 
 *         self._lock_count -= 1
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":878
 *             :meth:`.is_locked`, :meth:`.lock`
 *         """
 *         if self._lock_count < 1:             # <<<<<<<<<<<<<<
 *             return  # already unlocked, nothing to do
 * 
 */
  }

  /* "dwave/optimization/model.pyx":881
 *             return  # already unlocked, nothing to do
 * 
 *         self._lock_count -= 1             # <<<<<<<<<<<<<<
 * 
 *         # if we're now unlocked, then reset the topological sort and the
 */
  __pyx_v_self->_lock_count = (__pyx_v_self->_lock_count - 1);

  /* "dwave/optimization/model.pyx":885
 *         # if we're now unlocked, then reset the topological sort and the
 *         # non-decision states
 *         if self._lock_count < 1:             # <<<<<<<<<<<<<<
 *             self._graph.reset_topological_sort()
 *             for i in range(self.states.size()):
 */
  __pyx_t_1 = (__pyx_v_self->_lock_count < 1);
  if (__pyx_t_1) {

    /* "dwave/optimization/model.pyx":886
 *         # non-decision states
 *         if self._lock_count < 1:
 *             self._graph.reset_topological_sort()             # <<<<<<<<<<<<<<
 *             for i in range(self.states.size()):
 *                 # this might actually increase the size of the states in some
 */
    __pyx_v_self->_graph.reset_topological_sort();

    /* "dwave/optimization/model.pyx":887
 *         if self._lock_count < 1:
 *             self._graph.reset_topological_sort()
 *             for i in range(self.states.size()):             # <<<<<<<<<<<<<<
 *                 # this might actually increase the size of the states in some
 *                 # cases, but that's fine
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->states->__pyx_vtab)->size(__pyx_v_self->states, 0); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 887, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "dwave/optimization/model.pyx":890
 *                 # this might actually increase the size of the states in some
 *                 # cases, but that's fine
 *                 self.states._states[i].resize(self.num_decisions())             # <<<<<<<<<<<<<<
 * 
 * 
 */
      try {
        (__pyx_v_self->states->_states[__pyx_v_i]).resize(((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_self->__pyx_vtab)->num_decisions(__pyx_v_self, 0));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 890, __pyx_L1_error)
      }
    }

    /* "dwave/optimization/model.pyx":885
 *         # if we're now unlocked, then reset the topological sort and the
 *         # non-decision states
 *         if self._lock_count < 1:             # <<<<<<<<<<<<<<
 *             self._graph.reset_topological_sort()
 *             for i in range(self.states.size()):
 */
  }

  /* "dwave/optimization/model.pyx":870
 *         return G
 * 
 *     def unlock(self):             # <<<<<<<<<<<<<<
 *         """Release a lock, decrementing the lock count.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Model.unlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pxd":42
 *     cdef cppGraph _graph
 * 
 *     cdef readonly object objective  # todo: cdef ArraySymbol?             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly States states
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_9objective_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_9objective_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_9objective___get__(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_9objective___get__(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->objective);
  __pyx_r = __pyx_v_self->objective;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pxd":44
 *     cdef readonly object objective  # todo: cdef ArraySymbol?
 * 
 *     cdef readonly States states             # <<<<<<<<<<<<<<
 * 
 *     # The number of times "lock()" has been called.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_6states_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_6states_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_6states___get__(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_6states___get__(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->states);
  __pyx_r = ((PyObject *)__pyx_v_self->states);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pxd":47
 * 
 *     # The number of times "lock()" has been called.
 *     cdef readonly Py_ssize_t _lock_count             # <<<<<<<<<<<<<<
 * 
 *     # Used to keep NumPy arrays that own data alive etc etc
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_11_lock_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_11_lock_count_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_11_lock_count___get__(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_11_lock_count___get__(struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->_lock_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.Model._lock_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_60__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_60__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_60__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_60__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_59__reduce_cython__(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_59__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__graph_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Model.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_62__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_5Model_62__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_62__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_5Model_62__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Model.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5Model_61__setstate_cython__(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5Model_61__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__graph_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Model.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":944
 *         0
 *     """
 *     def __init__(self, Model model):             # <<<<<<<<<<<<<<
 *         self._model_ref = weakref.ref(model)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5dwave_12optimization_5model_6States_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5dwave_12optimization_5model_6States_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_model = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_model,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_model)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 944, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 944, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_model = ((struct __pyx_obj_5dwave_12optimization_5model_Model *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 944, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.States.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_model), __pyx_ptype_5dwave_12optimization_5model_Model, 1, "model", 0))) __PYX_ERR(0, 944, __pyx_L1_error)
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States___init__(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self), __pyx_v_model);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5dwave_12optimization_5model_6States___init__(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_model) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "dwave/optimization/model.pyx":945
 *     """
 *     def __init__(self, Model model):
 *         self._model_ref = weakref.ref(model)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_weakref); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ref); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_model)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_model_ref);
  __Pyx_DECREF(__pyx_v_self->_model_ref);
  __pyx_v_self->_model_ref = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":944
 *         0
 *     """
 *     def __init__(self, Model model):             # <<<<<<<<<<<<<<
 *         self._model_ref = weakref.ref(model)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.States.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":947
 *         self._model_ref = weakref.ref(model)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         """The number of model states."""
 *         return self.size()
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_5dwave_12optimization_5model_6States_3__len__(PyObject *__pyx_v_self); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6States_2__len__, "The number of model states.");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_5dwave_12optimization_5model_6States_2__len__;
#endif
static Py_ssize_t __pyx_pw_5dwave_12optimization_5model_6States_3__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_2__len__(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_5dwave_12optimization_5model_6States_2__len__(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "dwave/optimization/model.pyx":949
 *     def __len__(self):
 *         """The number of model states."""
 *         return self.size()             # <<<<<<<<<<<<<<
 * 
 *     cdef void attach_states(self, vector[cppState] states) noexcept:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->size(__pyx_v_self, 0); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 949, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":947
 *         self._model_ref = weakref.ref(model)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         """The number of model states."""
 *         return self.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.States.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":951
 *         return self.size()
 * 
 *     cdef void attach_states(self, vector[cppState] states) noexcept:             # <<<<<<<<<<<<<<
 *         """Attach the given states.
 * 
 */

static void __pyx_f_5dwave_12optimization_5model_6States_attach_states(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, std::vector<dwave::optimization::State>  __pyx_v_states) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attach_states", 1);

  /* "dwave/optimization/model.pyx":963
 *             states: States to be attached.
 *         """
 *         self._future = None             # <<<<<<<<<<<<<<
 *         self._result_hook = None
 *         self._states.swap(states)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_future);
  __Pyx_DECREF(__pyx_v_self->_future);
  __pyx_v_self->_future = Py_None;

  /* "dwave/optimization/model.pyx":964
 *         """
 *         self._future = None
 *         self._result_hook = None             # <<<<<<<<<<<<<<
 *         self._states.swap(states)
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_result_hook);
  __Pyx_DECREF(__pyx_v_self->_result_hook);
  __pyx_v_self->_result_hook = Py_None;

  /* "dwave/optimization/model.pyx":965
 *         self._future = None
 *         self._result_hook = None
 *         self._states.swap(states)             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __pyx_v_self->_states.swap(__pyx_v_states);

  /* "dwave/optimization/model.pyx":951
 *         return self.size()
 * 
 *     cdef void attach_states(self, vector[cppState] states) noexcept:             # <<<<<<<<<<<<<<
 *         """Attach the given states.
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "dwave/optimization/model.pyx":967
 *         self._states.swap(states)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         """Clear any saved states.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_5clear(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6States_4clear, "Clear any saved states.\n\n        Clears any memory allocated to the states.\n        \n        Examples:\n            This example clears a state set on an integer decision symbol.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer(2)\n            >>> model.states.resize(3)\n            >>> i.set_state(0, [3, 5])\n            >>> print(i.state(0))\n            [3. 5.]\n            >>> model.states.clear()\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6States_5clear = {"clear", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_5clear, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_4clear};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_5clear(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("clear", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "clear", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_4clear(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_4clear(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear", 1);

  /* "dwave/optimization/model.pyx":984
 *             >>> model.states.clear()
 *         """
 *         self.detach_states()             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[cppState] detach_states(self):
 */
  ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->detach_states(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 984, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":967
 *         self._states.swap(states)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         """Clear any saved states.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.States.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":986
 *         self.detach_states()
 * 
 *     cdef vector[cppState] detach_states(self):             # <<<<<<<<<<<<<<
 *         """Move the current C++ states into a returned vector.
 * 
 */

static std::vector<dwave::optimization::State>  __pyx_f_5dwave_12optimization_5model_6States_detach_states(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self) {
  std::vector<dwave::optimization::State>  __pyx_v_states;
  std::vector<dwave::optimization::State>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("detach_states", 1);

  /* "dwave/optimization/model.pyx":997
 *             States of the model prior to execution.
 *         """
 *         self.resolve()             # <<<<<<<<<<<<<<
 *         # move should impliclty leave the states in a valid state, but
 *         # just to be super explicit we swap with an empty vector first
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->resolve(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1001
 *         # just to be super explicit we swap with an empty vector first
 *         cdef vector[cppState] states
 *         self._states.swap(states)             # <<<<<<<<<<<<<<
 *         return move(states)
 * 
 */
  __pyx_v_self->_states.swap(__pyx_v_states);

  /* "dwave/optimization/model.pyx":1002
 *         cdef vector[cppState] states
 *         self._states.swap(states)
 *         return move(states)             # <<<<<<<<<<<<<<
 * 
 *     def from_file(self, file, *, bool replace = True, check_header = True):
 */
  __pyx_r = cython_std::move<std::vector<dwave::optimization::State> >(__pyx_v_states);
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":986
 *         self.detach_states()
 * 
 *     cdef vector[cppState] detach_states(self):             # <<<<<<<<<<<<<<
 *         """Move the current C++ states into a returned vector.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.States.detach_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1004
 *         return move(states)
 * 
 *     def from_file(self, file, *, bool replace = True, check_header = True):             # <<<<<<<<<<<<<<
 *         """Construct states from the given file.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_7from_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6States_6from_file, "Construct states from the given file.\n\n        Args:\n            file:\n                File pointer to a readable, seekable file-like object encoding\n                the states. Strings are interpreted as a file name.\n            replace:\n                If ``True``, any held states are replaced with those from the file.\n                If ``False``, the states are appended.\n            check_header:\n                Set to ``False`` to skip file-header check.\n                \n        Returns:\n            A model.\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6States_7from_file = {"from_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_7from_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_6from_file};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_7from_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_file = 0;
  bool __pyx_v_replace;
  PyObject *__pyx_v_check_header = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,&__pyx_n_s_replace,&__pyx_n_s_check_header,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_file)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1004, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 1; index < 3 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1004, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "from_file") < 0)) __PYX_ERR(0, 1004, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_file = values[0];
    if (values[1]) {
      __pyx_v_replace = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_replace == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1004, __pyx_L3_error)
    } else {
      __pyx_v_replace = ((bool)1);
    }
    __pyx_v_check_header = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_file", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1004, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.States.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_6from_file(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self), __pyx_v_file, __pyx_v_replace, __pyx_v_check_header);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_6from_file(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, PyObject *__pyx_v_file, bool __pyx_v_replace, PyObject *__pyx_v_check_header) {
  struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_model = 0;
  PyObject *__pyx_v_n0 = NULL;
  PyObject *__pyx_v_n1 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  std::vector<dwave::optimization::State>  __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_file", 1);

  /* "dwave/optimization/model.pyx":1020
 *             A model.
 *         """
 *         self.resolve()             # <<<<<<<<<<<<<<
 * 
 *         if not replace:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->resolve(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1022
 *         self.resolve()
 * 
 *         if not replace:             # <<<<<<<<<<<<<<
 *             raise NotImplementedError("appending states is not (yet) implemented")
 * 
 */
  __pyx_t_2 = (!(__pyx_v_replace != 0));
  if (unlikely(__pyx_t_2)) {

    /* "dwave/optimization/model.pyx":1023
 * 
 *         if not replace:
 *             raise NotImplementedError("appending states is not (yet) implemented")             # <<<<<<<<<<<<<<
 * 
 *         # todo: we don't need to actually construct a model, but this is nice and
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1023, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":1022
 *         self.resolve()
 * 
 *         if not replace:             # <<<<<<<<<<<<<<
 *             raise NotImplementedError("appending states is not (yet) implemented")
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1027
 *         # todo: we don't need to actually construct a model, but this is nice and
 *         # abstract. We should performance test and then potentially re-implement
 *         cdef Model model = Model.from_file(file, check_header=check_header)             # <<<<<<<<<<<<<<
 * 
 *         # Check that the model is compatible
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model), __pyx_n_s_from_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_file);
  __Pyx_GIVEREF(__pyx_v_file);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_file)) __PYX_ERR(0, 1027, __pyx_L1_error);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_check_header, __pyx_v_check_header) < 0) __PYX_ERR(0, 1027, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5dwave_12optimization_5model_Model))))) __PYX_ERR(0, 1027, __pyx_L1_error)
  __pyx_v_model = ((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "dwave/optimization/model.pyx":1030
 * 
 *         # Check that the model is compatible
 *         for n0, n1 in zip(model.iter_symbols(), self._model().iter_symbols()):             # <<<<<<<<<<<<<<
 *             # todo: replace with proper node quality testing once we have it
 *             if not isinstance(n0, type(n1)):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_model), __pyx_n_s_iter_symbols); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->_model(__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iter_symbols); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5)) __PYX_ERR(0, 1030, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1030, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1030, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1030, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1030, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1030, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1030, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1030, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9);
      index = 0; __pyx_t_5 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_3 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_3)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 1030, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1030, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_n0, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_n1, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "dwave/optimization/model.pyx":1032
 *         for n0, n1 in zip(model.iter_symbols(), self._model().iter_symbols()):
 *             # todo: replace with proper node quality testing once we have it
 *             if not isinstance(n0, type(n1)):             # <<<<<<<<<<<<<<
 *                 raise ValueError("cannot load states into a model with mismatched decisions")
 * 
 */
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_n0, ((PyObject *)Py_TYPE(__pyx_v_n1))); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 1032, __pyx_L1_error)
    __pyx_t_11 = (!__pyx_t_2);
    if (unlikely(__pyx_t_11)) {

      /* "dwave/optimization/model.pyx":1033
 *             # todo: replace with proper node quality testing once we have it
 *             if not isinstance(n0, type(n1)):
 *                 raise ValueError("cannot load states into a model with mismatched decisions")             # <<<<<<<<<<<<<<
 * 
 *         self.attach_states(move(model.states.detach_states()))
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 1033, __pyx_L1_error)

      /* "dwave/optimization/model.pyx":1032
 *         for n0, n1 in zip(model.iter_symbols(), self._model().iter_symbols()):
 *             # todo: replace with proper node quality testing once we have it
 *             if not isinstance(n0, type(n1)):             # <<<<<<<<<<<<<<
 *                 raise ValueError("cannot load states into a model with mismatched decisions")
 * 
 */
    }

    /* "dwave/optimization/model.pyx":1030
 * 
 *         # Check that the model is compatible
 *         for n0, n1 in zip(model.iter_symbols(), self._model().iter_symbols()):             # <<<<<<<<<<<<<<
 *             # todo: replace with proper node quality testing once we have it
 *             if not isinstance(n0, type(n1)):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1035
 *                 raise ValueError("cannot load states into a model with mismatched decisions")
 * 
 *         self.attach_states(move(model.states.detach_states()))             # <<<<<<<<<<<<<<
 * 
 *     def from_future(self, future, result_hook):
 */
  __pyx_t_12 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_model->states->__pyx_vtab)->detach_states(__pyx_v_model->states); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1035, __pyx_L1_error)
  ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->attach_states(__pyx_v_self, cython_std::move<std::vector<dwave::optimization::State> >(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_12)));

  /* "dwave/optimization/model.pyx":1004
 *         return move(states)
 * 
 *     def from_file(self, file, *, bool replace = True, check_header = True):             # <<<<<<<<<<<<<<
 *         """Construct states from the given file.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("dwave.optimization.model.States.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_n0);
  __Pyx_XDECREF(__pyx_v_n1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1037
 *         self.attach_states(move(model.states.detach_states()))
 * 
 *     def from_future(self, future, result_hook):             # <<<<<<<<<<<<<<
 *         """Populate the states from the result of a future computation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_9from_future(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6States_8from_future, "Populate the states from the result of a future computation.\n        \n        A :doc:`Future <oceandocs:docs_cloud/reference/computation>` object is \n        returned by the solver to which your problem model is submitted. This \n        enables asynchronous problem submission. \n        \n        Args:\n            future: ``Future`` object.\n            \n            result_hook: Method executed to retrieve the Future.\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6States_9from_future = {"from_future", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_9from_future, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_8from_future};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_9from_future(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_future = 0;
  PyObject *__pyx_v_result_hook = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_future (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_future,&__pyx_n_s_result_hook,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_future)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1037, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_result_hook)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1037, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("from_future", 1, 2, 2, 1); __PYX_ERR(0, 1037, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "from_future") < 0)) __PYX_ERR(0, 1037, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_future = values[0];
    __pyx_v_result_hook = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_future", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1037, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.States.from_future", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_8from_future(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self), __pyx_v_future, __pyx_v_result_hook);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_8from_future(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, PyObject *__pyx_v_future, PyObject *__pyx_v_result_hook) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_future", 1);

  /* "dwave/optimization/model.pyx":1049
 *             result_hook: Method executed to retrieve the Future.
 *         """
 *         self.resize(0)  # always clears self first             # <<<<<<<<<<<<<<
 * 
 *         self._future = future
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1051
 *         self.resize(0)  # always clears self first
 * 
 *         self._future = future             # <<<<<<<<<<<<<<
 *         self._result_hook = result_hook
 * 
 */
  __Pyx_INCREF(__pyx_v_future);
  __Pyx_GIVEREF(__pyx_v_future);
  __Pyx_GOTREF(__pyx_v_self->_future);
  __Pyx_DECREF(__pyx_v_self->_future);
  __pyx_v_self->_future = __pyx_v_future;

  /* "dwave/optimization/model.pyx":1052
 * 
 *         self._future = future
 *         self._result_hook = result_hook             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self):
 */
  __Pyx_INCREF(__pyx_v_result_hook);
  __Pyx_GIVEREF(__pyx_v_result_hook);
  __Pyx_GOTREF(__pyx_v_self->_result_hook);
  __Pyx_DECREF(__pyx_v_self->_result_hook);
  __pyx_v_self->_result_hook = __pyx_v_result_hook;

  /* "dwave/optimization/model.pyx":1037
 *         self.attach_states(move(model.states.detach_states()))
 * 
 *     def from_future(self, future, result_hook):             # <<<<<<<<<<<<<<
 *         """Populate the states from the result of a future computation.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.States.from_future", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1054
 *         self._result_hook = result_hook
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Initialize any uninitialized states."""
 *         self.resolve()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_11initialize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6States_10initialize, "Initialize any uninitialized states.");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6States_11initialize = {"initialize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_11initialize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_10initialize};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_11initialize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("initialize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "initialize", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_10initialize(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_10initialize(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self) {
  struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_model = 0;
  std::vector<dwave::optimization::State> ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  std::vector<dwave::optimization::State> ::size_type __pyx_t_3;
  std::vector<dwave::optimization::State> ::size_type __pyx_t_4;
  std::vector<dwave::optimization::State> ::size_type __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 1);

  /* "dwave/optimization/model.pyx":1056
 *     def initialize(self):
 *         """Initialize any uninitialized states."""
 *         self.resolve()             # <<<<<<<<<<<<<<
 * 
 *         cdef Model model = self._model()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->resolve(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1058
 *         self.resolve()
 * 
 *         cdef Model model = self._model()             # <<<<<<<<<<<<<<
 * 
 *         if not model.is_locked():
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->_model(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_model = ((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1060
 *         cdef Model model = self._model()
 * 
 *         if not model.is_locked():             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot initialize states of an unlocked model")
 *         for i in range(self._states.size()):
 */
  __pyx_t_2 = (!(((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_model->__pyx_vtab)->is_locked(__pyx_v_model, 0) != 0));
  if (unlikely(__pyx_t_2)) {

    /* "dwave/optimization/model.pyx":1061
 * 
 *         if not model.is_locked():
 *             raise ValueError("Cannot initialize states of an unlocked model")             # <<<<<<<<<<<<<<
 *         for i in range(self._states.size()):
 *             self._states[i].resize(model.num_nodes())
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1061, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1061, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":1060
 *         cdef Model model = self._model()
 * 
 *         if not model.is_locked():             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot initialize states of an unlocked model")
 *         for i in range(self._states.size()):
 */
  }

  /* "dwave/optimization/model.pyx":1062
 *         if not model.is_locked():
 *             raise ValueError("Cannot initialize states of an unlocked model")
 *         for i in range(self._states.size()):             # <<<<<<<<<<<<<<
 *             self._states[i].resize(model.num_nodes())
 *             model._graph.initialize_state(self._states[i])
 */
  __pyx_t_3 = __pyx_v_self->_states.size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "dwave/optimization/model.pyx":1063
 *             raise ValueError("Cannot initialize states of an unlocked model")
 *         for i in range(self._states.size()):
 *             self._states[i].resize(model.num_nodes())             # <<<<<<<<<<<<<<
 *             model._graph.initialize_state(self._states[i])
 * 
 */
    try {
      (__pyx_v_self->_states[__pyx_v_i]).resize(((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_model->__pyx_vtab)->num_nodes(__pyx_v_model, 0));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1063, __pyx_L1_error)
    }

    /* "dwave/optimization/model.pyx":1064
 *         for i in range(self._states.size()):
 *             self._states[i].resize(model.num_nodes())
 *             model._graph.initialize_state(self._states[i])             # <<<<<<<<<<<<<<
 * 
 *     def into_file(self, file):
 */
    try {
      __pyx_v_model->_graph.initialize_state((__pyx_v_self->_states[__pyx_v_i]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1064, __pyx_L1_error)
    }
  }

  /* "dwave/optimization/model.pyx":1054
 *         self._result_hook = result_hook
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Initialize any uninitialized states."""
 *         self.resolve()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.States.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_model);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1066
 *             model._graph.initialize_state(self._states[i])
 * 
 *     def into_file(self, file):             # <<<<<<<<<<<<<<
 *         """Serialize the states into an existing  file.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_13into_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6States_12into_file, "Serialize the states into an existing  file.\n\n        Args:\n            file:\n                File pointer to an existing writeable, seekable file-like \n                object encoding a model. Strings are interpreted as a file \n                name.\n\n        TODO: describe the format\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6States_13into_file = {"into_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_13into_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_12into_file};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_13into_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_file = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("into_file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_file)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "into_file") < 0)) __PYX_ERR(0, 1066, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_file = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("into_file", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1066, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.States.into_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_12into_file(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self), __pyx_v_file);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_12into_file(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, PyObject *__pyx_v_file) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("into_file", 1);

  /* "dwave/optimization/model.pyx":1077
 *         TODO: describe the format
 *         """
 *         self.resolve()             # <<<<<<<<<<<<<<
 *         return self._model().into_file(file, only_decision=True, max_num_states=self.size())
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->resolve(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1078
 *         """
 *         self.resolve()
 *         return self._model().into_file(file, only_decision=True, max_num_states=self.size())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->_model(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_into_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_file);
  __Pyx_GIVEREF(__pyx_v_file);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_file)) __PYX_ERR(0, 1078, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_only_decision, Py_True) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->size(__pyx_v_self, 0); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_max_num_states, __pyx_t_5) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1066
 *             model._graph.initialize_state(self._states[i])
 * 
 *     def into_file(self, file):             # <<<<<<<<<<<<<<
 *         """Serialize the states into an existing  file.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("dwave.optimization.model.States.into_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1081
 * 
 * 
 *     cdef Model _model(self):             # <<<<<<<<<<<<<<
 *         """Get a ref-counted Model object."""
 *         cdef Model m = self._model_ref()
 */

static struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_f_5dwave_12optimization_5model_6States__model(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self) {
  struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_m = 0;
  struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_model", 1);

  /* "dwave/optimization/model.pyx":1083
 *     cdef Model _model(self):
 *         """Get a ref-counted Model object."""
 *         cdef Model m = self._model_ref()             # <<<<<<<<<<<<<<
 *         if m is None:
 *             raise ReferenceError("accessing the states of a garbage collected model")
 */
  __Pyx_INCREF(__pyx_v_self->_model_ref);
  __pyx_t_2 = __pyx_v_self->_model_ref; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1083, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5dwave_12optimization_5model_Model))))) __PYX_ERR(0, 1083, __pyx_L1_error)
  __pyx_v_m = ((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1084
 *         """Get a ref-counted Model object."""
 *         cdef Model m = self._model_ref()
 *         if m is None:             # <<<<<<<<<<<<<<
 *             raise ReferenceError("accessing the states of a garbage collected model")
 *         return m
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_m) == Py_None);
  if (unlikely(__pyx_t_5)) {

    /* "dwave/optimization/model.pyx":1085
 *         cdef Model m = self._model_ref()
 *         if m is None:
 *             raise ReferenceError("accessing the states of a garbage collected model")             # <<<<<<<<<<<<<<
 *         return m
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ReferenceError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1085, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":1084
 *         """Get a ref-counted Model object."""
 *         cdef Model m = self._model_ref()
 *         if m is None:             # <<<<<<<<<<<<<<
 *             raise ReferenceError("accessing the states of a garbage collected model")
 *         return m
 */
  }

  /* "dwave/optimization/model.pyx":1086
 *         if m is None:
 *             raise ReferenceError("accessing the states of a garbage collected model")
 *         return m             # <<<<<<<<<<<<<<
 * 
 *     def resize(self, Py_ssize_t n):
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_m);
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1081
 * 
 * 
 *     cdef Model _model(self):             # <<<<<<<<<<<<<<
 *         """Get a ref-counted Model object."""
 *         cdef Model m = self._model_ref()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.States._model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_m);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1088
 *         return m
 * 
 *     def resize(self, Py_ssize_t n):             # <<<<<<<<<<<<<<
 *         """Resize the number of states.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_15resize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6States_14resize, "Resize the number of states.\n\n        If ``n`` is smaller than the current :meth:`.size()`, \n        states are reduced to the first ``n`` states by removing \n        those beyond. If ``n`` is greater than the current \n        :meth:`.size()`, new uninitialized states are added \n        as needed to reach a size of ``n``.\n\n        Resizing to 0 is not  guaranteed to clear the memory allocated to\n        states.\n        \n        Args:\n            n: Required number of states. \n            \n        Examples:\n            This example adds three uninitialized states to a model.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer(2)\n            >>> model.states.resize(3)\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6States_15resize = {"resize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_15resize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_14resize};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_15resize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  Py_ssize_t __pyx_v_n;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_n)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1088, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "resize") < 0)) __PYX_ERR(0, 1088, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_n = __Pyx_PyIndex_AsSsize_t(values[0]); if (unlikely((__pyx_v_n == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1088, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("resize", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1088, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.States.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_14resize(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self), __pyx_v_n);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_14resize(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, Py_ssize_t __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("resize", 1);

  /* "dwave/optimization/model.pyx":1111
 *             >>> model.states.resize(3)
 *         """
 *         self.resolve()             # <<<<<<<<<<<<<<
 * 
 *         if n < 0:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->resolve(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1113
 *         self.resolve()
 * 
 *         if n < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("n must be a non-negative integer")
 * 
 */
  __pyx_t_2 = (__pyx_v_n < 0);
  if (unlikely(__pyx_t_2)) {

    /* "dwave/optimization/model.pyx":1114
 * 
 *         if n < 0:
 *             raise ValueError("n must be a non-negative integer")             # <<<<<<<<<<<<<<
 * 
 *         self._states.resize(n)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1114, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":1113
 *         self.resolve()
 * 
 *         if n < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("n must be a non-negative integer")
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1116
 *             raise ValueError("n must be a non-negative integer")
 * 
 *         self._states.resize(n)             # <<<<<<<<<<<<<<
 * 
 *     cpdef resolve(self):
 */
  try {
    __pyx_v_self->_states.resize(__pyx_v_n);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1116, __pyx_L1_error)
  }

  /* "dwave/optimization/model.pyx":1088
 *         return m
 * 
 *     def resize(self, Py_ssize_t n):             # <<<<<<<<<<<<<<
 *         """Resize the number of states.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.States.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1118
 *         self._states.resize(n)
 * 
 *     cpdef resolve(self):             # <<<<<<<<<<<<<<
 *         """Block until states are retrieved from any pending future computations.
 * 
 */

static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_17resolve(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_5dwave_12optimization_5model_6States_resolve(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_future = NULL;
  PyObject *__pyx_v_result_hook = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("resolve", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1118, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_5dwave_12optimization_5model_6States_17resolve)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1118, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "dwave/optimization/model.pyx":1125
 *         enables asynchronous problem submission.
 *         """
 *         if self._future is not None:             # <<<<<<<<<<<<<<
 *             # The existance of _future means that anything we do to the
 *             # state will block. So we remove it before calling the hook.
 */
  __pyx_t_6 = (__pyx_v_self->_future != Py_None);
  if (__pyx_t_6) {

    /* "dwave/optimization/model.pyx":1128
 *             # The existance of _future means that anything we do to the
 *             # state will block. So we remove it before calling the hook.
 *             future = self._future             # <<<<<<<<<<<<<<
 *             self._future = None
 *             result_hook = self._result_hook
 */
    __pyx_t_1 = __pyx_v_self->_future;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_future = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "dwave/optimization/model.pyx":1129
 *             # state will block. So we remove it before calling the hook.
 *             future = self._future
 *             self._future = None             # <<<<<<<<<<<<<<
 *             result_hook = self._result_hook
 *             self._result_hook = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_future);
    __Pyx_DECREF(__pyx_v_self->_future);
    __pyx_v_self->_future = Py_None;

    /* "dwave/optimization/model.pyx":1130
 *             future = self._future
 *             self._future = None
 *             result_hook = self._result_hook             # <<<<<<<<<<<<<<
 *             self._result_hook = None
 * 
 */
    __pyx_t_1 = __pyx_v_self->_result_hook;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result_hook = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "dwave/optimization/model.pyx":1131
 *             self._future = None
 *             result_hook = self._result_hook
 *             self._result_hook = None             # <<<<<<<<<<<<<<
 * 
 *             result_hook(self._model(), future)
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_result_hook);
    __Pyx_DECREF(__pyx_v_self->_result_hook);
    __pyx_v_self->_result_hook = Py_None;

    /* "dwave/optimization/model.pyx":1133
 *             self._result_hook = None
 * 
 *             result_hook(self._model(), future)             # <<<<<<<<<<<<<<
 * 
 *     cpdef Py_ssize_t size(self) except -1:
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->_model(__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_result_hook);
    __pyx_t_3 = __pyx_v_result_hook; __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_2, __pyx_v_future};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "dwave/optimization/model.pyx":1125
 *         enables asynchronous problem submission.
 *         """
 *         if self._future is not None:             # <<<<<<<<<<<<<<
 *             # The existance of _future means that anything we do to the
 *             # state will block. So we remove it before calling the hook.
 */
  }

  /* "dwave/optimization/model.pyx":1118
 *         self._states.resize(n)
 * 
 *     cpdef resolve(self):             # <<<<<<<<<<<<<<
 *         """Block until states are retrieved from any pending future computations.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dwave.optimization.model.States.resolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_future);
  __Pyx_XDECREF(__pyx_v_result_hook);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_17resolve(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6States_16resolve, "Block until states are retrieved from any pending future computations.\n        \n        A :doc:`Future <oceandocs:docs_cloud/reference/computation>` object is \n        returned by the solver to which your problem model is submitted. This \n        enables asynchronous problem submission. \n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6States_17resolve = {"resolve", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_17resolve, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_16resolve};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_17resolve(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resolve (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("resolve", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "resolve", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_16resolve(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_16resolve(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("resolve", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5dwave_12optimization_5model_6States_resolve(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.States.resolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1135
 *             result_hook(self._model(), future)
 * 
 *     cpdef Py_ssize_t size(self) except -1:             # <<<<<<<<<<<<<<
 *         """Number of model states.
 * 
 */

static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_19size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static Py_ssize_t __pyx_f_5dwave_12optimization_5model_6States_size(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_5dwave_12optimization_5model_6States_19size)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "dwave/optimization/model.pyx":1148
 *             3
 *         """
 *         self.resolve()             # <<<<<<<<<<<<<<
 *         return self._states.size()
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->resolve(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1149
 *         """
 *         self.resolve()
 *         return self._states.size()             # <<<<<<<<<<<<<<
 * 
 *     def to_file(self):
 */
  __pyx_r = __pyx_v_self->_states.size();
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1135
 *             result_hook(self._model(), future)
 * 
 *     cpdef Py_ssize_t size(self) except -1:             # <<<<<<<<<<<<<<
 *         """Number of model states.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dwave.optimization.model.States.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_19size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6States_18size, "Number of model states.\n        \n        Examples:\n            This example adds three uninitialized states to a model and\n            verifies the number of model states.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> model.states.resize(3)\n            >>> model.states.size()\n            3\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6States_19size = {"size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_19size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_18size};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_19size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("size", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "size", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_18size(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_18size(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5dwave_12optimization_5model_6States_size(__pyx_v_self, 1); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 1135, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dwave.optimization.model.States.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1151
 *         return self._states.size()
 * 
 *     def to_file(self):             # <<<<<<<<<<<<<<
 *         """Serialize the states to a new file-like object."""
 *         self.resolve()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_21to_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6States_20to_file, "Serialize the states to a new file-like object.");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6States_21to_file = {"to_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_21to_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_20to_file};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_21to_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("to_file", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "to_file", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_20to_file(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_20to_file(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_file", 1);

  /* "dwave/optimization/model.pyx":1153
 *     def to_file(self):
 *         """Serialize the states to a new file-like object."""
 *         self.resolve()             # <<<<<<<<<<<<<<
 *         return self._model().to_file(only_decision=True, max_num_states=self.size())
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->resolve(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1154
 *         """Serialize the states to a new file-like object."""
 *         self.resolve()
 *         return self._model().to_file(only_decision=True, max_num_states=self.size())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->_model(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_to_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_only_decision, Py_True) < 0) __PYX_ERR(0, 1154, __pyx_L1_error)
  __pyx_t_3 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_vtab)->size(__pyx_v_self, 0); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 1154, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_max_num_states, __pyx_t_4) < 0) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1151
 *         return self._states.size()
 * 
 *     def to_file(self):             # <<<<<<<<<<<<<<
 *         """Serialize the states to a new file-like object."""
 *         self.resolve()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dwave.optimization.model.States.to_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pxd":68
 *     # to the model from the states. This introduces some overhead, but it
 *     # makes sure that the Model is promptly garbage collected
 *     cdef readonly object _model_ref             # <<<<<<<<<<<<<<
 * 
 *     # The state(s) of the model kept as a ragged vector-of-vectors (each
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_10_model_ref_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_10_model_ref_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_10_model_ref___get__(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_10_model_ref___get__(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_model_ref);
  __pyx_r = __pyx_v_self->_model_ref;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pxd":80
 * 
 *     # Object that contains or will contain the information needed to construct states
 *     cdef readonly object _future             # <<<<<<<<<<<<<<
 *     cdef readonly object _result_hook
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_7_future_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_7_future_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_7_future___get__(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_7_future___get__(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_future);
  __pyx_r = __pyx_v_self->_future;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pxd":81
 *     # Object that contains or will contain the information needed to construct states
 *     cdef readonly object _future
 *     cdef readonly object _result_hook             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_12_result_hook_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_12_result_hook_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_12_result_hook___get__(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_12_result_hook___get__(struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_result_hook);
  __pyx_r = __pyx_v_self->_result_hook;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_23__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6States_23__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_23__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_23__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_22__reduce_cython__(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__states_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.States.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_25__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6States_25__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_25__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6States_25__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.States.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6States_24__setstate_cython__(((struct __pyx_obj_5dwave_12optimization_5model_States *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6States_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__states_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.States.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1163
 *     the problem.
 *     """
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         # disallow direct construction of symbols, they should be constructed
 *         # via their subclasses.
 */

/* Python wrapper */
static int __pyx_pw_5dwave_12optimization_5model_6Symbol_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5dwave_12optimization_5model_6Symbol_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol___init__(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5dwave_12optimization_5model_6Symbol___init__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "dwave/optimization/model.pyx":1166
 *         # disallow direct construction of symbols, they should be constructed
 *         # via their subclasses.
 *         raise ValueError("Symbols cannot be constructed directly")             # <<<<<<<<<<<<<<
 * 
 *     cdef void initialize_node(self, Model model, cppNode* node_ptr) noexcept:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1166, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1163
 *     the problem.
 *     """
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         # disallow direct construction of symbols, they should be constructed
 *         # via their subclasses.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1168
 *         raise ValueError("Symbols cannot be constructed directly")
 * 
 *     cdef void initialize_node(self, Model model, cppNode* node_ptr) noexcept:             # <<<<<<<<<<<<<<
 *         self.model = model
 * 
 */

static void __pyx_f_5dwave_12optimization_5model_6Symbol_initialize_node(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_model, dwave::optimization::Node *__pyx_v_node_ptr) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize_node", 1);

  /* "dwave/optimization/model.pyx":1169
 * 
 *     cdef void initialize_node(self, Model model, cppNode* node_ptr) noexcept:
 *         self.model = model             # <<<<<<<<<<<<<<
 * 
 *         self.node_ptr = node_ptr
 */
  __Pyx_INCREF((PyObject *)__pyx_v_model);
  __Pyx_GIVEREF((PyObject *)__pyx_v_model);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->model);
  __Pyx_DECREF((PyObject *)__pyx_v_self->model);
  __pyx_v_self->model = __pyx_v_model;

  /* "dwave/optimization/model.pyx":1171
 *         self.model = model
 * 
 *         self.node_ptr = node_ptr             # <<<<<<<<<<<<<<
 *         self.expired_ptr = node_ptr.expired_ptr()
 * 
 */
  __pyx_v_self->node_ptr = __pyx_v_node_ptr;

  /* "dwave/optimization/model.pyx":1172
 * 
 *         self.node_ptr = node_ptr
 *         self.expired_ptr = node_ptr.expired_ptr()             # <<<<<<<<<<<<<<
 * 
 *     def equals(self, other):
 */
  __pyx_v_self->expired_ptr = __pyx_v_node_ptr->expired_ptr();

  /* "dwave/optimization/model.pyx":1168
 *         raise ValueError("Symbols cannot be constructed directly")
 * 
 *     cdef void initialize_node(self, Model model, cppNode* node_ptr) noexcept:             # <<<<<<<<<<<<<<
 *         self.model = model
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "dwave/optimization/model.pyx":1174
 *         self.expired_ptr = node_ptr.expired_ptr()
 * 
 *     def equals(self, other):             # <<<<<<<<<<<<<<
 *         """Compare whether two nodes are identical.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_3equals(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6Symbol_2equals, "Compare whether two nodes are identical. \n        \n        Args:\n            other: A node for comparison. \n        \n        Equal nodes represent the same quantity in the model.\n\n        Note that comparing nodes across models is expensive.\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_3equals = {"equals", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_3equals, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_2equals};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_3equals(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("equals (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1174, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "equals") < 0)) __PYX_ERR(0, 1174, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("equals", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1174, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_2equals(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self), __pyx_v_other);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_6Symbol_6equals_2generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":1189
 * 
 *         # todo: caching
 *         return all(p.equals(q) for p, q in zip(self.iter_predecessors(), other.iter_predecessors()))             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool expired(self) noexcept:
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_6equals_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1189, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_6Symbol_6equals_2generator9, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_equals_locals_genexpr, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.equals.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_6Symbol_6equals_2generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1189, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 1189, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1189, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1189, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1189, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1189, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1189, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1189, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1189, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1189, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1189, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7);
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 1189, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1189, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_p);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_p, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_q);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_q, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_p, __pyx_n_s_equals); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    __pyx_t_9 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_9 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_q};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = (!__pyx_t_10);
    if (__pyx_t_11) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1174
 *         self.expired_ptr = node_ptr.expired_ptr()
 * 
 *     def equals(self, other):             # <<<<<<<<<<<<<<
 *         """Compare whether two nodes are identical.
 * 
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_2equals(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, PyObject *__pyx_v_other) {
  Py_ssize_t __pyx_v_maybe;
  PyObject *__pyx_gb_5dwave_12optimization_5model_6Symbol_6equals_2generator9 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("equals", 1);

  /* "dwave/optimization/model.pyx":1184
 *         Note that comparing nodes across models is expensive.
 *         """
 *         cdef Py_ssize_t maybe = self.maybe_equals(other)             # <<<<<<<<<<<<<<
 *         if maybe != 1:
 *             return True if maybe else False
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_maybe_equals); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_other};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_maybe = __pyx_t_5;

  /* "dwave/optimization/model.pyx":1185
 *         """
 *         cdef Py_ssize_t maybe = self.maybe_equals(other)
 *         if maybe != 1:             # <<<<<<<<<<<<<<
 *             return True if maybe else False
 * 
 */
  __pyx_t_6 = (__pyx_v_maybe != 1);
  if (__pyx_t_6) {

    /* "dwave/optimization/model.pyx":1186
 *         cdef Py_ssize_t maybe = self.maybe_equals(other)
 *         if maybe != 1:
 *             return True if maybe else False             # <<<<<<<<<<<<<<
 * 
 *         # todo: caching
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = (__pyx_v_maybe != 0);
    if (__pyx_t_6) {
      __Pyx_INCREF(Py_True);
      __pyx_t_1 = Py_True;
    } else {
      __Pyx_INCREF(Py_False);
      __pyx_t_1 = Py_False;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1185
 *         """
 *         cdef Py_ssize_t maybe = self.maybe_equals(other)
 *         if maybe != 1:             # <<<<<<<<<<<<<<
 *             return True if maybe else False
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1189
 * 
 *         # todo: caching
 *         return all(p.equals(q) for p, q in zip(self.iter_predecessors(), other.iter_predecessors()))             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool expired(self) noexcept:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_predecessors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_iter_predecessors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 1189, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 1189, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_pf_5dwave_12optimization_5model_6Symbol_6equals_genexpr(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1174
 *         self.expired_ptr = node_ptr.expired_ptr()
 * 
 *     def equals(self, other):             # <<<<<<<<<<<<<<
 *         """Compare whether two nodes are identical.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_5dwave_12optimization_5model_6Symbol_6equals_2generator9);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1191
 *         return all(p.equals(q) for p, q in zip(self.iter_predecessors(), other.iter_predecessors()))
 * 
 *     cpdef bool expired(self) noexcept:             # <<<<<<<<<<<<<<
 *         return deref(self.expired_ptr)
 * 
 */

static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_5expired(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static bool __pyx_f_5dwave_12optimization_5model_6Symbol_expired(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, int __pyx_skip_dispatch) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("expired", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_expired); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_5dwave_12optimization_5model_6Symbol_5expired)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1191, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1191, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "dwave/optimization/model.pyx":1192
 * 
 *     cpdef bool expired(self) noexcept:
 *         return deref(self.expired_ptr)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __pyx_r = (*__pyx_v_self->expired_ptr);
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1191
 *         return all(p.equals(q) for p, q in zip(self.iter_predecessors(), other.iter_predecessors()))
 * 
 *     cpdef bool expired(self) noexcept:             # <<<<<<<<<<<<<<
 *         return deref(self.expired_ptr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("dwave.optimization.model.Symbol.expired", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_5expired(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_5expired = {"expired", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_5expired, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_5expired(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("expired (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("expired", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "expired", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_4expired(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_4expired(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("expired", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_5dwave_12optimization_5model_6Symbol_expired(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.expired", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1194
 *         return deref(self.expired_ptr)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def _from_zipfile(cls, zf, directory, Model model, predecessors):
 *         """Construct a node from a compressed file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_7_from_zipfile(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6Symbol_6_from_zipfile, "Construct a node from a compressed file.\n\n        Args:\n            zf:\n                File pointer to a compressed file encoding\n                a node. Strings are interpreted as a file name.\n            directory:\n                Directory where the file is located.\n            model:\n                The relevant :class:`~dwave.optimization.model.Model`.\n            predecessors:\n                Not currently supported.\n        Returns:\n            A node.\n\n        See also:\n            :meth:`._into_zipfile`\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_7_from_zipfile = {"_from_zipfile", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_7_from_zipfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_6_from_zipfile};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_7_from_zipfile(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_zf = 0;
  CYTHON_UNUSED PyObject *__pyx_v_directory = 0;
  CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_model = 0;
  PyObject *__pyx_v_predecessors = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_from_zipfile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zf,&__pyx_n_s_directory,&__pyx_n_s_model,&__pyx_n_s_predecessors,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1194, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_directory)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1194, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_from_zipfile", 1, 4, 4, 1); __PYX_ERR(0, 1194, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_model)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1194, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_from_zipfile", 1, 4, 4, 2); __PYX_ERR(0, 1194, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_predecessors)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1194, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_from_zipfile", 1, 4, 4, 3); __PYX_ERR(0, 1194, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_from_zipfile") < 0)) __PYX_ERR(0, 1194, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_zf = values[0];
    __pyx_v_directory = values[1];
    __pyx_v_model = ((struct __pyx_obj_5dwave_12optimization_5model_Model *)values[2]);
    __pyx_v_predecessors = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_from_zipfile", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 1194, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Symbol._from_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_model), __pyx_ptype_5dwave_12optimization_5model_Model, 1, "model", 0))) __PYX_ERR(0, 1195, __pyx_L1_error)
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_6_from_zipfile(((PyTypeObject*)__pyx_v_cls), __pyx_v_zf, __pyx_v_directory, __pyx_v_model, __pyx_v_predecessors);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_6_from_zipfile(PyTypeObject *__pyx_v_cls, CYTHON_UNUSED PyObject *__pyx_v_zf, CYTHON_UNUSED PyObject *__pyx_v_directory, CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Model *__pyx_v_model, PyObject *__pyx_v_predecessors) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_from_zipfile", 1);

  /* "dwave/optimization/model.pyx":1215
 *         """
 *         # Many symbols are constructed using this pattern, so we do it as default.
 *         return cls(*predecessors)             # <<<<<<<<<<<<<<
 * 
 *     def has_state(self, Py_ssize_t index = 0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_v_predecessors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_cls), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1194
 *         return deref(self.expired_ptr)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def _from_zipfile(cls, zf, directory, Model model, predecessors):
 *         """Construct a node from a compressed file.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dwave.optimization.model.Symbol._from_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1217
 *         return cls(*predecessors)
 * 
 *     def has_state(self, Py_ssize_t index = 0):             # <<<<<<<<<<<<<<
 *         """Return the initialization status of the indexed state.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_9has_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6Symbol_8has_state, "Return the initialization status of the indexed state.\n        \n        Args:\n            index: Index of the queried state.\n            \n        Returns:\n            True if the state is initialized.\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_9has_state = {"has_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_9has_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_8has_state};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_9has_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  Py_ssize_t __pyx_v_index;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_state (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_index);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1217, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "has_state") < 0)) __PYX_ERR(0, 1217, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_index = __Pyx_PyIndex_AsSsize_t(values[0]); if (unlikely((__pyx_v_index == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1217, __pyx_L3_error)
    } else {
      __pyx_v_index = ((Py_ssize_t)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_state", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1217, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.has_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_8has_state(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self), __pyx_v_index);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_8has_state(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, Py_ssize_t __pyx_v_index) {
  Py_ssize_t __pyx_v_num_states;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_state", 1);

  /* "dwave/optimization/model.pyx":1226
 *             True if the state is initialized.
 *         """
 *         if not self.model.is_locked() and self.node_ptr.topological_index() < 0:             # <<<<<<<<<<<<<<
 *             raise TypeError("the state of an intermediate variable cannot be accessed without "
 *                             "locking the model first. See model.lock().")
 */
  __pyx_t_2 = (!(((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_self->model->__pyx_vtab)->is_locked(__pyx_v_self->model, 0) != 0));
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->node_ptr->topological_index() < 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "dwave/optimization/model.pyx":1227
 *         """
 *         if not self.model.is_locked() and self.node_ptr.topological_index() < 0:
 *             raise TypeError("the state of an intermediate variable cannot be accessed without "             # <<<<<<<<<<<<<<
 *                             "locking the model first. See model.lock().")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1227, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":1226
 *             True if the state is initialized.
 *         """
 *         if not self.model.is_locked() and self.node_ptr.topological_index() < 0:             # <<<<<<<<<<<<<<
 *             raise TypeError("the state of an intermediate variable cannot be accessed without "
 *                             "locking the model first. See model.lock().")
 */
  }

  /* "dwave/optimization/model.pyx":1230
 *                             "locking the model first. See model.lock().")
 * 
 *         cdef Py_ssize_t num_states = self.model.states.size()             # <<<<<<<<<<<<<<
 * 
 *         if not -num_states <= index < num_states:
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->model->states->__pyx_vtab)->size(__pyx_v_self->model->states, 0); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 1230, __pyx_L1_error)
  __pyx_v_num_states = __pyx_t_4;

  /* "dwave/optimization/model.pyx":1232
 *         cdef Py_ssize_t num_states = self.model.states.size()
 * 
 *         if not -num_states <= index < num_states:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"index out of range: {index}")
 *         if index < 0:  # allow negative indexing
 */
  __pyx_t_1 = ((-__pyx_v_num_states) <= __pyx_v_index);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_index < __pyx_v_num_states);
  }
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "dwave/optimization/model.pyx":1233
 * 
 *         if not -num_states <= index < num_states:
 *             raise ValueError(f"index out of range: {index}")             # <<<<<<<<<<<<<<
 *         if index < 0:  # allow negative indexing
 *             index += num_states
 */
    __pyx_t_3 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_index, 0, ' ', 'd'); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_index_out_of_range, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1233, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":1232
 *         cdef Py_ssize_t num_states = self.model.states.size()
 * 
 *         if not -num_states <= index < num_states:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"index out of range: {index}")
 *         if index < 0:  # allow negative indexing
 */
  }

  /* "dwave/optimization/model.pyx":1234
 *         if not -num_states <= index < num_states:
 *             raise ValueError(f"index out of range: {index}")
 *         if index < 0:  # allow negative indexing             # <<<<<<<<<<<<<<
 *             index += num_states
 * 
 */
  __pyx_t_2 = (__pyx_v_index < 0);
  if (__pyx_t_2) {

    /* "dwave/optimization/model.pyx":1235
 *             raise ValueError(f"index out of range: {index}")
 *         if index < 0:  # allow negative indexing
 *             index += num_states             # <<<<<<<<<<<<<<
 * 
 *         self.model.states.resolve()
 */
    __pyx_v_index = (__pyx_v_index + __pyx_v_num_states);

    /* "dwave/optimization/model.pyx":1234
 *         if not -num_states <= index < num_states:
 *             raise ValueError(f"index out of range: {index}")
 *         if index < 0:  # allow negative indexing             # <<<<<<<<<<<<<<
 *             index += num_states
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1237
 *             index += num_states
 * 
 *         self.model.states.resolve()             # <<<<<<<<<<<<<<
 * 
 *         # States are extended lazily, so if the state isn't yet long enough then this
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->model->states->__pyx_vtab)->resolve(__pyx_v_self->model->states, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "dwave/optimization/model.pyx":1241
 *         # States are extended lazily, so if the state isn't yet long enough then this
 *         # node's state has not been initialized
 *         if <Py_ssize_t>(self.model.states._states[index].size()) <= self.node_ptr.topological_index():             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  __pyx_t_2 = (((Py_ssize_t)(__pyx_v_self->model->states->_states[__pyx_v_index]).size()) <= __pyx_v_self->node_ptr->topological_index());
  if (__pyx_t_2) {

    /* "dwave/optimization/model.pyx":1242
 *         # node's state has not been initialized
 *         if <Py_ssize_t>(self.model.states._states[index].size()) <= self.node_ptr.topological_index():
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         # Check that the state pointer is not null
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1241
 *         # States are extended lazily, so if the state isn't yet long enough then this
 *         # node's state has not been initialized
 *         if <Py_ssize_t>(self.model.states._states[index].size()) <= self.node_ptr.topological_index():             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1246
 *         # Check that the state pointer is not null
 *         # We need to explicitly cast to evoke unique_ptr's operator bool
 *         return <bool>(self.model.states._states[index][self.node_ptr.topological_index()])             # <<<<<<<<<<<<<<
 * 
 *     def _into_zipfile(self, zf, directory):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(((bool)((__pyx_v_self->model->states->_states[__pyx_v_index])[__pyx_v_self->node_ptr->topological_index()]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1217
 *         return cls(*predecessors)
 * 
 *     def has_state(self, Py_ssize_t index = 0):             # <<<<<<<<<<<<<<
 *         """Return the initialization status of the indexed state.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.has_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1248
 *         return <bool>(self.model.states._states[index][self.node_ptr.topological_index()])
 * 
 *     def _into_zipfile(self, zf, directory):             # <<<<<<<<<<<<<<
 *         """Store node-specific information to a compressed file.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_11_into_zipfile(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6Symbol_10_into_zipfile, "Store node-specific information to a compressed file.\n\n        Args:\n            zf:\n                File pointer to a compressed file to store the\n                node. Strings are interpreted as a file name.\n            directory:\n                Directory where the file is located.\n        Returns:\n            A compressed file.\n\n        See also:\n            :meth:`._from_zipfile`\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_11_into_zipfile = {"_into_zipfile", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_11_into_zipfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_10_into_zipfile};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_11_into_zipfile(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_zf = 0;
  CYTHON_UNUSED PyObject *__pyx_v_directory = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_into_zipfile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zf,&__pyx_n_s_directory,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_directory)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_into_zipfile", 1, 2, 2, 1); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_into_zipfile") < 0)) __PYX_ERR(0, 1248, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_zf = values[0];
    __pyx_v_directory = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_into_zipfile", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1248, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Symbol._into_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_10_into_zipfile(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self), __pyx_v_zf, __pyx_v_directory);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_10_into_zipfile(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_zf, CYTHON_UNUSED PyObject *__pyx_v_directory) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_into_zipfile", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_6Symbol_14generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":1266
 *         pass
 * 
 *     def iter_predecessors(self):             # <<<<<<<<<<<<<<
 *         """Iterate over a node's predecessors in the model.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_13iter_predecessors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6Symbol_12iter_predecessors, "Iterate over a node's predecessors in the model.\n        \n        Examples:\n            This example constructs a :math:`b = \\sum a` model, where :math:`a` \n            is a multiplication of two symbols, and iterates over the \n            predecessor's of :math:`b` (which is just :math:`a`).\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> i = model.integer((2, 2), upper_bound=20)\n            >>> c = model.constant([[21, 11], [10, 4]])\n            >>> a = c * i\n            >>> b = a.sum()\n            >>> a.equals(next(b.iter_predecessors()))\n            True\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_13iter_predecessors = {"iter_predecessors", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_13iter_predecessors, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_12iter_predecessors};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_13iter_predecessors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_predecessors (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("iter_predecessors", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "iter_predecessors", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_12iter_predecessors(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_12iter_predecessors(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_predecessors", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1266, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_6Symbol_14generator4, __pyx_codeobj__38, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_predecessors, __pyx_n_s_Symbol_iter_predecessors, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 1266, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.iter_predecessors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_6Symbol_14generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_predecessors", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1266, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1283
 *             True
 *         """
 *         cdef vector[cppNode*].const_iterator it = self.node_ptr.predecessors().begin()             # <<<<<<<<<<<<<<
 *         cdef vector[cppNode*].const_iterator end = self.node_ptr.predecessors().end()
 *         while it != end:
 */
  try {
    __pyx_cur_scope->__pyx_v_it = __pyx_cur_scope->__pyx_v_self->node_ptr->predecessors().begin();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1283, __pyx_L1_error)
  }

  /* "dwave/optimization/model.pyx":1284
 *         """
 *         cdef vector[cppNode*].const_iterator it = self.node_ptr.predecessors().begin()
 *         cdef vector[cppNode*].const_iterator end = self.node_ptr.predecessors().end()             # <<<<<<<<<<<<<<
 *         while it != end:
 *             yield symbol_from_ptr(self.model, deref(it))
 */
  try {
    __pyx_cur_scope->__pyx_v_end = __pyx_cur_scope->__pyx_v_self->node_ptr->predecessors().end();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1284, __pyx_L1_error)
  }

  /* "dwave/optimization/model.pyx":1285
 *         cdef vector[cppNode*].const_iterator it = self.node_ptr.predecessors().begin()
 *         cdef vector[cppNode*].const_iterator end = self.node_ptr.predecessors().end()
 *         while it != end:             # <<<<<<<<<<<<<<
 *             yield symbol_from_ptr(self.model, deref(it))
 *             inc(it)
 */
  while (1) {
    __pyx_t_1 = (__pyx_cur_scope->__pyx_v_it != __pyx_cur_scope->__pyx_v_end);
    if (!__pyx_t_1) break;

    /* "dwave/optimization/model.pyx":1286
 *         cdef vector[cppNode*].const_iterator end = self.node_ptr.predecessors().end()
 *         while it != end:
 *             yield symbol_from_ptr(self.model, deref(it))             # <<<<<<<<<<<<<<
 *             inc(it)
 * 
 */
    __pyx_t_2 = ((PyObject *)__pyx_cur_scope->__pyx_v_self->model);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = __pyx_fuse_0__pyx_f_5dwave_12optimization_7symbols_symbol_from_ptr(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_t_2), (*__pyx_cur_scope->__pyx_v_it)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1286, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":1287
 *         while it != end:
 *             yield symbol_from_ptr(self.model, deref(it))
 *             inc(it)             # <<<<<<<<<<<<<<
 * 
 *     def iter_successors(self):
 */
    (void)((++__pyx_cur_scope->__pyx_v_it));
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "dwave/optimization/model.pyx":1266
 *         pass
 * 
 *     def iter_predecessors(self):             # <<<<<<<<<<<<<<
 *         """Iterate over a node's predecessors in the model.
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("iter_predecessors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_6Symbol_17generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":1289
 *             inc(it)
 * 
 *     def iter_successors(self):             # <<<<<<<<<<<<<<
 *         """Iterate over a node's successors in the model.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_16iter_successors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6Symbol_15iter_successors, "Iterate over a node's successors in the model.\n        \n        Examples:\n            This example constructs iterates over the successor nodes\n            of a :class:`~dwave.optimization.symbols.DisjointLists`\n            symbol.\n            \n            >>> from dwave.optimization.model import Model\n            >>> model = Model()\n            >>> lsymbol, lsymbol_lists = model.disjoint_lists(\n            ...     primary_set_size=5, \n            ...     num_disjoint_lists=2)\n            >>> lsymbol_lists[0].equals(next(lsymbol.iter_successors()))\n            True\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_16iter_successors = {"iter_successors", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_16iter_successors, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_15iter_successors};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_16iter_successors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_successors (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("iter_successors", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "iter_successors", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_15iter_successors(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_15iter_successors(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_successors", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1289, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_6Symbol_17generator5, __pyx_codeobj__39, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_successors, __pyx_n_s_Symbol_iter_successors, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 1289, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.iter_successors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_6Symbol_17generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_successors", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1289, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1305
 *             True
 *         """
 *         cdef vector[cppNode.SuccessorView].const_iterator it = self.node_ptr.successors().begin()             # <<<<<<<<<<<<<<
 *         cdef vector[cppNode.SuccessorView].const_iterator end = self.node_ptr.successors().end()
 *         while it != end:
 */
  try {
    __pyx_cur_scope->__pyx_v_it = __pyx_cur_scope->__pyx_v_self->node_ptr->successors().begin();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1305, __pyx_L1_error)
  }

  /* "dwave/optimization/model.pyx":1306
 *         """
 *         cdef vector[cppNode.SuccessorView].const_iterator it = self.node_ptr.successors().begin()
 *         cdef vector[cppNode.SuccessorView].const_iterator end = self.node_ptr.successors().end()             # <<<<<<<<<<<<<<
 *         while it != end:
 *             yield symbol_from_ptr(self.model, deref(it).ptr)
 */
  try {
    __pyx_cur_scope->__pyx_v_end = __pyx_cur_scope->__pyx_v_self->node_ptr->successors().end();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1306, __pyx_L1_error)
  }

  /* "dwave/optimization/model.pyx":1307
 *         cdef vector[cppNode.SuccessorView].const_iterator it = self.node_ptr.successors().begin()
 *         cdef vector[cppNode.SuccessorView].const_iterator end = self.node_ptr.successors().end()
 *         while it != end:             # <<<<<<<<<<<<<<
 *             yield symbol_from_ptr(self.model, deref(it).ptr)
 *             inc(it)
 */
  while (1) {
    __pyx_t_1 = (__pyx_cur_scope->__pyx_v_it != __pyx_cur_scope->__pyx_v_end);
    if (!__pyx_t_1) break;

    /* "dwave/optimization/model.pyx":1308
 *         cdef vector[cppNode.SuccessorView].const_iterator end = self.node_ptr.successors().end()
 *         while it != end:
 *             yield symbol_from_ptr(self.model, deref(it).ptr)             # <<<<<<<<<<<<<<
 *             inc(it)
 * 
 */
    __pyx_t_2 = ((PyObject *)__pyx_cur_scope->__pyx_v_self->model);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = __pyx_fuse_0__pyx_f_5dwave_12optimization_7symbols_symbol_from_ptr(((struct __pyx_obj_5dwave_12optimization_5model_Model *)__pyx_t_2), (*__pyx_cur_scope->__pyx_v_it).ptr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1308, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":1309
 *         while it != end:
 *             yield symbol_from_ptr(self.model, deref(it).ptr)
 *             inc(it)             # <<<<<<<<<<<<<<
 * 
 *     def maybe_equals(self, other):
 */
    (void)((++__pyx_cur_scope->__pyx_v_it));
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "dwave/optimization/model.pyx":1289
 *             inc(it)
 * 
 *     def iter_successors(self):             # <<<<<<<<<<<<<<
 *         """Iterate over a node's successors in the model.
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("iter_successors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1311
 *             inc(it)
 * 
 *     def maybe_equals(self, other):             # <<<<<<<<<<<<<<
 *         """Compare to another node.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_19maybe_equals(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6Symbol_18maybe_equals, "Compare to another node.\n        \n        Args:\n            other: Another node in the model's directed acyclic graph.\n            \n        Returns: integer\n            Supported return values are:\n            \n            *   ``0``---Not equal.\n            *   ``1``---Might be equal.\n            *   ``2``---Are equal.\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_19maybe_equals = {"maybe_equals", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_19maybe_equals, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_18maybe_equals};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_19maybe_equals(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("maybe_equals (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1311, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "maybe_equals") < 0)) __PYX_ERR(0, 1311, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("maybe_equals", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1311, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.maybe_equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_18maybe_equals(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self), __pyx_v_other);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_18maybe_equals(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, PyObject *__pyx_v_other) {
  Py_ssize_t __pyx_v_NOT;
  Py_ssize_t __pyx_v_MAYBE;
  Py_ssize_t __pyx_v_DEFINITELY;
  struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_rhs = 0;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_q = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("maybe_equals", 1);

  /* "dwave/optimization/model.pyx":1324
 *             *   ``2``---Are equal.
 *         """
 *         cdef Py_ssize_t NOT = 0             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t MAYBE = 1
 *         cdef Py_ssize_t DEFINITELY = 2
 */
  __pyx_v_NOT = 0;

  /* "dwave/optimization/model.pyx":1325
 *         """
 *         cdef Py_ssize_t NOT = 0
 *         cdef Py_ssize_t MAYBE = 1             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t DEFINITELY = 2
 * 
 */
  __pyx_v_MAYBE = 1;

  /* "dwave/optimization/model.pyx":1326
 *         cdef Py_ssize_t NOT = 0
 *         cdef Py_ssize_t MAYBE = 1
 *         cdef Py_ssize_t DEFINITELY = 2             # <<<<<<<<<<<<<<
 * 
 *         # If we're the same object, then we're equal
 */
  __pyx_v_DEFINITELY = 2;

  /* "dwave/optimization/model.pyx":1329
 * 
 *         # If we're the same object, then we're equal
 *         if self is other:             # <<<<<<<<<<<<<<
 *             return DEFINITELY
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self) == __pyx_v_other);
  if (__pyx_t_1) {

    /* "dwave/optimization/model.pyx":1330
 *         # If we're the same object, then we're equal
 *         if self is other:
 *             return DEFINITELY             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(other, Symbol):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_DEFINITELY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1329
 * 
 *         # If we're the same object, then we're equal
 *         if self is other:             # <<<<<<<<<<<<<<
 *             return DEFINITELY
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1332
 *             return DEFINITELY
 * 
 *         if not isinstance(other, Symbol):             # <<<<<<<<<<<<<<
 *             return NOT
 * 
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_5dwave_12optimization_5model_Symbol); 
  __pyx_t_3 = (!__pyx_t_1);
  if (__pyx_t_3) {

    /* "dwave/optimization/model.pyx":1333
 * 
 *         if not isinstance(other, Symbol):
 *             return NOT             # <<<<<<<<<<<<<<
 * 
 *         # Should we require identical types?
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_NOT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1332
 *             return DEFINITELY
 * 
 *         if not isinstance(other, Symbol):             # <<<<<<<<<<<<<<
 *             return NOT
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1336
 * 
 *         # Should we require identical types?
 *         if not isinstance(self, type(other)) and not isinstance(other, type(self)):             # <<<<<<<<<<<<<<
 *             return NOT
 * 
 */
  __pyx_t_1 = PyObject_IsInstance(((PyObject *)__pyx_v_self), ((PyObject *)Py_TYPE(__pyx_v_other))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1336, __pyx_L1_error)
  __pyx_t_4 = (!__pyx_t_1);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_other, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self)))); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 1336, __pyx_L1_error)
  __pyx_t_1 = (!__pyx_t_4);
  __pyx_t_3 = __pyx_t_1;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_3) {

    /* "dwave/optimization/model.pyx":1337
 *         # Should we require identical types?
 *         if not isinstance(self, type(other)) and not isinstance(other, type(self)):
 *             return NOT             # <<<<<<<<<<<<<<
 * 
 *         cdef Symbol rhs = other
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_NOT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1336
 * 
 *         # Should we require identical types?
 *         if not isinstance(self, type(other)) and not isinstance(other, type(self)):             # <<<<<<<<<<<<<<
 *             return NOT
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1339
 *             return NOT
 * 
 *         cdef Symbol rhs = other             # <<<<<<<<<<<<<<
 * 
 *         if self.shares_memory(rhs):
 */
  if (!(likely(((__pyx_v_other) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_other, __pyx_ptype_5dwave_12optimization_5model_Symbol))))) __PYX_ERR(0, 1339, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_other;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_rhs = ((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1341
 *         cdef Symbol rhs = other
 * 
 *         if self.shares_memory(rhs):             # <<<<<<<<<<<<<<
 *             return DEFINITELY
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_shares_memory); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, ((PyObject *)__pyx_v_rhs)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "dwave/optimization/model.pyx":1342
 * 
 *         if self.shares_memory(rhs):
 *             return DEFINITELY             # <<<<<<<<<<<<<<
 * 
 *         # Check is that we have the right number of predecessors
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_DEFINITELY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1341
 *         cdef Symbol rhs = other
 * 
 *         if self.shares_memory(rhs):             # <<<<<<<<<<<<<<
 *             return DEFINITELY
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1345
 * 
 *         # Check is that we have the right number of predecessors
 *         if self.node_ptr.predecessors().size() != rhs.node_ptr.predecessors().size():             # <<<<<<<<<<<<<<
 *             return NOT
 * 
 */
  __pyx_t_3 = (__pyx_v_self->node_ptr->predecessors().size() != __pyx_v_rhs->node_ptr->predecessors().size());
  if (__pyx_t_3) {

    /* "dwave/optimization/model.pyx":1346
 *         # Check is that we have the right number of predecessors
 *         if self.node_ptr.predecessors().size() != rhs.node_ptr.predecessors().size():
 *             return NOT             # <<<<<<<<<<<<<<
 * 
 *         # Finally, out prdecessors should have the same types in the same order
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_NOT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1345
 * 
 *         # Check is that we have the right number of predecessors
 *         if self.node_ptr.predecessors().size() != rhs.node_ptr.predecessors().size():             # <<<<<<<<<<<<<<
 *             return NOT
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1349
 * 
 *         # Finally, out prdecessors should have the same types in the same order
 *         for p, q in zip(self.iter_predecessors(), rhs.iter_predecessors()):             # <<<<<<<<<<<<<<
 *             # Should we require identical types?
 *             if not isinstance(p, type(q)) and not isinstance(q, type(p)):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_predecessors); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rhs), __pyx_n_s_iter_predecessors); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2)) __PYX_ERR(0, 1349, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5)) __PYX_ERR(0, 1349, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6);
    __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1349, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1349, __pyx_L1_error)
          #endif
          if (__pyx_t_9 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 1349, __pyx_L1_error)
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_6);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1349, __pyx_L1_error)
          #endif
          if (__pyx_t_9 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 1349, __pyx_L1_error)
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_10(__pyx_t_6);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1349, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1349, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
      index = 0; __pyx_t_2 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_2)) goto __pyx_L12_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_8 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_8)) goto __pyx_L12_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(0, 1349, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L13_unpacking_done;
      __pyx_L12_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1349, __pyx_L1_error)
      __pyx_L13_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_q, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "dwave/optimization/model.pyx":1351
 *         for p, q in zip(self.iter_predecessors(), rhs.iter_predecessors()):
 *             # Should we require identical types?
 *             if not isinstance(p, type(q)) and not isinstance(q, type(p)):             # <<<<<<<<<<<<<<
 *                 return NOT
 * 
 */
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_p, ((PyObject *)Py_TYPE(__pyx_v_q))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1351, __pyx_L1_error)
    __pyx_t_4 = (!__pyx_t_1);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L15_bool_binop_done;
    }
    __pyx_t_4 = PyObject_IsInstance(__pyx_v_q, ((PyObject *)Py_TYPE(__pyx_v_p))); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 1351, __pyx_L1_error)
    __pyx_t_1 = (!__pyx_t_4);
    __pyx_t_3 = __pyx_t_1;
    __pyx_L15_bool_binop_done:;
    if (__pyx_t_3) {

      /* "dwave/optimization/model.pyx":1352
 *             # Should we require identical types?
 *             if not isinstance(p, type(q)) and not isinstance(q, type(p)):
 *                 return NOT             # <<<<<<<<<<<<<<
 * 
 *         return MAYBE
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_NOT); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L0;

      /* "dwave/optimization/model.pyx":1351
 *         for p, q in zip(self.iter_predecessors(), rhs.iter_predecessors()):
 *             # Should we require identical types?
 *             if not isinstance(p, type(q)) and not isinstance(q, type(p)):             # <<<<<<<<<<<<<<
 *                 return NOT
 * 
 */
    }

    /* "dwave/optimization/model.pyx":1349
 * 
 *         # Finally, out prdecessors should have the same types in the same order
 *         for p, q in zip(self.iter_predecessors(), rhs.iter_predecessors()):             # <<<<<<<<<<<<<<
 *             # Should we require identical types?
 *             if not isinstance(p, type(q)) and not isinstance(q, type(p)):
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "dwave/optimization/model.pyx":1354
 *                 return NOT
 * 
 *         return MAYBE             # <<<<<<<<<<<<<<
 * 
 *     def reset_state(self, Py_ssize_t index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_MAYBE); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1311
 *             inc(it)
 * 
 *     def maybe_equals(self, other):             # <<<<<<<<<<<<<<
 *         """Compare to another node.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.maybe_equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_q);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1356
 *         return MAYBE
 * 
 *     def reset_state(self, Py_ssize_t index):             # <<<<<<<<<<<<<<
 *         """Reset the state of a node and any successor symbols.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_21reset_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6Symbol_20reset_state, "Reset the state of a node and any successor symbols.\n        \n        Args:\n            index: Index of the state to reset.\n            \n        Examples:\n            This example sets two states on a symbol with two successor symbols\n            and resets just one state. \n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> lsymbol, lsymbol_lists = model.disjoint_lists(primary_set_size=5, num_disjoint_lists=2)\n            >>> with model.lock():\n            ...     model.states.resize(2)\n            ...     lsymbol.set_state(0, [[0, 4], [1, 2, 3]])\n            ...     lsymbol.set_state(1, [[3, 4], [0, 1, 2]])\n            ...     print(f\"state 0: {lsymbol_lists[0].state(0)} and {lsymbol_lists[1].state(0)}\")\n            ...     print(f\"state 1: {lsymbol_lists[0].state(1)} and {lsymbol_lists[1].state(1)}\")\n            ...     lsymbol.reset_state(0)\n            ...     print(\"After reset:\")\n            ...     print(f\"state 0: {lsymbol_lists[0].state(0)} and {lsymbol_lists[1].state(0)}\")\n            ...     print(f\"state 1: {lsymbol_lists[0].state(1)} and {lsymbol_lists[1].state(1)}\")\n            state 0: [0. 4.] and [1. 2. 3.]\n            state 1: [3. 4.] and [0. 1. 2.]\n            After reset:\n            state 0: [0. 1. 2. 3. 4.] and []\n            state 1: [3. 4.] and [0. 1. 2.]\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_21reset_state = {"reset_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_21reset_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_20reset_state};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_21reset_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  Py_ssize_t __pyx_v_index;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_state (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_index)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1356, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "reset_state") < 0)) __PYX_ERR(0, 1356, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_index = __Pyx_PyIndex_AsSsize_t(values[0]); if (unlikely((__pyx_v_index == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1356, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reset_state", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1356, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.reset_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_20reset_state(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self), __pyx_v_index);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_20reset_state(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, Py_ssize_t __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reset_state", 1);

  /* "dwave/optimization/model.pyx":1385
 *             state 1: [3. 4.] and [0. 1. 2.]
 *         """
 *         if not 0 <= index < self.model.states.size():             # <<<<<<<<<<<<<<
 *             raise ValueError(f"index out of range: {index}")
 * 
 */
  __pyx_t_1 = (0 <= __pyx_v_index);
  if (__pyx_t_1) {
    __pyx_t_2 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->model->states->__pyx_vtab)->size(__pyx_v_self->model->states, 0); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 1385, __pyx_L1_error)
    __pyx_t_1 = (__pyx_v_index < __pyx_t_2);
  }
  __pyx_t_3 = (!__pyx_t_1);
  if (unlikely(__pyx_t_3)) {

    /* "dwave/optimization/model.pyx":1386
 *         """
 *         if not 0 <= index < self.model.states.size():
 *             raise ValueError(f"index out of range: {index}")             # <<<<<<<<<<<<<<
 * 
 *         if self.node_ptr.topological_index() < 0:
 */
    __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_index, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_index_out_of_range, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1386, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":1385
 *             state 1: [3. 4.] and [0. 1. 2.]
 *         """
 *         if not 0 <= index < self.model.states.size():             # <<<<<<<<<<<<<<
 *             raise ValueError(f"index out of range: {index}")
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1388
 *             raise ValueError(f"index out of range: {index}")
 * 
 *         if self.node_ptr.topological_index() < 0:             # <<<<<<<<<<<<<<
 *             # unsorted nodes don't have a state to reset
 *             return
 */
  __pyx_t_3 = (__pyx_v_self->node_ptr->topological_index() < 0);
  if (__pyx_t_3) {

    /* "dwave/optimization/model.pyx":1390
 *         if self.node_ptr.topological_index() < 0:
 *             # unsorted nodes don't have a state to reset
 *             return             # <<<<<<<<<<<<<<
 * 
 *         self.model.states.resolve()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1388
 *             raise ValueError(f"index out of range: {index}")
 * 
 *         if self.node_ptr.topological_index() < 0:             # <<<<<<<<<<<<<<
 *             # unsorted nodes don't have a state to reset
 *             return
 */
  }

  /* "dwave/optimization/model.pyx":1392
 *             return
 * 
 *         self.model.states.resolve()             # <<<<<<<<<<<<<<
 * 
 *         # make sure the state vector at least contains self
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->model->states->__pyx_vtab)->resolve(__pyx_v_self->model->states, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":1395
 * 
 *         # make sure the state vector at least contains self
 *         if <Py_ssize_t>(self.model.states._states[index].size()) <= self.node_ptr.topological_index():             # <<<<<<<<<<<<<<
 *             self.model.states._states[index].resize(self.node_ptr.topological_index() + 1)
 * 
 */
  __pyx_t_3 = (((Py_ssize_t)(__pyx_v_self->model->states->_states[__pyx_v_index]).size()) <= __pyx_v_self->node_ptr->topological_index());
  if (__pyx_t_3) {

    /* "dwave/optimization/model.pyx":1396
 *         # make sure the state vector at least contains self
 *         if <Py_ssize_t>(self.model.states._states[index].size()) <= self.node_ptr.topological_index():
 *             self.model.states._states[index].resize(self.node_ptr.topological_index() + 1)             # <<<<<<<<<<<<<<
 * 
 *         self.model._graph.recursive_reset(self.model.states._states[index], self.node_ptr)
 */
    try {
      (__pyx_v_self->model->states->_states[__pyx_v_index]).resize((__pyx_v_self->node_ptr->topological_index() + 1));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1396, __pyx_L1_error)
    }

    /* "dwave/optimization/model.pyx":1395
 * 
 *         # make sure the state vector at least contains self
 *         if <Py_ssize_t>(self.model.states._states[index].size()) <= self.node_ptr.topological_index():             # <<<<<<<<<<<<<<
 *             self.model.states._states[index].resize(self.node_ptr.topological_index() + 1)
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1398
 *             self.model.states._states[index].resize(self.node_ptr.topological_index() + 1)
 * 
 *         self.model._graph.recursive_reset(self.model.states._states[index], self.node_ptr)             # <<<<<<<<<<<<<<
 * 
 *     def shares_memory(self, other):
 */
  try {
    __pyx_v_self->model->_graph.recursive_reset((__pyx_v_self->model->states->_states[__pyx_v_index]), __pyx_v_self->node_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1398, __pyx_L1_error)
  }

  /* "dwave/optimization/model.pyx":1356
 *         return MAYBE
 * 
 *     def reset_state(self, Py_ssize_t index):             # <<<<<<<<<<<<<<
 *         """Reset the state of a node and any successor symbols.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.reset_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1400
 *         self.model._graph.recursive_reset(self.model.states._states[index], self.node_ptr)
 * 
 *     def shares_memory(self, other):             # <<<<<<<<<<<<<<
 *         """Determine if two symbols share memory.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_23shares_memory(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6Symbol_22shares_memory, "Determine if two symbols share memory.\n        \n        Args:\n            other: Another symbol.\n            \n        Returns:\n            True if the two symbols share memory.\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_23shares_memory = {"shares_memory", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_23shares_memory, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_22shares_memory};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_23shares_memory(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shares_memory (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1400, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "shares_memory") < 0)) __PYX_ERR(0, 1400, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("shares_memory", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1400, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.shares_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_22shares_memory(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self), __pyx_v_other);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_22shares_memory(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shares_memory", 1);

  /* "dwave/optimization/model.pyx":1409
 *             True if the two symbols share memory.
 *         """
 *         if not isinstance(other, Symbol):             # <<<<<<<<<<<<<<
 *             return False
 *         cdef Symbol rhs = other
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_5dwave_12optimization_5model_Symbol); 
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "dwave/optimization/model.pyx":1410
 *         """
 *         if not isinstance(other, Symbol):
 *             return False             # <<<<<<<<<<<<<<
 *         cdef Symbol rhs = other
 *         return (
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1409
 *             True if the two symbols share memory.
 *         """
 *         if not isinstance(other, Symbol):             # <<<<<<<<<<<<<<
 *             return False
 *         cdef Symbol rhs = other
 */
  }

  /* "dwave/optimization/model.pyx":1411
 *         if not isinstance(other, Symbol):
 *             return False
 *         cdef Symbol rhs = other             # <<<<<<<<<<<<<<
 *         return (
 *             <bool>(self.node_ptr)                    # Not pointing to a nullptr
 */
  if (!(likely(((__pyx_v_other) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_other, __pyx_ptype_5dwave_12optimization_5model_Symbol))))) __PYX_ERR(0, 1411, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_other;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_rhs = ((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "dwave/optimization/model.pyx":1412
 *             return False
 *         cdef Symbol rhs = other
 *         return (             # <<<<<<<<<<<<<<
 *             <bool>(self.node_ptr)                    # Not pointing to a nullptr
 *             and self.node_ptr == rhs.node_ptr        # Shares an underlying node
 */
  __Pyx_XDECREF(__pyx_r);

  /* "dwave/optimization/model.pyx":1413
 *         cdef Symbol rhs = other
 *         return (
 *             <bool>(self.node_ptr)                    # Not pointing to a nullptr             # <<<<<<<<<<<<<<
 *             and self.node_ptr == rhs.node_ptr        # Shares an underlying node
 *             and not <bool>(deref(self.expired_ptr))  # The node is not expired
 */
  if (((bool)__pyx_v_self->node_ptr)) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(((bool)__pyx_v_self->node_ptr)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L4_bool_binop_done;
  }

  /* "dwave/optimization/model.pyx":1414
 *         return (
 *             <bool>(self.node_ptr)                    # Not pointing to a nullptr
 *             and self.node_ptr == rhs.node_ptr        # Shares an underlying node             # <<<<<<<<<<<<<<
 *             and not <bool>(deref(self.expired_ptr))  # The node is not expired
 *             )
 */
  __pyx_t_2 = (__pyx_v_self->node_ptr == __pyx_v_rhs->node_ptr);
  if (__pyx_t_2) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L4_bool_binop_done;
  }

  /* "dwave/optimization/model.pyx":1415
 *             <bool>(self.node_ptr)                    # Not pointing to a nullptr
 *             and self.node_ptr == rhs.node_ptr        # Shares an underlying node
 *             and not <bool>(deref(self.expired_ptr))  # The node is not expired             # <<<<<<<<<<<<<<
 *             )
 * 
 */
  __pyx_t_2 = (!(((bool)(*__pyx_v_self->expired_ptr)) != 0));
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L4_bool_binop_done:;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1400
 *         self.model._graph.recursive_reset(self.model.states._states[index], self.node_ptr)
 * 
 *     def shares_memory(self, other):             # <<<<<<<<<<<<<<
 *         """Determine if two symbols share memory.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.shares_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1418
 *             )
 * 
 *     def _state_from_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         # unlike node serialization, by default we raise an error because if
 *         # this is being called, it must have a state
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_25_state_from_zipfile(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_25_state_from_zipfile = {"_state_from_zipfile", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_25_state_from_zipfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_25_state_from_zipfile(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_zf = 0;
  CYTHON_UNUSED PyObject *__pyx_v_directory = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_v_state_index;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_state_from_zipfile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zf,&__pyx_n_s_directory,&__pyx_n_s_state_index,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1418, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_directory)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1418, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_state_from_zipfile", 1, 3, 3, 1); __PYX_ERR(0, 1418, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_state_index)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1418, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_state_from_zipfile", 1, 3, 3, 2); __PYX_ERR(0, 1418, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_state_from_zipfile") < 0)) __PYX_ERR(0, 1418, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_zf = values[0];
    __pyx_v_directory = values[1];
    __pyx_v_state_index = __Pyx_PyIndex_AsSsize_t(values[2]); if (unlikely((__pyx_v_state_index == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1418, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_state_from_zipfile", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1418, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Symbol._state_from_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_24_state_from_zipfile(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self), __pyx_v_zf, __pyx_v_directory, __pyx_v_state_index);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_24_state_from_zipfile(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_zf, CYTHON_UNUSED PyObject *__pyx_v_directory, CYTHON_UNUSED Py_ssize_t __pyx_v_state_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_state_from_zipfile", 1);

  /* "dwave/optimization/model.pyx":1421
 *         # unlike node serialization, by default we raise an error because if
 *         # this is being called, it must have a state
 *         raise NotImplementedError(f"{type(self).__name__} has not implemented state deserialization")             # <<<<<<<<<<<<<<
 * 
 *     def _state_into_zipfile(self, zf, directory, Py_ssize_t state_index):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_2, __pyx_kp_u_has_not_implemented_state_deser); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NotImplementedError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 1421, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1418
 *             )
 * 
 *     def _state_from_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         # unlike node serialization, by default we raise an error because if
 *         # this is being called, it must have a state
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dwave.optimization.model.Symbol._state_from_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1423
 *         raise NotImplementedError(f"{type(self).__name__} has not implemented state deserialization")
 * 
 *     def _state_into_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         # unlike node serialization, by default we raise an error because if
 *         # this is being called, it must have a state
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_27_state_into_zipfile(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_27_state_into_zipfile = {"_state_into_zipfile", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_27_state_into_zipfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_27_state_into_zipfile(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_zf = 0;
  CYTHON_UNUSED PyObject *__pyx_v_directory = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_v_state_index;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_state_into_zipfile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zf,&__pyx_n_s_directory,&__pyx_n_s_state_index,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1423, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_directory)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1423, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_state_into_zipfile", 1, 3, 3, 1); __PYX_ERR(0, 1423, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_state_index)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1423, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_state_into_zipfile", 1, 3, 3, 2); __PYX_ERR(0, 1423, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_state_into_zipfile") < 0)) __PYX_ERR(0, 1423, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_zf = values[0];
    __pyx_v_directory = values[1];
    __pyx_v_state_index = __Pyx_PyIndex_AsSsize_t(values[2]); if (unlikely((__pyx_v_state_index == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1423, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_state_into_zipfile", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1423, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Symbol._state_into_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_26_state_into_zipfile(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self), __pyx_v_zf, __pyx_v_directory, __pyx_v_state_index);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_26_state_into_zipfile(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_zf, CYTHON_UNUSED PyObject *__pyx_v_directory, CYTHON_UNUSED Py_ssize_t __pyx_v_state_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_state_into_zipfile", 1);

  /* "dwave/optimization/model.pyx":1426
 *         # unlike node serialization, by default we raise an error because if
 *         # this is being called, it must have a state
 *         raise NotImplementedError(f"{type(self).__name__} has not implemented state serialization")             # <<<<<<<<<<<<<<
 * 
 *     def state_size(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_2, __pyx_kp_u_has_not_implemented_state_seria); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NotImplementedError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 1426, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1423
 *         raise NotImplementedError(f"{type(self).__name__} has not implemented state deserialization")
 * 
 *     def _state_into_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         # unlike node serialization, by default we raise an error because if
 *         # this is being called, it must have a state
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dwave.optimization.model.Symbol._state_into_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1428
 *         raise NotImplementedError(f"{type(self).__name__} has not implemented state serialization")
 * 
 *     def state_size(self):             # <<<<<<<<<<<<<<
 *         """Return an estimated size, in bytes, of the node's state.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_29state_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6Symbol_28state_size, "Return an estimated size, in bytes, of the node's state.\n        \n        .. note::\n\n            For most symbols, which are arrays, this method is \n            subclassed by the :class:`~dwave.optimization.model.ArraySymbol\n            class's :meth:`~dwave.optimization.model.ArraySymbol.state_size`\n            method.\n        \n        Returns:\n            Always returns zero (nodes do not have a state).\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_29state_size = {"state_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_29state_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_28state_size};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_29state_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("state_size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("state_size", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "state_size", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_28state_size(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_28state_size(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("state_size", 1);

  /* "dwave/optimization/model.pyx":1442
 *         """
 *         # Nodes by default have no state.
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def topological_index(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1428
 *         raise NotImplementedError(f"{type(self).__name__} has not implemented state serialization")
 * 
 *     def state_size(self):             # <<<<<<<<<<<<<<
 *         """Return an estimated size, in bytes, of the node's state.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1444
 *         return 0
 * 
 *     def topological_index(self):             # <<<<<<<<<<<<<<
 *         """Topological index of the node.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_31topological_index(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_6Symbol_30topological_index, "Topological index of the node.\n\n        Return ``None`` if the model is not topologically sorted.\n        \n        Examples:\n            This example prints the indices of a two-symbol model.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> i = model.integer(100, lower_bound=20)\n            >>> sum_i = i.sum()\n            >>> with model.lock():\n            ...     for symbol in model.iter_symbols():\n            ...         print(f\"Symbol {type(symbol)} is node {symbol.topological_index()}\")\n            Symbol <class 'dwave.optimization.symbols.IntegerVariable'> is node 0\n            Symbol <class 'dwave.optimization.symbols.Sum'> is node 1\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_31topological_index = {"topological_index", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_31topological_index, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_30topological_index};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_31topological_index(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topological_index (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("topological_index", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "topological_index", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_30topological_index(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_30topological_index(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self) {
  Py_ssize_t __pyx_v_index;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("topological_index", 1);

  /* "dwave/optimization/model.pyx":1462
 *             Symbol <class 'dwave.optimization.symbols.Sum'> is node 1
 *         """
 *         index = self.node_ptr.topological_index()             # <<<<<<<<<<<<<<
 *         return index if index >= 0 else None
 * 
 */
  __pyx_v_index = __pyx_v_self->node_ptr->topological_index();

  /* "dwave/optimization/model.pyx":1463
 *         """
 *         index = self.node_ptr.topological_index()
 *         return index if index >= 0 else None             # <<<<<<<<<<<<<<
 * 
 * # We would really prefer to use Symbol.__init_subclass__ to register
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = (__pyx_v_index >= 0);
  if (__pyx_t_2) {
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1444
 *         return 0
 * 
 *     def topological_index(self):             # <<<<<<<<<<<<<<
 *         """Topological index of the node.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.topological_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pxd":94
 *     # to ensure that the model doesn't get garbage collected unless all of
 *     # the observers have also been garbage collected.
 *     cdef readonly Model model             # <<<<<<<<<<<<<<
 * 
 *     # Hold Node* pointer. This is redundant as most observers will also hold
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_5model_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_5model_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_5model___get__(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_5model___get__(struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->model);
  __pyx_r = ((PyObject *)__pyx_v_self->model);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_33__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_33__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_33__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_33__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_32__reduce_cython__(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_expired_ptr_self_node_ptr_c, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_35__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6Symbol_35__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_35__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6Symbol_35__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_6Symbol_34__setstate_cython__(((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_6Symbol_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_Symbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_expired_ptr_self_node_ptr_c, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.Symbol.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1472
 * # various ways if it ever becomes a problem.
 * _node_subclasses = dict()
 * def _register_node_subclasses():             # <<<<<<<<<<<<<<
 *     def register(cls):
 *         if cls.__name__ in _node_subclasses:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_4_register_node_subclasses(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_4_register_node_subclasses = {"_register_node_subclasses", (PyCFunction)__pyx_pw_5dwave_12optimization_5model_4_register_node_subclasses, METH_NOARGS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_4_register_node_subclasses(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_register_node_subclasses (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_3_register_node_subclasses(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1473
 * _node_subclasses = dict()
 * def _register_node_subclasses():
 *     def register(cls):             # <<<<<<<<<<<<<<
 *         if cls.__name__ in _node_subclasses:
 *             if _node_subclasses[cls.__name__] != cls:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_25_register_node_subclasses_1register(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_25_register_node_subclasses_1register = {"register", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_25_register_node_subclasses_1register, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_25_register_node_subclasses_1register(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cls = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("register (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cls,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cls)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1473, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "register") < 0)) __PYX_ERR(0, 1473, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cls = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("register", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1473, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model._register_node_subclasses.register", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_25_register_node_subclasses_register(__pyx_self, __pyx_v_cls);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_25_register_node_subclasses_register(PyObject *__pyx_self, PyObject *__pyx_v_cls) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *__pyx_cur_scope;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *__pyx_outer_scope;
  PyObject *__pyx_v_subclass = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("register", 1);
  __pyx_outer_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "dwave/optimization/model.pyx":1474
 * def _register_node_subclasses():
 *     def register(cls):
 *         if cls.__name__ in _node_subclasses:             # <<<<<<<<<<<<<<
 *             if _node_subclasses[cls.__name__] != cls:
 *                 raise RuntimeError
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_node_subclasses); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_t_2, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "dwave/optimization/model.pyx":1475
 *     def register(cls):
 *         if cls.__name__ in _node_subclasses:
 *             if _node_subclasses[cls.__name__] != cls:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError
 *             return
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_node_subclasses); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_v_cls, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_3)) {

      /* "dwave/optimization/model.pyx":1476
 *         if cls.__name__ in _node_subclasses:
 *             if _node_subclasses[cls.__name__] != cls:
 *                 raise RuntimeError             # <<<<<<<<<<<<<<
 *             return
 * 
 */
      __Pyx_Raise(__pyx_builtin_RuntimeError, 0, 0, 0);
      __PYX_ERR(0, 1476, __pyx_L1_error)

      /* "dwave/optimization/model.pyx":1475
 *     def register(cls):
 *         if cls.__name__ in _node_subclasses:
 *             if _node_subclasses[cls.__name__] != cls:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError
 *             return
 */
    }

    /* "dwave/optimization/model.pyx":1477
 *             if _node_subclasses[cls.__name__] != cls:
 *                 raise RuntimeError
 *             return             # <<<<<<<<<<<<<<
 * 
 *         _node_subclasses[cls.__name__] = cls
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1474
 * def _register_node_subclasses():
 *     def register(cls):
 *         if cls.__name__ in _node_subclasses:             # <<<<<<<<<<<<<<
 *             if _node_subclasses[cls.__name__] != cls:
 *                 raise RuntimeError
 */
  }

  /* "dwave/optimization/model.pyx":1479
 *             return
 * 
 *         _node_subclasses[cls.__name__] = cls             # <<<<<<<<<<<<<<
 * 
 *         for subclass in cls.__subclasses__():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_node_subclasses); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_t_4, __pyx_v_cls) < 0))) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":1481
 *         _node_subclasses[cls.__name__] = cls
 * 
 *         for subclass in cls.__subclasses__():             # <<<<<<<<<<<<<<
 *             register(subclass)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_subclasses); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1481, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1481, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 1481, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1481, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 1481, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1481, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_subclass, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "dwave/optimization/model.pyx":1482
 * 
 *         for subclass in cls.__subclasses__():
 *             register(subclass)             # <<<<<<<<<<<<<<
 * 
 *     for cls in Symbol.__subclasses__():
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_register)) { __Pyx_RaiseClosureNameError("register"); __PYX_ERR(0, 1482, __pyx_L1_error) }
    __pyx_t_4 = __pyx_pf_5dwave_12optimization_5model_25_register_node_subclasses_register(__pyx_cur_scope->__pyx_v_register, __pyx_v_subclass); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "dwave/optimization/model.pyx":1481
 *         _node_subclasses[cls.__name__] = cls
 * 
 *         for subclass in cls.__subclasses__():             # <<<<<<<<<<<<<<
 *             register(subclass)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1473
 * _node_subclasses = dict()
 * def _register_node_subclasses():
 *     def register(cls):             # <<<<<<<<<<<<<<
 *         if cls.__name__ in _node_subclasses:
 *             if _node_subclasses[cls.__name__] != cls:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dwave.optimization.model._register_node_subclasses.register", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_subclass);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1472
 * # various ways if it ever becomes a problem.
 * _node_subclasses = dict()
 * def _register_node_subclasses():             # <<<<<<<<<<<<<<
 *     def register(cls):
 *         if cls.__name__ in _node_subclasses:
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_3_register_node_subclasses(CYTHON_UNUSED PyObject *__pyx_self) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *__pyx_cur_scope;
  PyObject *__pyx_v_cls = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_register_node_subclasses", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1472, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }

  /* "dwave/optimization/model.pyx":1473
 * _node_subclasses = dict()
 * def _register_node_subclasses():
 *     def register(cls):             # <<<<<<<<<<<<<<
 *         if cls.__name__ in _node_subclasses:
 *             if _node_subclasses[cls.__name__] != cls:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_25_register_node_subclasses_1register, 0, __pyx_n_s_register_node_subclasses_locals, ((PyObject*)__pyx_cur_scope), __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_register = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1484
 *             register(subclass)
 * 
 *     for cls in Symbol.__subclasses__():             # <<<<<<<<<<<<<<
 *         register(cls)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol), __pyx_n_s_subclasses); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1484, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1484, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1484, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1484, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1484, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1484, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_cls, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "dwave/optimization/model.pyx":1485
 * 
 *     for cls in Symbol.__subclasses__():
 *         register(cls)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_1 = __pyx_pf_5dwave_12optimization_5model_25_register_node_subclasses_register(__pyx_cur_scope->__pyx_v_register, __pyx_v_cls); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "dwave/optimization/model.pyx":1484
 *             register(subclass)
 * 
 *     for cls in Symbol.__subclasses__():             # <<<<<<<<<<<<<<
 *         register(cls)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1472
 * # various ways if it ever becomes a problem.
 * _node_subclasses = dict()
 * def _register_node_subclasses():             # <<<<<<<<<<<<<<
 *     def register(cls):
 *         if cls.__name__ in _node_subclasses:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model._register_node_subclasses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cls);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1488
 * 
 * 
 * def _split_indices(indices):             # <<<<<<<<<<<<<<
 *     """Given a set of indices, made up of slices, integers, and array symbols,
 *     create two consecutive indexing operations that can be passed to
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_6_split_indices(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_5_split_indices, "Given a set of indices, made up of slices, integers, and array symbols,\n    create two consecutive indexing operations that can be passed to\n    BasicIndexing and AdvancedIndexing respectively.\n    ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_6_split_indices = {"_split_indices", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6_split_indices, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5_split_indices};
static PyObject *__pyx_pw_5dwave_12optimization_5model_6_split_indices(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_indices = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_split_indices (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_indices,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_indices)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1488, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_split_indices") < 0)) __PYX_ERR(0, 1488, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_indices = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_split_indices", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1488, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model._split_indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_5_split_indices(__pyx_self, __pyx_v_indices);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_5_split_indices(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_indices) {
  PyObject *__pyx_v_basic_indices = NULL;
  PyObject *__pyx_v_advanced_indices = NULL;
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_split_indices", 1);

  /* "dwave/optimization/model.pyx":1495
 *     # this is pure-Python and could be moved out of this .pyx file at some point
 * 
 *     basic_indices = []             # <<<<<<<<<<<<<<
 *     advanced_indices = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_basic_indices = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1496
 * 
 *     basic_indices = []
 *     advanced_indices = []             # <<<<<<<<<<<<<<
 * 
 *     for index in indices:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_advanced_indices = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1498
 *     advanced_indices = []
 * 
 *     for index in indices:             # <<<<<<<<<<<<<<
 *         if isinstance(index, numbers.Integral):
 *             # Only basic handles numeric indices and it removes the axis so
 */
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_1 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1498, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1498, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1498, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1498, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1498, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1498, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1498, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1498, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "dwave/optimization/model.pyx":1499
 * 
 *     for index in indices:
 *         if isinstance(index, numbers.Integral):             # <<<<<<<<<<<<<<
 *             # Only basic handles numeric indices and it removes the axis so
 *             # only one gets the index.
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_numbers); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Integral); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_index, __pyx_t_5); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1499, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "dwave/optimization/model.pyx":1502
 *             # Only basic handles numeric indices and it removes the axis so
 *             # only one gets the index.
 *             basic_indices.append(index)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, slice):
 *             if index.start is None and index.stop is None and index.step is None:
 */
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_basic_indices, __pyx_v_index); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1502, __pyx_L1_error)

      /* "dwave/optimization/model.pyx":1499
 * 
 *     for index in indices:
 *         if isinstance(index, numbers.Integral):             # <<<<<<<<<<<<<<
 *             # Only basic handles numeric indices and it removes the axis so
 *             # only one gets the index.
 */
      goto __pyx_L5;
    }

    /* "dwave/optimization/model.pyx":1503
 *             # only one gets the index.
 *             basic_indices.append(index)
 *         elif isinstance(index, slice):             # <<<<<<<<<<<<<<
 *             if index.start is None and index.stop is None and index.step is None:
 *                 # empty slice, both handle it
 */
    __pyx_t_6 = PySlice_Check(__pyx_v_index); 
    if (__pyx_t_6) {

      /* "dwave/optimization/model.pyx":1504
 *             basic_indices.append(index)
 *         elif isinstance(index, slice):
 *             if index.start is None and index.stop is None and index.step is None:             # <<<<<<<<<<<<<<
 *                 # empty slice, both handle it
 *                 basic_indices.append(index)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = (__pyx_t_5 == Py_None);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_8) {
      } else {
        __pyx_t_6 = __pyx_t_8;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = (__pyx_t_5 == Py_None);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_8) {
      } else {
        __pyx_t_6 = __pyx_t_8;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = (__pyx_t_5 == Py_None);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __pyx_t_8;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_6) {

        /* "dwave/optimization/model.pyx":1506
 *             if index.start is None and index.stop is None and index.step is None:
 *                 # empty slice, both handle it
 *                 basic_indices.append(index)             # <<<<<<<<<<<<<<
 *                 advanced_indices.append(index)
 *             else:
 */
        __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_basic_indices, __pyx_v_index); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1506, __pyx_L1_error)

        /* "dwave/optimization/model.pyx":1507
 *                 # empty slice, both handle it
 *                 basic_indices.append(index)
 *                 advanced_indices.append(index)             # <<<<<<<<<<<<<<
 *             else:
 *                 # Advanced can only handle empty slices, so we do basic first
 */
        __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_advanced_indices, __pyx_v_index); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1507, __pyx_L1_error)

        /* "dwave/optimization/model.pyx":1504
 *             basic_indices.append(index)
 *         elif isinstance(index, slice):
 *             if index.start is None and index.stop is None and index.step is None:             # <<<<<<<<<<<<<<
 *                 # empty slice, both handle it
 *                 basic_indices.append(index)
 */
        goto __pyx_L6;
      }

      /* "dwave/optimization/model.pyx":1510
 *             else:
 *                 # Advanced can only handle empty slices, so we do basic first
 *                 basic_indices.append(index)             # <<<<<<<<<<<<<<
 *                 advanced_indices.append(slice(None))
 *         elif isinstance(index, (ArraySymbol, np.ndarray)):
 */
      /*else*/ {
        __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_basic_indices, __pyx_v_index); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1510, __pyx_L1_error)

        /* "dwave/optimization/model.pyx":1511
 *                 # Advanced can only handle empty slices, so we do basic first
 *                 basic_indices.append(index)
 *                 advanced_indices.append(slice(None))             # <<<<<<<<<<<<<<
 *         elif isinstance(index, (ArraySymbol, np.ndarray)):
 *             # Only advanced handles arrays, it preserves the axis so basic gets
 */
        __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_advanced_indices, __pyx_slice__42); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1511, __pyx_L1_error)
      }
      __pyx_L6:;

      /* "dwave/optimization/model.pyx":1503
 *             # only one gets the index.
 *             basic_indices.append(index)
 *         elif isinstance(index, slice):             # <<<<<<<<<<<<<<
 *             if index.start is None and index.stop is None and index.step is None:
 *                 # empty slice, both handle it
 */
      goto __pyx_L5;
    }

    /* "dwave/optimization/model.pyx":1512
 *                 basic_indices.append(index)
 *                 advanced_indices.append(slice(None))
 *         elif isinstance(index, (ArraySymbol, np.ndarray)):             # <<<<<<<<<<<<<<
 *             # Only advanced handles arrays, it preserves the axis so basic gets
 *             # an empty slice.
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_5dwave_12optimization_5model_ArraySymbol); 
    if (!__pyx_t_8) {
    } else {
      __pyx_t_6 = __pyx_t_8;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_8 = PyObject_IsInstance(__pyx_v_index, __pyx_t_4); 
    __pyx_t_6 = __pyx_t_8;
    __pyx_L10_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(__pyx_t_6)) {

      /* "dwave/optimization/model.pyx":1517
 *             # We allow np.ndarray here for testing purposes. They are not (yet)
 *             # natively handled by AdvancedIndexingNode.
 *             basic_indices.append(slice(None))             # <<<<<<<<<<<<<<
 *             advanced_indices.append(index)
 * 
 */
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_basic_indices, __pyx_slice__42); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1517, __pyx_L1_error)

      /* "dwave/optimization/model.pyx":1518
 *             # natively handled by AdvancedIndexingNode.
 *             basic_indices.append(slice(None))
 *             advanced_indices.append(index)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_advanced_indices, __pyx_v_index); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1518, __pyx_L1_error)

      /* "dwave/optimization/model.pyx":1512
 *                 basic_indices.append(index)
 *                 advanced_indices.append(slice(None))
 *         elif isinstance(index, (ArraySymbol, np.ndarray)):             # <<<<<<<<<<<<<<
 *             # Only advanced handles arrays, it preserves the axis so basic gets
 *             # an empty slice.
 */
      goto __pyx_L5;
    }

    /* "dwave/optimization/model.pyx":1522
 *         else:
 *             # this should be checked by the calling function, but just in case
 *             raise RuntimeError("unexpected index type")             # <<<<<<<<<<<<<<
 * 
 *     return tuple(basic_indices), tuple(advanced_indices)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 1522, __pyx_L1_error)
    }
    __pyx_L5:;

    /* "dwave/optimization/model.pyx":1498
 *     advanced_indices = []
 * 
 *     for index in indices:             # <<<<<<<<<<<<<<
 *         if isinstance(index, numbers.Integral):
 *             # Only basic handles numeric indices and it removes the axis so
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1524
 *             raise RuntimeError("unexpected index type")
 * 
 *     return tuple(basic_indices), tuple(advanced_indices)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_AsTuple(__pyx_v_basic_indices); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyList_AsTuple(__pyx_v_advanced_indices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1)) __PYX_ERR(0, 1524, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(0, 1524, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1488
 * 
 * 
 * def _split_indices(indices):             # <<<<<<<<<<<<<<
 *     """Given a set of indices, made up of slices, integers, and array symbols,
 *     create two consecutive indexing operations that can be passed to
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("dwave.optimization.model._split_indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_basic_indices);
  __Pyx_XDECREF(__pyx_v_advanced_indices);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1533
 *     """Base class for symbols that can be interpreted as an array."""
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         # disallow direct construction of array symbols, they should be constructed
 *         # via their subclasses.
 */

/* Python wrapper */
static int __pyx_pw_5dwave_12optimization_5model_11ArraySymbol_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5dwave_12optimization_5model_11ArraySymbol_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol___init__(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5dwave_12optimization_5model_11ArraySymbol___init__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "dwave/optimization/model.pyx":1536
 *         # disallow direct construction of array symbols, they should be constructed
 *         # via their subclasses.
 *         raise ValueError("ArraySymbols cannot be constructed directly")             # <<<<<<<<<<<<<<
 * 
 *     cdef void initialize_array(self, cppArray* array_ptr) noexcept:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1536, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1533
 *     """Base class for symbols that can be interpreted as an array."""
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         # disallow direct construction of array symbols, they should be constructed
 *         # via their subclasses.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1538
 *         raise ValueError("ArraySymbols cannot be constructed directly")
 * 
 *     cdef void initialize_array(self, cppArray* array_ptr) noexcept:             # <<<<<<<<<<<<<<
 *         self.array_ptr = array_ptr
 * 
 */

static void __pyx_f_5dwave_12optimization_5model_11ArraySymbol_initialize_array(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, dwave::optimization::Array *__pyx_v_array_ptr) {

  /* "dwave/optimization/model.pyx":1539
 * 
 *     cdef void initialize_array(self, cppArray* array_ptr) noexcept:
 *         self.array_ptr = array_ptr             # <<<<<<<<<<<<<<
 * 
 *     def __abs__(self):
 */
  __pyx_v_self->array_ptr = __pyx_v_array_ptr;

  /* "dwave/optimization/model.pyx":1538
 *         raise ValueError("ArraySymbols cannot be constructed directly")
 * 
 *     cdef void initialize_array(self, cppArray* array_ptr) noexcept:             # <<<<<<<<<<<<<<
 *         self.array_ptr = array_ptr
 * 
 */

  /* function exit code */
}

/* "dwave/optimization/model.pyx":1541
 *         self.array_ptr = array_ptr
 * 
 *     def __abs__(self):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import Absolute  # avoid circular import
 *         return Absolute(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_3__abs__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_3__abs__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__abs__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_2__abs__(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_2__abs__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self) {
  PyObject *__pyx_v_Absolute = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__abs__", 1);

  /* "dwave/optimization/model.pyx":1542
 * 
 *     def __abs__(self):
 *         from dwave.optimization.symbols import Absolute  # avoid circular import             # <<<<<<<<<<<<<<
 *         return Absolute(self)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Absolute);
  __Pyx_GIVEREF(__pyx_n_s_Absolute);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Absolute)) __PYX_ERR(0, 1542, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Absolute); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Absolute = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1543
 *     def __abs__(self):
 *         from dwave.optimization.symbols import Absolute  # avoid circular import
 *         return Absolute(self)             # <<<<<<<<<<<<<<
 * 
 *     def __add__(self, ArraySymbol rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Absolute);
  __pyx_t_1 = __pyx_v_Absolute; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1541
 *         self.array_ptr = array_ptr
 * 
 *     def __abs__(self):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import Absolute  # avoid circular import
 *         return Absolute(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__abs__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Absolute);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1545
 *         return Absolute(self)
 * 
 *     def __add__(self, ArraySymbol rhs):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import Add  # avoid circular import
 *         return Add(self, rhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_5__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_5__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_5dwave_12optimization_5model_ArraySymbol, 1, "rhs", 0))) __PYX_ERR(0, 1545, __pyx_L1_error)
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_4__add__(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), ((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_4__add__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_rhs) {
  PyObject *__pyx_v_Add = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 1);

  /* "dwave/optimization/model.pyx":1546
 * 
 *     def __add__(self, ArraySymbol rhs):
 *         from dwave.optimization.symbols import Add  # avoid circular import             # <<<<<<<<<<<<<<
 *         return Add(self, rhs)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Add);
  __Pyx_GIVEREF(__pyx_n_s_Add);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Add)) __PYX_ERR(0, 1546, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Add); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Add = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1547
 *     def __add__(self, ArraySymbol rhs):
 *         from dwave.optimization.symbols import Add  # avoid circular import
 *         return Add(self, rhs)             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, ArraySymbol rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Add);
  __pyx_t_1 = __pyx_v_Add; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_rhs)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1545
 *         return Absolute(self)
 * 
 *     def __add__(self, ArraySymbol rhs):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import Add  # avoid circular import
 *         return Add(self, rhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Add);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1549
 *         return Add(self, rhs)
 * 
 *     def __eq__(self, ArraySymbol rhs):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import Equal # avoid circular import
 *         return Equal(self, rhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_7__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_7__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_5dwave_12optimization_5model_ArraySymbol, 1, "rhs", 0))) __PYX_ERR(0, 1549, __pyx_L1_error)
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_6__eq__(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), ((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_6__eq__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_rhs) {
  PyObject *__pyx_v_Equal = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 1);

  /* "dwave/optimization/model.pyx":1550
 * 
 *     def __eq__(self, ArraySymbol rhs):
 *         from dwave.optimization.symbols import Equal # avoid circular import             # <<<<<<<<<<<<<<
 *         return Equal(self, rhs)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Equal);
  __Pyx_GIVEREF(__pyx_n_s_Equal);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Equal)) __PYX_ERR(0, 1550, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Equal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Equal = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1551
 *     def __eq__(self, ArraySymbol rhs):
 *         from dwave.optimization.symbols import Equal # avoid circular import
 *         return Equal(self, rhs)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, index):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Equal);
  __pyx_t_1 = __pyx_v_Equal; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_rhs)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1549
 *         return Add(self, rhs)
 * 
 *     def __eq__(self, ArraySymbol rhs):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import Equal # avoid circular import
 *         return Equal(self, rhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Equal);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1553
 *         return Equal(self, rhs)
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         import dwave.optimization.symbols  # avoid circular import
 *         if isinstance(index, tuple):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_8__getitem__(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___2generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":1563
 *                 index.append(slice(None))
 * 
 *             if all(isinstance(idx, (slice, numbers.Integral)) for idx in index):             # <<<<<<<<<<<<<<
 *                 # Basic indexing
 *                 # https://numpy.org/doc/stable/user/basics.indexing.html#basic-indexing
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_11__getitem___genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1563, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___2generator10, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_getitem___locals_genexpr, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__getitem__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___2generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1563, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 1563, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1563, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1563, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1563, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1563, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1563, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1563, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1563, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1563, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_idx);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_idx, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_numbers); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Integral); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = PySlice_Check(__pyx_cur_scope->__pyx_v_idx); 
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyObject_IsInstance(__pyx_cur_scope->__pyx_v_idx, __pyx_t_5); 
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = (!__pyx_t_6);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___5generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":1569
 * 
 *             elif all(isinstance(idx, ArraySymbol)
 *                      or idx.start is None and idx.stop is None and idx.step is None             # <<<<<<<<<<<<<<
 *                      for idx in index):
 *                 # Advanced indexing
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_11__getitem___3genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1569, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___5generator11, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_getitem___locals_genexpr, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 1569, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__getitem__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___5generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1569, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1570
 *             elif all(isinstance(idx, ArraySymbol)
 *                      or idx.start is None and idx.stop is None and idx.step is None
 *                      for idx in index):             # <<<<<<<<<<<<<<
 *                 # Advanced indexing
 *                 # https://numpy.org/doc/stable/user/basics.indexing.html#advanced-indexing
 */
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 1570, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1570, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1570, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1570, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1570, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1570, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1570, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_idx);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_idx, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "dwave/optimization/model.pyx":1568
 *                 return dwave.optimization.symbols.BasicIndexing(self, *index)
 * 
 *             elif all(isinstance(idx, ArraySymbol)             # <<<<<<<<<<<<<<
 *                      or idx.start is None and idx.stop is None and idx.step is None
 *                      for idx in index):
 */
    __pyx_t_6 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_idx, __pyx_ptype_5dwave_12optimization_5model_ArraySymbol); 
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }

    /* "dwave/optimization/model.pyx":1569
 * 
 *             elif all(isinstance(idx, ArraySymbol)
 *                      or idx.start is None and idx.stop is None and idx.step is None             # <<<<<<<<<<<<<<
 *                      for idx in index):
 *                 # Advanced indexing
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_idx, __pyx_n_s_start); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = (__pyx_t_4 == Py_None);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_idx, __pyx_n_s_stop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = (__pyx_t_4 == Py_None);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_idx, __pyx_n_s_step); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = (__pyx_t_4 == Py_None);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = (!__pyx_t_5);
    if (__pyx_t_6) {

      /* "dwave/optimization/model.pyx":1568
 *                 return dwave.optimization.symbols.BasicIndexing(self, *index)
 * 
 *             elif all(isinstance(idx, ArraySymbol)             # <<<<<<<<<<<<<<
 *                      or idx.start is None and idx.stop is None and idx.step is None
 *                      for idx in index):
 */
      __Pyx_XDECREF(__pyx_r);

      /* "dwave/optimization/model.pyx":1569
 * 
 *             elif all(isinstance(idx, ArraySymbol)
 *                      or idx.start is None and idx.stop is None and idx.step is None             # <<<<<<<<<<<<<<
 *                      for idx in index):
 *                 # Advanced indexing
 */
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }

    /* "dwave/optimization/model.pyx":1570
 *             elif all(isinstance(idx, ArraySymbol)
 *                      or idx.start is None and idx.stop is None and idx.step is None
 *                      for idx in index):             # <<<<<<<<<<<<<<
 *                 # Advanced indexing
 *                 # https://numpy.org/doc/stable/user/basics.indexing.html#advanced-indexing
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*else*/ {

    /* "dwave/optimization/model.pyx":1568
 *                 return dwave.optimization.symbols.BasicIndexing(self, *index)
 * 
 *             elif all(isinstance(idx, ArraySymbol)             # <<<<<<<<<<<<<<
 *                      or idx.start is None and idx.stop is None and idx.step is None
 *                      for idx in index):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "dwave/optimization/model.pyx":1569
 * 
 *             elif all(isinstance(idx, ArraySymbol)
 *                      or idx.start is None and idx.stop is None and idx.step is None             # <<<<<<<<<<<<<<
 *                      for idx in index):
 *                 # Advanced indexing
 */
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___8generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":1576
 *                 return dwave.optimization.symbols.AdvancedIndexing(self, *index)
 * 
 *             elif all(isinstance(idx, (ArraySymbol, slice, numbers.Integral)) for idx in index):             # <<<<<<<<<<<<<<
 *                 # Combined indexing
 *                 # https://numpy.org/doc/stable/user/basics.indexing.html#combining-advanced-and-basic-indexing
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_11__getitem___6genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1576, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___8generator12, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_getitem___locals_genexpr, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 1576, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__getitem__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___8generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1576, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 1576, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1576, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1576, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1576, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1576, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1576, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1576, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1576, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1576, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_idx);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_idx, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_numbers); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Integral); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_idx, __pyx_ptype_5dwave_12optimization_5model_ArraySymbol); 
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PySlice_Check(__pyx_cur_scope->__pyx_v_idx); 
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyObject_IsInstance(__pyx_cur_scope->__pyx_v_idx, __pyx_t_5); 
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = (!__pyx_t_6);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1553
 *         return Equal(self, rhs)
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         import dwave.optimization.symbols  # avoid circular import
 *         if isinstance(index, tuple):
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_8__getitem__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_dwave = NULL;
  PyObject *__pyx_v_basic_indices = NULL;
  PyObject *__pyx_v_advanced_indices = NULL;
  PyObject *__pyx_v_basic = NULL;
  PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___2generator10 = 0;
  PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___5generator11 = 0;
  PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___8generator12 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "dwave/optimization/model.pyx":1554
 * 
 *     def __getitem__(self, index):
 *         import dwave.optimization.symbols  # avoid circular import             # <<<<<<<<<<<<<<
 *         if isinstance(index, tuple):
 *             index = list(index)
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dwave = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1555
 *     def __getitem__(self, index):
 *         import dwave.optimization.symbols  # avoid circular import
 *         if isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *             index = list(index)
 * 
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_index); 
  if (__pyx_t_2) {

    /* "dwave/optimization/model.pyx":1556
 *         import dwave.optimization.symbols  # avoid circular import
 *         if isinstance(index, tuple):
 *             index = list(index)             # <<<<<<<<<<<<<<
 * 
 *             # for all indexing styles, empty slices are padded to fill out the
 */
    __pyx_t_1 = PySequence_List(__pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "dwave/optimization/model.pyx":1560
 *             # for all indexing styles, empty slices are padded to fill out the
 *             # number of dimension
 *             while len(index) < self.ndim():             # <<<<<<<<<<<<<<
 *                 index.append(slice(None))
 * 
 */
    while (1) {
      __pyx_t_3 = PyObject_Length(__pyx_v_index); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1560, __pyx_L1_error)
      __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1560, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ndim); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1560, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1560, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1560, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1560, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!__pyx_t_2) break;

      /* "dwave/optimization/model.pyx":1561
 *             # number of dimension
 *             while len(index) < self.ndim():
 *                 index.append(slice(None))             # <<<<<<<<<<<<<<
 * 
 *             if all(isinstance(idx, (slice, numbers.Integral)) for idx in index):
 */
      __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_index, __pyx_slice__42); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1561, __pyx_L1_error)
    }

    /* "dwave/optimization/model.pyx":1563
 *                 index.append(slice(None))
 * 
 *             if all(isinstance(idx, (slice, numbers.Integral)) for idx in index):             # <<<<<<<<<<<<<<
 *                 # Basic indexing
 *                 # https://numpy.org/doc/stable/user/basics.indexing.html#basic-indexing
 */
    __pyx_t_5 = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_11__getitem___genexpr(NULL, __pyx_v_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "dwave/optimization/model.pyx":1566
 *                 # Basic indexing
 *                 # https://numpy.org/doc/stable/user/basics.indexing.html#basic-indexing
 *                 return dwave.optimization.symbols.BasicIndexing(self, *index)             # <<<<<<<<<<<<<<
 * 
 *             elif all(isinstance(idx, ArraySymbol)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dwave, __pyx_n_s_optimization); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_symbols); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_BasicIndexing); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF((PyObject *)__pyx_v_self);
      __Pyx_GIVEREF((PyObject *)__pyx_v_self);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 1566, __pyx_L1_error);
      __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "dwave/optimization/model.pyx":1563
 *                 index.append(slice(None))
 * 
 *             if all(isinstance(idx, (slice, numbers.Integral)) for idx in index):             # <<<<<<<<<<<<<<
 *                 # Basic indexing
 *                 # https://numpy.org/doc/stable/user/basics.indexing.html#basic-indexing
 */
    }

    /* "dwave/optimization/model.pyx":1569
 * 
 *             elif all(isinstance(idx, ArraySymbol)
 *                      or idx.start is None and idx.stop is None and idx.step is None             # <<<<<<<<<<<<<<
 *                      for idx in index):
 *                 # Advanced indexing
 */
    __pyx_t_1 = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_11__getitem___3genexpr(NULL, __pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1569, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "dwave/optimization/model.pyx":1568
 *                 return dwave.optimization.symbols.BasicIndexing(self, *index)
 * 
 *             elif all(isinstance(idx, ArraySymbol)             # <<<<<<<<<<<<<<
 *                      or idx.start is None and idx.stop is None and idx.step is None
 *                      for idx in index):
 */
    if (__pyx_t_2) {

      /* "dwave/optimization/model.pyx":1574
 *                 # https://numpy.org/doc/stable/user/basics.indexing.html#advanced-indexing
 * 
 *                 return dwave.optimization.symbols.AdvancedIndexing(self, *index)             # <<<<<<<<<<<<<<
 * 
 *             elif all(isinstance(idx, (ArraySymbol, slice, numbers.Integral)) for idx in index):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_dwave, __pyx_n_s_optimization); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_symbols); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_AdvancedIndexing); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF((PyObject *)__pyx_v_self);
      __Pyx_GIVEREF((PyObject *)__pyx_v_self);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 1574, __pyx_L1_error);
      __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "dwave/optimization/model.pyx":1568
 *                 return dwave.optimization.symbols.BasicIndexing(self, *index)
 * 
 *             elif all(isinstance(idx, ArraySymbol)             # <<<<<<<<<<<<<<
 *                      or idx.start is None and idx.stop is None and idx.step is None
 *                      for idx in index):
 */
    }

    /* "dwave/optimization/model.pyx":1576
 *                 return dwave.optimization.symbols.AdvancedIndexing(self, *index)
 * 
 *             elif all(isinstance(idx, (ArraySymbol, slice, numbers.Integral)) for idx in index):             # <<<<<<<<<<<<<<
 *                 # Combined indexing
 *                 # https://numpy.org/doc/stable/user/basics.indexing.html#combining-advanced-and-basic-indexing
 */
    __pyx_t_4 = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_11__getitem___6genexpr(NULL, __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1576, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(__pyx_t_2)) {

      /* "dwave/optimization/model.pyx":1583
 *                 # order may be more efficient in some cases, but for now let's do the simple thing
 * 
 *                 basic_indices, advanced_indices = _split_indices(index)             # <<<<<<<<<<<<<<
 *                 basic = dwave.optimization.symbols(self, *basic_indices)
 *                 return dwave.optimization.symbols(basic, *advanced_indices)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_split_indices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1583, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_index};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1583, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
        PyObject* sequence = __pyx_t_5;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1583, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1583, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1583, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_1 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1583, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1);
        index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_1); if (unlikely(!__pyx_t_4)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_1); if (unlikely(!__pyx_t_6)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_1), 2) < 0) __PYX_ERR(0, 1583, __pyx_L1_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L8_unpacking_done;
        __pyx_L7_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1583, __pyx_L1_error)
        __pyx_L8_unpacking_done:;
      }
      __pyx_v_basic_indices = __pyx_t_4;
      __pyx_t_4 = 0;
      __pyx_v_advanced_indices = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "dwave/optimization/model.pyx":1584
 * 
 *                 basic_indices, advanced_indices = _split_indices(index)
 *                 basic = dwave.optimization.symbols(self, *basic_indices)             # <<<<<<<<<<<<<<
 *                 return dwave.optimization.symbols(basic, *advanced_indices)
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dwave, __pyx_n_s_optimization); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_symbols); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF((PyObject *)__pyx_v_self);
      __Pyx_GIVEREF((PyObject *)__pyx_v_self);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 1584, __pyx_L1_error);
      __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_basic_indices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_basic = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "dwave/optimization/model.pyx":1585
 *                 basic_indices, advanced_indices = _split_indices(index)
 *                 basic = dwave.optimization.symbols(self, *basic_indices)
 *                 return dwave.optimization.symbols(basic, *advanced_indices)             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dwave, __pyx_n_s_optimization); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1585, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_symbols); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1585, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1585, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_basic);
      __Pyx_GIVEREF(__pyx_v_basic);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_basic)) __PYX_ERR(0, 1585, __pyx_L1_error);
      __pyx_t_6 = __Pyx_PySequence_Tuple(__pyx_v_advanced_indices); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1585, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1585, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1585, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;

      /* "dwave/optimization/model.pyx":1576
 *                 return dwave.optimization.symbols.AdvancedIndexing(self, *index)
 * 
 *             elif all(isinstance(idx, (ArraySymbol, slice, numbers.Integral)) for idx in index):             # <<<<<<<<<<<<<<
 *                 # Combined indexing
 *                 # https://numpy.org/doc/stable/user/basics.indexing.html#combining-advanced-and-basic-indexing
 */
    }

    /* "dwave/optimization/model.pyx":1591
 * 
 *                 # this error message is chosen to be similar to NumPy's
 *                 raise IndexError("only integers, slices (`:`), and array symbols are valid indices")             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1591, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 1591, __pyx_L1_error)
    }

    /* "dwave/optimization/model.pyx":1555
 *     def __getitem__(self, index):
 *         import dwave.optimization.symbols  # avoid circular import
 *         if isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *             index = list(index)
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1594
 * 
 *         else:
 *             return self[(index,)]             # <<<<<<<<<<<<<<
 * 
 *     def __le__(self, ArraySymbol rhs):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_index)) __PYX_ERR(0, 1594, __pyx_L1_error);
    __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "dwave/optimization/model.pyx":1553
 *         return Equal(self, rhs)
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         import dwave.optimization.symbols  # avoid circular import
 *         if isinstance(index, tuple):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dwave);
  __Pyx_XDECREF(__pyx_v_basic_indices);
  __Pyx_XDECREF(__pyx_v_advanced_indices);
  __Pyx_XDECREF(__pyx_v_basic);
  __Pyx_XDECREF(__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___2generator10);
  __Pyx_XDECREF(__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___5generator11);
  __Pyx_XDECREF(__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_11__getitem___8generator12);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1596
 *             return self[(index,)]
 * 
 *     def __le__(self, ArraySymbol rhs):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import LessEqual # avoid circular import
 *         return LessEqual(self, rhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_11__le__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_11__le__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__le__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_5dwave_12optimization_5model_ArraySymbol, 1, "rhs", 0))) __PYX_ERR(0, 1596, __pyx_L1_error)
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_10__le__(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), ((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_10__le__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_rhs) {
  PyObject *__pyx_v_LessEqual = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__le__", 1);

  /* "dwave/optimization/model.pyx":1597
 * 
 *     def __le__(self, ArraySymbol rhs):
 *         from dwave.optimization.symbols import LessEqual # avoid circular import             # <<<<<<<<<<<<<<
 *         return LessEqual(self, rhs)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_LessEqual);
  __Pyx_GIVEREF(__pyx_n_s_LessEqual);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_LessEqual)) __PYX_ERR(0, 1597, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_LessEqual); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_LessEqual = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1598
 *     def __le__(self, ArraySymbol rhs):
 *         from dwave.optimization.symbols import LessEqual # avoid circular import
 *         return LessEqual(self, rhs)             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, ArraySymbol rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_LessEqual);
  __pyx_t_1 = __pyx_v_LessEqual; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_rhs)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1596
 *             return self[(index,)]
 * 
 *     def __le__(self, ArraySymbol rhs):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import LessEqual # avoid circular import
 *         return LessEqual(self, rhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__le__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_LessEqual);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1600
 *         return LessEqual(self, rhs)
 * 
 *     def __mul__(self, ArraySymbol rhs):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import Multiply  # avoid circular import
 *         return Multiply(self, rhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_5dwave_12optimization_5model_ArraySymbol, 1, "rhs", 0))) __PYX_ERR(0, 1600, __pyx_L1_error)
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_12__mul__(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), ((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_12__mul__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_rhs) {
  PyObject *__pyx_v_Multiply = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 1);

  /* "dwave/optimization/model.pyx":1601
 * 
 *     def __mul__(self, ArraySymbol rhs):
 *         from dwave.optimization.symbols import Multiply  # avoid circular import             # <<<<<<<<<<<<<<
 *         return Multiply(self, rhs)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Multiply);
  __Pyx_GIVEREF(__pyx_n_s_Multiply);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Multiply)) __PYX_ERR(0, 1601, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Multiply); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Multiply = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1602
 *     def __mul__(self, ArraySymbol rhs):
 *         from dwave.optimization.symbols import Multiply  # avoid circular import
 *         return Multiply(self, rhs)             # <<<<<<<<<<<<<<
 * 
 *     def __neg__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Multiply);
  __pyx_t_1 = __pyx_v_Multiply; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_rhs)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1600
 *         return LessEqual(self, rhs)
 * 
 *     def __mul__(self, ArraySymbol rhs):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import Multiply  # avoid circular import
 *         return Multiply(self, rhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Multiply);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1604
 *         return Multiply(self, rhs)
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import Negative  # avoid circular import
 *         return Negative(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_15__neg__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_15__neg__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_14__neg__(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_14__neg__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self) {
  PyObject *__pyx_v_Negative = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__neg__", 1);

  /* "dwave/optimization/model.pyx":1605
 * 
 *     def __neg__(self):
 *         from dwave.optimization.symbols import Negative  # avoid circular import             # <<<<<<<<<<<<<<
 *         return Negative(self)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Negative);
  __Pyx_GIVEREF(__pyx_n_s_Negative);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Negative)) __PYX_ERR(0, 1605, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Negative); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Negative = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1606
 *     def __neg__(self):
 *         from dwave.optimization.symbols import Negative  # avoid circular import
 *         return Negative(self)             # <<<<<<<<<<<<<<
 * 
 *     def __pow__(self, Py_ssize_t exponent):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Negative);
  __pyx_t_1 = __pyx_v_Negative; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1604
 *         return Multiply(self, rhs)
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import Negative  # avoid circular import
 *         return Negative(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__neg__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Negative);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1608
 *         return Negative(self)
 * 
 *     def __pow__(self, Py_ssize_t exponent):             # <<<<<<<<<<<<<<
 *         if exponent == 2:
 *             from dwave.optimization.symbols import Square  # avoid circular import
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_17__pow__(PyObject *__pyx_v_self, PyObject *__pyx_arg_exponent, CYTHON_UNUSED PyObject *unused_arg_2); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_17__pow__(PyObject *__pyx_v_self, PyObject *__pyx_arg_exponent, CYTHON_UNUSED PyObject *unused_arg_2) {
  Py_ssize_t __pyx_v_exponent;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pow__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  assert(__pyx_arg_exponent); {
    __pyx_v_exponent = __Pyx_PyIndex_AsSsize_t(__pyx_arg_exponent); if (unlikely((__pyx_v_exponent == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1608, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__pow__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(unused_arg_2 != Py_None)) {
    PyErr_SetString(PyExc_TypeError, "dwave.optimization.model.ArraySymbol.__pow__() takes 3 arguments but 2 were given");
    __PYX_ERR(0, 1608, __pyx_L1_error);
  }
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_16__pow__(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), ((Py_ssize_t)__pyx_v_exponent));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_16__pow__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, Py_ssize_t __pyx_v_exponent) {
  PyObject *__pyx_v_Square = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pow__", 1);

  /* "dwave/optimization/model.pyx":1609
 * 
 *     def __pow__(self, Py_ssize_t exponent):
 *         if exponent == 2:             # <<<<<<<<<<<<<<
 *             from dwave.optimization.symbols import Square  # avoid circular import
 *             return Square(self)
 */
  __pyx_t_1 = (__pyx_v_exponent == 2);
  if (__pyx_t_1) {

    /* "dwave/optimization/model.pyx":1610
 *     def __pow__(self, Py_ssize_t exponent):
 *         if exponent == 2:
 *             from dwave.optimization.symbols import Square  # avoid circular import             # <<<<<<<<<<<<<<
 *             return Square(self)
 *         raise NotImplementedError("only squaring is currently supported")
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_Square);
    __Pyx_GIVEREF(__pyx_n_s_Square);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Square)) __PYX_ERR(0, 1610, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_Square); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_Square = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dwave/optimization/model.pyx":1611
 *         if exponent == 2:
 *             from dwave.optimization.symbols import Square  # avoid circular import
 *             return Square(self)             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("only squaring is currently supported")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_Square);
    __pyx_t_2 = __pyx_v_Square; __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, ((PyObject *)__pyx_v_self)};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1609
 * 
 *     def __pow__(self, Py_ssize_t exponent):
 *         if exponent == 2:             # <<<<<<<<<<<<<<
 *             from dwave.optimization.symbols import Square  # avoid circular import
 *             return Square(self)
 */
  }

  /* "dwave/optimization/model.pyx":1612
 *             from dwave.optimization.symbols import Square  # avoid circular import
 *             return Square(self)
 *         raise NotImplementedError("only squaring is currently supported")             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(self, ArraySymbol rhs):
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 1612, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1608
 *         return Negative(self)
 * 
 *     def __pow__(self, Py_ssize_t exponent):             # <<<<<<<<<<<<<<
 *         if exponent == 2:
 *             from dwave.optimization.symbols import Square  # avoid circular import
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__pow__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Square);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1614
 *         raise NotImplementedError("only squaring is currently supported")
 * 
 *     def __sub__(self, ArraySymbol rhs):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import Subtract  # avoid circular import
 *         return Subtract(self, rhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_19__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_19__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_5dwave_12optimization_5model_ArraySymbol, 1, "rhs", 0))) __PYX_ERR(0, 1614, __pyx_L1_error)
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_18__sub__(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), ((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_18__sub__(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_rhs) {
  PyObject *__pyx_v_Subtract = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 1);

  /* "dwave/optimization/model.pyx":1615
 * 
 *     def __sub__(self, ArraySymbol rhs):
 *         from dwave.optimization.symbols import Subtract  # avoid circular import             # <<<<<<<<<<<<<<
 *         return Subtract(self, rhs)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Subtract);
  __Pyx_GIVEREF(__pyx_n_s_Subtract);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Subtract)) __PYX_ERR(0, 1615, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Subtract); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Subtract = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1616
 *     def __sub__(self, ArraySymbol rhs):
 *         from dwave.optimization.symbols import Subtract  # avoid circular import
 *         return Subtract(self, rhs)             # <<<<<<<<<<<<<<
 * 
 *     def all(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Subtract);
  __pyx_t_1 = __pyx_v_Subtract; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_rhs)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1614
 *         raise NotImplementedError("only squaring is currently supported")
 * 
 *     def __sub__(self, ArraySymbol rhs):             # <<<<<<<<<<<<<<
 *         from dwave.optimization.symbols import Subtract  # avoid circular import
 *         return Subtract(self, rhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Subtract);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1618
 *         return Subtract(self, rhs)
 * 
 *     def all(self):             # <<<<<<<<<<<<<<
 *         """Create an :class:`~dwave.optimization.symbols.All` symbol.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_21all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_11ArraySymbol_20all, "Create an :class:`~dwave.optimization.symbols.All` symbol.\n        \n        The new symbol returns True when all elements evaluate to True.\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_21all = {"all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_21all, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_20all};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_21all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("all (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("all", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "all", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_20all(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_20all(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self) {
  PyObject *__pyx_v_All = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("all", 1);

  /* "dwave/optimization/model.pyx":1623
 *         The new symbol returns True when all elements evaluate to True.
 *         """
 *         from dwave.optimization.symbols import All  # avoid circular import             # <<<<<<<<<<<<<<
 *         return All(self)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_All);
  __Pyx_GIVEREF(__pyx_n_s_All);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_All)) __PYX_ERR(0, 1623, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_All); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_All = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1624
 *         """
 *         from dwave.optimization.symbols import All  # avoid circular import
 *         return All(self)             # <<<<<<<<<<<<<<
 * 
 *     def max(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_All);
  __pyx_t_1 = __pyx_v_All; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1618
 *         return Subtract(self, rhs)
 * 
 *     def all(self):             # <<<<<<<<<<<<<<
 *         """Create an :class:`~dwave.optimization.symbols.All` symbol.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_All);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1626
 *         return All(self)
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Max` symbol.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_23max(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_11ArraySymbol_22max, "Create a :class:`~dwave.optimization.symbols.Max` symbol.\n        \n        The new symbol returns the maximum value in its elements.\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_23max = {"max", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_23max, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_22max};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_23max(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("max", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "max", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_22max(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_22max(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self) {
  PyObject *__pyx_v_Max = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("max", 1);

  /* "dwave/optimization/model.pyx":1631
 *         The new symbol returns the maximum value in its elements.
 *         """
 *         from dwave.optimization.symbols import Max  # avoid circular import             # <<<<<<<<<<<<<<
 *         return Max(self)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Max);
  __Pyx_GIVEREF(__pyx_n_s_Max);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Max)) __PYX_ERR(0, 1631, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Max); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Max = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1632
 *         """
 *         from dwave.optimization.symbols import Max  # avoid circular import
 *         return Max(self)             # <<<<<<<<<<<<<<
 * 
 *     def maybe_equals(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Max);
  __pyx_t_1 = __pyx_v_Max; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1626
 *         return All(self)
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Max` symbol.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Max);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1634
 *         return Max(self)
 * 
 *     def maybe_equals(self, other):             # <<<<<<<<<<<<<<
 *         """Compare to another symbol.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_25maybe_equals(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_11ArraySymbol_24maybe_equals, "Compare to another symbol.\n        \n        Args:\n            other: Another symbol in the model.\n            \n        Returns:\n            True if the two symbols might be equal.\n            \n        Examples:\n            This example compares \n            :class:`~dwave.optimization.symbols.IntegerVariable` symbols\n            of different sizes.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> i = model.integer(3, lower_bound=0, upper_bound=20)\n            >>> j = model.integer(3, lower_bound=-10, upper_bound=10)\n            >>> k = model.integer(5, upper_bound=55)\n            >>> i.maybe_equals(j)\n            1\n            >>> i.maybe_equals(k)\n            0\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_25maybe_equals = {"maybe_equals", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_25maybe_equals, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_24maybe_equals};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_25maybe_equals(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("maybe_equals (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1634, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "maybe_equals") < 0)) __PYX_ERR(0, 1634, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("maybe_equals", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1634, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.maybe_equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_24maybe_equals(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), __pyx_v_other);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_24maybe_equals(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, PyObject *__pyx_v_other) {
  Py_ssize_t __pyx_v_maybe;
  Py_ssize_t __pyx_v_NOT;
  Py_ssize_t __pyx_v_MAYBE;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("maybe_equals", 1);

  /* "dwave/optimization/model.pyx":1658
 *             0
 *         """
 *         cdef Py_ssize_t maybe = super().maybe_equals(other)             # <<<<<<<<<<<<<<
 *         if maybe != 1:
 *             return True if maybe else False
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol))) __PYX_ERR(0, 1658, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 1658, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_maybe_equals); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_other};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_maybe = __pyx_t_5;

  /* "dwave/optimization/model.pyx":1659
 *         """
 *         cdef Py_ssize_t maybe = super().maybe_equals(other)
 *         if maybe != 1:             # <<<<<<<<<<<<<<
 *             return True if maybe else False
 * 
 */
  __pyx_t_6 = (__pyx_v_maybe != 1);
  if (__pyx_t_6) {

    /* "dwave/optimization/model.pyx":1660
 *         cdef Py_ssize_t maybe = super().maybe_equals(other)
 *         if maybe != 1:
 *             return True if maybe else False             # <<<<<<<<<<<<<<
 * 
 *         cdef Py_ssize_t NOT = 0
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = (__pyx_v_maybe != 0);
    if (__pyx_t_6) {
      __Pyx_INCREF(Py_True);
      __pyx_t_1 = Py_True;
    } else {
      __Pyx_INCREF(Py_False);
      __pyx_t_1 = Py_False;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1659
 *         """
 *         cdef Py_ssize_t maybe = super().maybe_equals(other)
 *         if maybe != 1:             # <<<<<<<<<<<<<<
 *             return True if maybe else False
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1662
 *             return True if maybe else False
 * 
 *         cdef Py_ssize_t NOT = 0             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t MAYBE = 1
 * 
 */
  __pyx_v_NOT = 0;

  /* "dwave/optimization/model.pyx":1663
 * 
 *         cdef Py_ssize_t NOT = 0
 *         cdef Py_ssize_t MAYBE = 1             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(other, ArraySymbol):
 */
  __pyx_v_MAYBE = 1;

  /* "dwave/optimization/model.pyx":1665
 *         cdef Py_ssize_t MAYBE = 1
 * 
 *         if not isinstance(other, ArraySymbol):             # <<<<<<<<<<<<<<
 *             return NOT
 * 
 */
  __pyx_t_6 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_5dwave_12optimization_5model_ArraySymbol); 
  __pyx_t_7 = (!__pyx_t_6);
  if (__pyx_t_7) {

    /* "dwave/optimization/model.pyx":1666
 * 
 *         if not isinstance(other, ArraySymbol):
 *             return NOT             # <<<<<<<<<<<<<<
 * 
 *         if self.shape() != other.shape():
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_NOT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1665
 *         cdef Py_ssize_t MAYBE = 1
 * 
 *         if not isinstance(other, ArraySymbol):             # <<<<<<<<<<<<<<
 *             return NOT
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1668
 *             return NOT
 * 
 *         if self.shape() != other.shape():             # <<<<<<<<<<<<<<
 *             return NOT
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1668, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1668, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {

    /* "dwave/optimization/model.pyx":1669
 * 
 *         if self.shape() != other.shape():
 *             return NOT             # <<<<<<<<<<<<<<
 * 
 *         # I guess we don't care about strides
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_NOT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1668
 *             return NOT
 * 
 *         if self.shape() != other.shape():             # <<<<<<<<<<<<<<
 *             return NOT
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1673
 *         # I guess we don't care about strides
 * 
 *         return MAYBE             # <<<<<<<<<<<<<<
 * 
 *     def min(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_MAYBE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1634
 *         return Max(self)
 * 
 *     def maybe_equals(self, other):             # <<<<<<<<<<<<<<
 *         """Compare to another symbol.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.maybe_equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1675
 *         return MAYBE
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Min` symbol.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_27min(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_11ArraySymbol_26min, "Create a :class:`~dwave.optimization.symbols.Min` symbol.\n        \n        The new symbol returns the minimum value in its elements.\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_27min = {"min", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_27min, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_26min};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_27min(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("min (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("min", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "min", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_26min(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_26min(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self) {
  PyObject *__pyx_v_Min = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("min", 1);

  /* "dwave/optimization/model.pyx":1680
 *         The new symbol returns the minimum value in its elements.
 *         """
 *         from dwave.optimization.symbols import Min  # avoid circular import             # <<<<<<<<<<<<<<
 *         return Min(self)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Min);
  __Pyx_GIVEREF(__pyx_n_s_Min);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Min)) __PYX_ERR(0, 1680, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Min = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1681
 *         """
 *         from dwave.optimization.symbols import Min  # avoid circular import
 *         return Min(self)             # <<<<<<<<<<<<<<
 * 
 *     def ndim(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Min);
  __pyx_t_1 = __pyx_v_Min; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1675
 *         return MAYBE
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Min` symbol.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Min);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1683
 *         return Min(self)
 * 
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         """Return the number of dimensions for a symbol."""
 *         return self.array_ptr.ndim()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_29ndim(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_11ArraySymbol_28ndim, "Return the number of dimensions for a symbol.");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_29ndim = {"ndim", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_29ndim, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_28ndim};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_29ndim(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ndim (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("ndim", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "ndim", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_28ndim(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_28ndim(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ndim", 1);

  /* "dwave/optimization/model.pyx":1685
 *     def ndim(self):
 *         """Return the number of dimensions for a symbol."""
 *         return self.array_ptr.ndim()             # <<<<<<<<<<<<<<
 * 
 *     def prod(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->array_ptr->ndim()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1683
 *         return Min(self)
 * 
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         """Return the number of dimensions for a symbol."""
 *         return self.array_ptr.ndim()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.ndim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1687
 *         return self.array_ptr.ndim()
 * 
 *     def prod(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Prod` symbol.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_31prod(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_11ArraySymbol_30prod, "Create a :class:`~dwave.optimization.symbols.Prod` symbol.\n        \n        The new symbol returns the product of its elements.\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_31prod = {"prod", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_31prod, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_30prod};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_31prod(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prod (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("prod", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "prod", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_30prod(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_30prod(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self) {
  PyObject *__pyx_v_Prod = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prod", 1);

  /* "dwave/optimization/model.pyx":1692
 *         The new symbol returns the product of its elements.
 *         """
 *         from dwave.optimization.symbols import Prod  # avoid circular import             # <<<<<<<<<<<<<<
 *         return Prod(self)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Prod);
  __Pyx_GIVEREF(__pyx_n_s_Prod);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Prod)) __PYX_ERR(0, 1692, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Prod); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Prod = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1693
 *         """
 *         from dwave.optimization.symbols import Prod  # avoid circular import
 *         return Prod(self)             # <<<<<<<<<<<<<<
 * 
 *     def reshape(self, *shape):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Prod);
  __pyx_t_1 = __pyx_v_Prod; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1687
 *         return self.array_ptr.ndim()
 * 
 *     def prod(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Prod` symbol.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.prod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Prod);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1695
 *         return Prod(self)
 * 
 *     def reshape(self, *shape):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Reshape` symbol.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_33reshape(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_11ArraySymbol_32reshape, "Create a :class:`~dwave.optimization.symbols.Reshape` symbol.\n        \n        Args:\n            shape: Shape of the created symbol.\n        \n        The new symbol reshapes without changing the antecedent symbol's \n        data.\n        \n        Examples:\n            This example reshapes a column vector into a row vector.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> j = model.integer(3, lower_bound=-10, upper_bound=10)\n            >>> j.shape()\n            (3,)\n            >>> k = j.reshape((1, 3))\n            >>> k.shape()\n            (1, 3)\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_33reshape = {"reshape", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_33reshape, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_32reshape};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_33reshape(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reshape (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "reshape", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_shape = __pyx_args;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_32reshape(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), __pyx_v_shape);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_shape);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_32reshape(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, PyObject *__pyx_v_shape) {
  PyObject *__pyx_v_Reshape = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reshape", 1);

  /* "dwave/optimization/model.pyx":1716
 *             (1, 3)
 *         """
 *         from dwave.optimization.symbols import Reshape  # avoid circular import             # <<<<<<<<<<<<<<
 *         if len(shape) > 1:
 *             return Reshape(self, shape)
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Reshape);
  __Pyx_GIVEREF(__pyx_n_s_Reshape);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Reshape)) __PYX_ERR(0, 1716, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Reshape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Reshape = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1717
 *         """
 *         from dwave.optimization.symbols import Reshape  # avoid circular import
 *         if len(shape) > 1:             # <<<<<<<<<<<<<<
 *             return Reshape(self, shape)
 *         else:
 */
  __pyx_t_3 = __Pyx_PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1717, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 > 1);
  if (__pyx_t_4) {

    /* "dwave/optimization/model.pyx":1718
 *         from dwave.optimization.symbols import Reshape  # avoid circular import
 *         if len(shape) > 1:
 *             return Reshape(self, shape)             # <<<<<<<<<<<<<<
 *         else:
 *             return Reshape(self, shape[0])
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_Reshape);
    __pyx_t_1 = __pyx_v_Reshape; __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_shape};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1718, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1717
 *         """
 *         from dwave.optimization.symbols import Reshape  # avoid circular import
 *         if len(shape) > 1:             # <<<<<<<<<<<<<<
 *             return Reshape(self, shape)
 *         else:
 */
  }

  /* "dwave/optimization/model.pyx":1720
 *             return Reshape(self, shape)
 *         else:
 *             return Reshape(self, shape[0])             # <<<<<<<<<<<<<<
 * 
 *     def shape(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_shape, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_Reshape);
    __pyx_t_5 = __pyx_v_Reshape; __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_7, ((PyObject *)__pyx_v_self), __pyx_t_1};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1720, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "dwave/optimization/model.pyx":1695
 *         return Prod(self)
 * 
 *     def reshape(self, *shape):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Reshape` symbol.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.reshape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Reshape);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1722
 *             return Reshape(self, shape[0])
 * 
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         """Return the shape of the symbol.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_35shape(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_11ArraySymbol_34shape, "Return the shape of the symbol.\n        \n        Examples:\n            This example returns the shape of a newly instantiated symbol.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> x = model.binary(20)\n            >>> x.shape()\n            (20,)\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_35shape = {"shape", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_35shape, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_34shape};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_35shape(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shape (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("shape", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "shape", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_34shape(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_5shape_2generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":1738
 *         # but I think it's better to follow NumPy and return a tuple
 *         shape = self.array_ptr.shape()
 *         return tuple(shape[i] for i in range(shape.size()))             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_5shape_genexpr(PyObject *__pyx_self, std::span<Py_ssize_t const > ::size_type __pyx_genexpr_arg_0) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1738, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_11ArraySymbol_5shape_2generator13, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_shape_locals_genexpr, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 1738, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.shape.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_5shape_2generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::span<Py_ssize_t const > ::size_type __pyx_t_1;
  std::span<Py_ssize_t const > ::size_type __pyx_t_2;
  std::span<Py_ssize_t const > ::size_type __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1738, __pyx_L1_error)
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_outer_scope->__pyx_v_shape[__pyx_cur_scope->__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1738, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1722
 *             return Reshape(self, shape[0])
 * 
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         """Return the shape of the symbol.
 * 
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_34shape(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape *__pyx_cur_scope;
  PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_5shape_2generator13 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shape", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_15_shape(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1722, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }

  /* "dwave/optimization/model.pyx":1737
 *         # We could do the whole buffer format thing and return a numpy array
 *         # but I think it's better to follow NumPy and return a tuple
 *         shape = self.array_ptr.shape()             # <<<<<<<<<<<<<<
 *         return tuple(shape[i] for i in range(shape.size()))
 * 
 */
  __pyx_cur_scope->__pyx_v_shape = __pyx_v_self->array_ptr->shape();

  /* "dwave/optimization/model.pyx":1738
 *         # but I think it's better to follow NumPy and return a tuple
 *         shape = self.array_ptr.shape()
 *         return tuple(shape[i] for i in range(shape.size()))             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_5shape_genexpr(((PyObject*)__pyx_cur_scope), __pyx_cur_scope->__pyx_v_shape.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1722
 *             return Reshape(self, shape[0])
 * 
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         """Return the shape of the symbol.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.shape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_5shape_2generator13);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1740
 *         return tuple(shape[i] for i in range(shape.size()))
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         r"""Return the number of elements in the symbol.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_37size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_11ArraySymbol_36size, "Return the number of elements in the symbol.\n\n        ``-1`` indicates a variable number of elements.\n        \n        Examples:\n            This example checks the size of a :math:`2 \\times 3`\n            binary symbol.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> x = model.binary((2, 3))\n            >>> x.size()\n            6\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_37size = {"size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_37size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_36size};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_37size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("size", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "size", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_36size(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_36size(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 1);

  /* "dwave/optimization/model.pyx":1755
 *             6
 *         """
 *         return self.array_ptr.size()             # <<<<<<<<<<<<<<
 * 
 *     def state(self, Py_ssize_t index = 0, *, bool copy = True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->array_ptr->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1740
 *         return tuple(shape[i] for i in range(shape.size()))
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         r"""Return the number of elements in the symbol.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1757
 *         return self.array_ptr.size()
 * 
 *     def state(self, Py_ssize_t index = 0, *, bool copy = True):             # <<<<<<<<<<<<<<
 *         """Return the state of the node.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_39state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_11ArraySymbol_38state, "Return the state of the node.\n\n        Args:\n            index: Index of the state.\n            \n            copy: Currently only True is supported.\n\n        Returns:\n            State as a :class:`numpy.ndarray`.\n\n        Examples:\n            This example prints a node two states: initialized \n            and uninitialized. \n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> x = model.binary((2, 3))\n            >>> z = x.sum()\n            >>> with model.lock():\n            ...     model.states.resize(2)\n            ...     x.set_state(0, [[0, 0, 1], [1, 0, 1]])\n            ...     print(z.state(0))\n            ...     print(z.state(1))\n            3.0\n            0.0\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_39state = {"state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_39state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_38state};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_39state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  Py_ssize_t __pyx_v_index;
  bool __pyx_v_copy;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("state (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_copy,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_index);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1757, __pyx_L3_error)
        }
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 1;
        PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1757, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "state") < 0)) __PYX_ERR(0, 1757, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_index = __Pyx_PyIndex_AsSsize_t(values[0]); if (unlikely((__pyx_v_index == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1757, __pyx_L3_error)
    } else {
      __pyx_v_index = ((Py_ssize_t)0);
    }
    if (values[1]) {
      __pyx_v_copy = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_copy == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1757, __pyx_L3_error)
    } else {
      __pyx_v_copy = ((bool)1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("state", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1757, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_38state(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), __pyx_v_index, __pyx_v_copy);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_38state(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, Py_ssize_t __pyx_v_index, bool __pyx_v_copy) {
  Py_ssize_t __pyx_v_num_states;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("state", 1);

  /* "dwave/optimization/model.pyx":1784
 *             0.0
 *         """
 *         if not copy:             # <<<<<<<<<<<<<<
 *             # todo: document once implemented
 *             raise NotImplementedError("copy=False is not (yet) supported")
 */
  __pyx_t_1 = (!(__pyx_v_copy != 0));
  if (unlikely(__pyx_t_1)) {

    /* "dwave/optimization/model.pyx":1786
 *         if not copy:
 *             # todo: document once implemented
 *             raise NotImplementedError("copy=False is not (yet) supported")             # <<<<<<<<<<<<<<
 * 
 *         cdef Py_ssize_t num_states = self.model.states.size()
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1786, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":1784
 *             0.0
 *         """
 *         if not copy:             # <<<<<<<<<<<<<<
 *             # todo: document once implemented
 *             raise NotImplementedError("copy=False is not (yet) supported")
 */
  }

  /* "dwave/optimization/model.pyx":1788
 *             raise NotImplementedError("copy=False is not (yet) supported")
 * 
 *         cdef Py_ssize_t num_states = self.model.states.size()             # <<<<<<<<<<<<<<
 * 
 *         if not -num_states <= index < num_states:
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->__pyx_base.model->states->__pyx_vtab)->size(__pyx_v_self->__pyx_base.model->states, 0); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 1788, __pyx_L1_error)
  __pyx_v_num_states = __pyx_t_3;

  /* "dwave/optimization/model.pyx":1790
 *         cdef Py_ssize_t num_states = self.model.states.size()
 * 
 *         if not -num_states <= index < num_states:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"index out of range: {index}")
 *         elif index < 0:  # allow negative indexing
 */
  __pyx_t_1 = ((-__pyx_v_num_states) <= __pyx_v_index);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_index < __pyx_v_num_states);
  }
  __pyx_t_4 = (!__pyx_t_1);
  if (unlikely(__pyx_t_4)) {

    /* "dwave/optimization/model.pyx":1791
 * 
 *         if not -num_states <= index < num_states:
 *             raise ValueError(f"index out of range: {index}")             # <<<<<<<<<<<<<<
 *         elif index < 0:  # allow negative indexing
 *             index += num_states
 */
    __pyx_t_2 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_index, 0, ' ', 'd'); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_index_out_of_range, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1791, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":1790
 *         cdef Py_ssize_t num_states = self.model.states.size()
 * 
 *         if not -num_states <= index < num_states:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"index out of range: {index}")
 *         elif index < 0:  # allow negative indexing
 */
  }

  /* "dwave/optimization/model.pyx":1792
 *         if not -num_states <= index < num_states:
 *             raise ValueError(f"index out of range: {index}")
 *         elif index < 0:  # allow negative indexing             # <<<<<<<<<<<<<<
 *             index += num_states
 * 
 */
  __pyx_t_4 = (__pyx_v_index < 0);
  if (__pyx_t_4) {

    /* "dwave/optimization/model.pyx":1793
 *             raise ValueError(f"index out of range: {index}")
 *         elif index < 0:  # allow negative indexing
 *             index += num_states             # <<<<<<<<<<<<<<
 * 
 *         if not self.model.is_locked() and self.node_ptr.topological_index() < 0:
 */
    __pyx_v_index = (__pyx_v_index + __pyx_v_num_states);

    /* "dwave/optimization/model.pyx":1792
 *         if not -num_states <= index < num_states:
 *             raise ValueError(f"index out of range: {index}")
 *         elif index < 0:  # allow negative indexing             # <<<<<<<<<<<<<<
 *             index += num_states
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1795
 *             index += num_states
 * 
 *         if not self.model.is_locked() and self.node_ptr.topological_index() < 0:             # <<<<<<<<<<<<<<
 *             raise TypeError("the state of an intermediate variable cannot be accessed without "
 *                             "locking the model first. See model.lock().")
 */
  __pyx_t_1 = (!(((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_self->__pyx_base.model->__pyx_vtab)->is_locked(__pyx_v_self->__pyx_base.model, 0) != 0));
  if (__pyx_t_1) {
  } else {
    __pyx_t_4 = __pyx_t_1;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_self->__pyx_base.node_ptr->topological_index() < 0);
  __pyx_t_4 = __pyx_t_1;
  __pyx_L6_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "dwave/optimization/model.pyx":1796
 * 
 *         if not self.model.is_locked() and self.node_ptr.topological_index() < 0:
 *             raise TypeError("the state of an intermediate variable cannot be accessed without "             # <<<<<<<<<<<<<<
 *                             "locking the model first. See model.lock().")
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1796, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":1795
 *             index += num_states
 * 
 *         if not self.model.is_locked() and self.node_ptr.topological_index() < 0:             # <<<<<<<<<<<<<<
 *             raise TypeError("the state of an intermediate variable cannot be accessed without "
 *                             "locking the model first. See model.lock().")
 */
  }

  /* "dwave/optimization/model.pyx":1799
 *                             "locking the model first. See model.lock().")
 * 
 *         return np.array(StateView(self, index), copy=copy)             # <<<<<<<<<<<<<<
 * 
 *     def _state_from_zipfile(self, zf, directory, Py_ssize_t state_index):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 1799, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2)) __PYX_ERR(0, 1799, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5dwave_12optimization_5model_StateView), __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2)) __PYX_ERR(0, 1799, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_copy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_copy, __pyx_t_7) < 0) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1757
 *         return self.array_ptr.size()
 * 
 *     def state(self, Py_ssize_t index = 0, *, bool copy = True):             # <<<<<<<<<<<<<<
 *         """Return the state of the node.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1801
 *         return np.array(StateView(self, index), copy=copy)
 * 
 *     def _state_from_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         fname = directory + "array.npy"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_41_state_from_zipfile(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_41_state_from_zipfile = {"_state_from_zipfile", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_41_state_from_zipfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_41_state_from_zipfile(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_zf = 0;
  PyObject *__pyx_v_directory = 0;
  Py_ssize_t __pyx_v_state_index;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_state_from_zipfile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zf,&__pyx_n_s_directory,&__pyx_n_s_state_index,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1801, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_directory)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1801, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_state_from_zipfile", 1, 3, 3, 1); __PYX_ERR(0, 1801, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_state_index)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1801, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_state_from_zipfile", 1, 3, 3, 2); __PYX_ERR(0, 1801, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_state_from_zipfile") < 0)) __PYX_ERR(0, 1801, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_zf = values[0];
    __pyx_v_directory = values[1];
    __pyx_v_state_index = __Pyx_PyIndex_AsSsize_t(values[2]); if (unlikely((__pyx_v_state_index == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1801, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_state_from_zipfile", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1801, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol._state_from_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_40_state_from_zipfile(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), __pyx_v_zf, __pyx_v_directory, __pyx_v_state_index);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_40_state_from_zipfile(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, PyObject *__pyx_v_zf, PyObject *__pyx_v_directory, Py_ssize_t __pyx_v_state_index) {
  PyObject *__pyx_v_fname = NULL;
  PyObject *__pyx_v_zipinfo = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_state_from_zipfile", 1);

  /* "dwave/optimization/model.pyx":1802
 * 
 *     def _state_from_zipfile(self, zf, directory, Py_ssize_t state_index):
 *         fname = directory + "array.npy"             # <<<<<<<<<<<<<<
 * 
 *         # check if there is any state data saved (it can be sparse)
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_directory, __pyx_kp_u_array_npy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fname = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1807
 *         # todo: test for performance, there may be better ways to check
 *         # for a file's existence
 *         try:             # <<<<<<<<<<<<<<
 *             zipinfo = zf.getinfo(fname)
 *         except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "dwave/optimization/model.pyx":1808
 *         # for a file's existence
 *         try:
 *             zipinfo = zf.getinfo(fname)             # <<<<<<<<<<<<<<
 *         except KeyError:
 *             # no state data encoded
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_getinfo); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1808, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_fname};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1808, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_v_zipinfo = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "dwave/optimization/model.pyx":1807
 *         # todo: test for performance, there may be better ways to check
 *         # for a file's existence
 *         try:             # <<<<<<<<<<<<<<
 *             zipinfo = zf.getinfo(fname)
 *         except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "dwave/optimization/model.pyx":1809
 *         try:
 *             zipinfo = zf.getinfo(fname)
 *         except KeyError:             # <<<<<<<<<<<<<<
 *             # no state data encoded
 *             return
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol._state_from_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 1809, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "dwave/optimization/model.pyx":1811
 *         except KeyError:
 *             # no state data encoded
 *             return             # <<<<<<<<<<<<<<
 * 
 *         with zf.open(zipinfo, mode="r") as f:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;

    /* "dwave/optimization/model.pyx":1807
 *         # todo: test for performance, there may be better ways to check
 *         # for a file's existence
 *         try:             # <<<<<<<<<<<<<<
 *             zipinfo = zf.getinfo(fname)
 *         except KeyError:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "dwave/optimization/model.pyx":1813
 *             return
 * 
 *         with zf.open(zipinfo, mode="r") as f:             # <<<<<<<<<<<<<<
 *             # todo: consider memmap here if possible
 *             state = np.load(f, allow_pickle=False)
 */
  /*with:*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_open); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_zipinfo);
    __Pyx_GIVEREF(__pyx_v_zipinfo);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_zipinfo)) __PYX_ERR(0, 1813, __pyx_L1_error);
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mode, __pyx_n_u_r) < 0) __PYX_ERR(0, 1813, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_8, __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_8, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1813, __pyx_L11_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1813, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_2);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __pyx_v_f = __pyx_t_5;
          __pyx_t_5 = 0;

          /* "dwave/optimization/model.pyx":1815
 *         with zf.open(zipinfo, mode="r") as f:
 *             # todo: consider memmap here if possible
 *             state = np.load(f, allow_pickle=False)             # <<<<<<<<<<<<<<
 * 
 *         # only decisions actually have this method. In the future we should
 */
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1815, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_load); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1815, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1815, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_v_f);
          __Pyx_GIVEREF(__pyx_v_f);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_f)) __PYX_ERR(0, 1815, __pyx_L15_error);
          __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1815, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allow_pickle, Py_False) < 0) __PYX_ERR(0, 1815, __pyx_L15_error)
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1815, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_v_state = __pyx_t_6;
          __pyx_t_6 = 0;

          /* "dwave/optimization/model.pyx":1813
 *             return
 * 
 *         with zf.open(zipinfo, mode="r") as f:             # <<<<<<<<<<<<<<
 *             # todo: consider memmap here if possible
 *             state = np.load(f, allow_pickle=False)
 */
        }
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L20_try_end;
        __pyx_L15_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol._state_from_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_1, &__pyx_t_5) < 0) __PYX_ERR(0, 1813, __pyx_L17_except_error)
          __Pyx_XGOTREF(__pyx_t_6);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_5);
          __pyx_t_8 = PyTuple_Pack(3, __pyx_t_6, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1813, __pyx_L17_except_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1813, __pyx_L17_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_11 < 0) __PYX_ERR(0, 1813, __pyx_L17_except_error)
          __pyx_t_12 = (!__pyx_t_11);
          if (unlikely(__pyx_t_12)) {
            __Pyx_GIVEREF(__pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_5);
            __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_1, __pyx_t_5);
            __pyx_t_6 = 0; __pyx_t_1 = 0; __pyx_t_5 = 0; 
            __PYX_ERR(0, 1813, __pyx_L17_except_error)
          }
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L16_exception_handled;
        }
        __pyx_L17_except_error:;
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_XGIVEREF(__pyx_t_2);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L16_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_XGIVEREF(__pyx_t_2);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_9);
        __pyx_L20_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_4) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__4, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1813, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L14;
      }
      __pyx_L14:;
    }
    goto __pyx_L24;
    __pyx_L11_error:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L1_error;
    __pyx_L24:;
  }

  /* "dwave/optimization/model.pyx":1819
 *         # only decisions actually have this method. In the future we should
 *         # do better error checking etc to handle it
 *         self.set_state(state_index, state)             # <<<<<<<<<<<<<<
 * 
 *     def _state_into_zipfile(self, zf, directory, Py_ssize_t state_index):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_state); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_state_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely(!__pyx_v_state)) { __Pyx_RaiseUnboundLocalError("state"); __PYX_ERR(0, 1819, __pyx_L1_error) }
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_6, __pyx_v_state};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "dwave/optimization/model.pyx":1801
 *         return np.array(StateView(self, index), copy=copy)
 * 
 *     def _state_from_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         fname = directory + "array.npy"
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol._state_from_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fname);
  __Pyx_XDECREF(__pyx_v_zipinfo);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1821
 *         self.set_state(state_index, state)
 * 
 *     def _state_into_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         # do this first to get any potential error messages out of the way
 *         # todo: use a view not a copy
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_43_state_into_zipfile(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_43_state_into_zipfile = {"_state_into_zipfile", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_43_state_into_zipfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_43_state_into_zipfile(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_zf = 0;
  PyObject *__pyx_v_directory = 0;
  Py_ssize_t __pyx_v_state_index;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_state_into_zipfile (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zf,&__pyx_n_s_directory,&__pyx_n_s_state_index,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1821, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_directory)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1821, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_state_into_zipfile", 1, 3, 3, 1); __PYX_ERR(0, 1821, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_state_index)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1821, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_state_into_zipfile", 1, 3, 3, 2); __PYX_ERR(0, 1821, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_state_into_zipfile") < 0)) __PYX_ERR(0, 1821, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_zf = values[0];
    __pyx_v_directory = values[1];
    __pyx_v_state_index = __Pyx_PyIndex_AsSsize_t(values[2]); if (unlikely((__pyx_v_state_index == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1821, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_state_into_zipfile", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1821, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol._state_into_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_42_state_into_zipfile(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), __pyx_v_zf, __pyx_v_directory, __pyx_v_state_index);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_42_state_into_zipfile(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, PyObject *__pyx_v_zf, PyObject *__pyx_v_directory, Py_ssize_t __pyx_v_state_index) {
  PyObject *__pyx_v_array = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_state_into_zipfile", 1);

  /* "dwave/optimization/model.pyx":1824
 *         # do this first to get any potential error messages out of the way
 *         # todo: use a view not a copy
 *         array = self.state(state_index)             # <<<<<<<<<<<<<<
 * 
 *         # then save into the state directory
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_state_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1824, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_array = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1827
 * 
 *         # then save into the state directory
 *         with zf.open(directory + "array.npy", mode="w", force_zip64=True) as f:             # <<<<<<<<<<<<<<
 *             np.save(f, array, allow_pickle=False)
 * 
 */
  /*with:*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_zf, __pyx_n_s_open); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1827, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Add(__pyx_v_directory, __pyx_kp_u_array_npy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1827, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1827, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(0, 1827, __pyx_L1_error);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1827, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_mode, __pyx_n_u_w) < 0) __PYX_ERR(0, 1827, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_force_zip64, Py_True) < 0) __PYX_ERR(0, 1827, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1827, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1827, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1827, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1827, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __pyx_v_f = __pyx_t_3;
          __pyx_t_3 = 0;

          /* "dwave/optimization/model.pyx":1828
 *         # then save into the state directory
 *         with zf.open(directory + "array.npy", mode="w", force_zip64=True) as f:
 *             np.save(f, array, allow_pickle=False)             # <<<<<<<<<<<<<<
 * 
 *     def state_size(self):
 */
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1828, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_save); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1828, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1828, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_v_f);
          __Pyx_GIVEREF(__pyx_v_f);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_f)) __PYX_ERR(0, 1828, __pyx_L7_error);
          __Pyx_INCREF(__pyx_v_array);
          __Pyx_GIVEREF(__pyx_v_array);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_array)) __PYX_ERR(0, 1828, __pyx_L7_error);
          __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1828, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_allow_pickle, Py_False) < 0) __PYX_ERR(0, 1828, __pyx_L7_error)
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1828, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "dwave/optimization/model.pyx":1827
 * 
 *         # then save into the state directory
 *         with zf.open(directory + "array.npy", mode="w", force_zip64=True) as f:             # <<<<<<<<<<<<<<
 *             np.save(f, array, allow_pickle=False)
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol._state_into_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 1827, __pyx_L9_except_error)
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_4 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1827, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1827, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_11 < 0) __PYX_ERR(0, 1827, __pyx_L9_except_error)
          __pyx_t_12 = (!__pyx_t_11);
          if (unlikely(__pyx_t_12)) {
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_2, __pyx_t_3);
            __pyx_t_1 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0; 
            __PYX_ERR(0, 1827, __pyx_L9_except_error)
          }
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__4, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1827, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L16;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L16:;
  }

  /* "dwave/optimization/model.pyx":1821
 *         self.set_state(state_index, state)
 * 
 *     def _state_into_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         # do this first to get any potential error messages out of the way
 *         # todo: use a view not a copy
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol._state_into_zipfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_array);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1830
 *             np.save(f, array, allow_pickle=False)
 * 
 *     def state_size(self):             # <<<<<<<<<<<<<<
 *         """Return an estimated byte-size of the state.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_45state_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_11ArraySymbol_44state_size, "Return an estimated byte-size of the state.\n        \n        Examples:\n            This example returns the size of an integer symbol.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> i = model.integer(2, lower_bound=0, upper_bound=20)\n            >>> i.state_size()\n            16\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_45state_size = {"state_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_45state_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_44state_size};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_45state_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("state_size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("state_size", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "state_size", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_44state_size(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_44state_size(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self) {
  dwave::optimization::SizeInfo __pyx_v_sizeinfo;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("state_size", 1);

  /* "dwave/optimization/model.pyx":1842
 *             16
 *         """
 *         if not self.array_ptr.dynamic():             # <<<<<<<<<<<<<<
 *             # For fixed-length arrays, the state size is simply the size of the
 *             # array times the size of each element in the array.
 */
  __pyx_t_1 = (!__pyx_v_self->array_ptr->dynamic());
  if (__pyx_t_1) {

    /* "dwave/optimization/model.pyx":1845
 *             # For fixed-length arrays, the state size is simply the size of the
 *             # array times the size of each element in the array.
 *             return self.array_ptr.size() * self.array_ptr.itemsize()             # <<<<<<<<<<<<<<
 * 
 *         sizeinfo = self.array_ptr.sizeinfo()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_v_self->array_ptr->size() * __pyx_v_self->array_ptr->itemsize())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dwave/optimization/model.pyx":1842
 *             16
 *         """
 *         if not self.array_ptr.dynamic():             # <<<<<<<<<<<<<<
 *             # For fixed-length arrays, the state size is simply the size of the
 *             # array times the size of each element in the array.
 */
  }

  /* "dwave/optimization/model.pyx":1847
 *             return self.array_ptr.size() * self.array_ptr.itemsize()
 * 
 *         sizeinfo = self.array_ptr.sizeinfo()             # <<<<<<<<<<<<<<
 * 
 *         # If it gets its size from elsewhere, do the calculation. We could be
 */
  __pyx_v_sizeinfo = __pyx_v_self->array_ptr->sizeinfo();

  /* "dwave/optimization/model.pyx":1851
 *         # If it gets its size from elsewhere, do the calculation. We could be
 *         # more efficient about this, but for now let's do the simple thing
 *         if sizeinfo.array_ptr != self.array_ptr:             # <<<<<<<<<<<<<<
 *             sizeinfo = sizeinfo.substitute(self.model.num_nodes())
 * 
 */
  __pyx_t_1 = (__pyx_v_sizeinfo.array_ptr != __pyx_v_self->array_ptr);
  if (__pyx_t_1) {

    /* "dwave/optimization/model.pyx":1852
 *         # more efficient about this, but for now let's do the simple thing
 *         if sizeinfo.array_ptr != self.array_ptr:
 *             sizeinfo = sizeinfo.substitute(self.model.num_nodes())             # <<<<<<<<<<<<<<
 * 
 *         # This shouldn't happen, but just in case...
 */
    __pyx_v_sizeinfo = __pyx_v_sizeinfo.substitute(((struct __pyx_vtabstruct_5dwave_12optimization_5model_Model *)__pyx_v_self->__pyx_base.model->__pyx_vtab)->num_nodes(__pyx_v_self->__pyx_base.model, 0));

    /* "dwave/optimization/model.pyx":1851
 *         # If it gets its size from elsewhere, do the calculation. We could be
 *         # more efficient about this, but for now let's do the simple thing
 *         if sizeinfo.array_ptr != self.array_ptr:             # <<<<<<<<<<<<<<
 *             sizeinfo = sizeinfo.substitute(self.model.num_nodes())
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1855
 * 
 *         # This shouldn't happen, but just in case...
 *         if not sizeinfo.max.has_value():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("size is unbounded")
 * 
 */
  __pyx_t_1 = (!(__pyx_v_sizeinfo.max.has_value() != 0));
  if (unlikely(__pyx_t_1)) {

    /* "dwave/optimization/model.pyx":1856
 *         # This shouldn't happen, but just in case...
 *         if not sizeinfo.max.has_value():
 *             raise RuntimeError("size is unbounded")             # <<<<<<<<<<<<<<
 * 
 *         return sizeinfo.max.value() * self.array_ptr.itemsize()
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1856, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1856, __pyx_L1_error)

    /* "dwave/optimization/model.pyx":1855
 * 
 *         # This shouldn't happen, but just in case...
 *         if not sizeinfo.max.has_value():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("size is unbounded")
 * 
 */
  }

  /* "dwave/optimization/model.pyx":1858
 *             raise RuntimeError("size is unbounded")
 * 
 *         return sizeinfo.max.value() * self.array_ptr.itemsize()             # <<<<<<<<<<<<<<
 * 
 *     def strides(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromSsize_t((__pyx_v_sizeinfo.max.value() * __pyx_v_self->array_ptr->itemsize())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1830
 *             np.save(f, array, allow_pickle=False)
 * 
 *     def state_size(self):             # <<<<<<<<<<<<<<
 *         """Return an estimated byte-size of the state.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.state_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1860
 *         return sizeinfo.max.value() * self.array_ptr.itemsize()
 * 
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         """Return the stride length, in bytes, for traversing a symbol.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_47strides(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_11ArraySymbol_46strides, "Return the stride length, in bytes, for traversing a symbol.\n        \n        Returns:\n            Tuple of the number of bytes to step in each dimension when \n            traversing a symbol.\n        \n        Examples:\n            This example returns the size of an integer symbol.\n            \n            >>> from dwave.optimization import Model\n            >>> model = Model()\n            >>> i = model.integer((2, 3), upper_bound=20)\n            >>> i.strides()\n            (24, 8)\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_47strides = {"strides", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_47strides, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_46strides};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_47strides(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("strides (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("strides", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "strides", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_46strides(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_7strides_2generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "dwave/optimization/model.pyx":1877
 *         """
 *         strides = self.array_ptr.strides()
 *         return tuple(strides[i] for i in range(strides.size()))             # <<<<<<<<<<<<<<
 * 
 *     def sum(self):
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_7strides_genexpr(PyObject *__pyx_self, std::span<Py_ssize_t const > ::size_type __pyx_genexpr_arg_0) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1877, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5dwave_12optimization_5model_11ArraySymbol_7strides_2generator14, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_strides_locals_genexpr, __pyx_n_s_dwave_optimization_model); if (unlikely(!gen)) __PYX_ERR(0, 1877, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.strides.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_7strides_2generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::span<Py_ssize_t const > ::size_type __pyx_t_1;
  std::span<Py_ssize_t const > ::size_type __pyx_t_2;
  std::span<Py_ssize_t const > ::size_type __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1877, __pyx_L1_error)
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_outer_scope->__pyx_v_strides[__pyx_cur_scope->__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1877, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1877, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1860
 *         return sizeinfo.max.value() * self.array_ptr.itemsize()
 * 
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         """Return the stride length, in bytes, for traversing a symbol.
 * 
 */

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_46strides(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides *__pyx_cur_scope;
  PyObject *__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_7strides_2generator14 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("strides", 0);
  __pyx_cur_scope = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_17_strides(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1860, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }

  /* "dwave/optimization/model.pyx":1876
 *             (24, 8)
 *         """
 *         strides = self.array_ptr.strides()             # <<<<<<<<<<<<<<
 *         return tuple(strides[i] for i in range(strides.size()))
 * 
 */
  __pyx_cur_scope->__pyx_v_strides = __pyx_v_self->array_ptr->strides();

  /* "dwave/optimization/model.pyx":1877
 *         """
 *         strides = self.array_ptr.strides()
 *         return tuple(strides[i] for i in range(strides.size()))             # <<<<<<<<<<<<<<
 * 
 *     def sum(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_7strides_genexpr(((PyObject*)__pyx_cur_scope), __pyx_cur_scope->__pyx_v_strides.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1860
 *         return sizeinfo.max.value() * self.array_ptr.itemsize()
 * 
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         """Return the stride length, in bytes, for traversing a symbol.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.strides", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_5dwave_12optimization_5model_11ArraySymbol_7strides_2generator14);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1879
 *         return tuple(strides[i] for i in range(strides.size()))
 * 
 *     def sum(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Sum` symbol.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_49sum(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5dwave_12optimization_5model_11ArraySymbol_48sum, "Create a :class:`~dwave.optimization.symbols.Sum` symbol.\n        \n        The new symbol returns the sum of its elements.\n        ");
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_49sum = {"sum", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_49sum, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_48sum};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_49sum(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sum (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("sum", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "sum", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_48sum(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_48sum(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self) {
  PyObject *__pyx_v_Sum = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sum", 1);

  /* "dwave/optimization/model.pyx":1884
 *         The new symbol returns the sum of its elements.
 *         """
 *         from dwave.optimization.symbols import Sum  # avoid circular import             # <<<<<<<<<<<<<<
 *         return Sum(self)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Sum);
  __Pyx_GIVEREF(__pyx_n_s_Sum);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Sum)) __PYX_ERR(0, 1884, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_dwave_optimization_symbols, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Sum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Sum = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1885
 *         """
 *         from dwave.optimization.symbols import Sum  # avoid circular import
 *         return Sum(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Sum);
  __pyx_t_1 = __pyx_v_Sum; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dwave/optimization/model.pyx":1879
 *         return tuple(strides[i] for i in range(strides.size()))
 * 
 *     def sum(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Sum` symbol.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Sum);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_51__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_51__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_51__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_51__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_50__reduce_cython__(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_array_ptr_self_expired_ptr, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_53__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_53__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_53__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_53__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_11ArraySymbol_52__setstate_cython__(((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_11ArraySymbol_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_array_ptr_self_expired_ptr, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dwave.optimization.model.ArraySymbol.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1889
 * 
 * cdef class StateView:
 *     def __init__(self, ArraySymbol symbol, Py_ssize_t index):             # <<<<<<<<<<<<<<
 *         self.symbol = symbol
 *         self.index = index
 */

/* Python wrapper */
static int __pyx_pw_5dwave_12optimization_5model_9StateView_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5dwave_12optimization_5model_9StateView_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_symbol = 0;
  Py_ssize_t __pyx_v_index;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_symbol,&__pyx_n_s_index,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_symbol)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1889, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_index)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1889, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 1889, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 1889, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_symbol = ((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)values[0]);
    __pyx_v_index = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_index == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1889, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1889, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.StateView.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_symbol), __pyx_ptype_5dwave_12optimization_5model_ArraySymbol, 1, "symbol", 0))) __PYX_ERR(0, 1889, __pyx_L1_error)
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_9StateView___init__(((struct __pyx_obj_5dwave_12optimization_5model_StateView *)__pyx_v_self), __pyx_v_symbol, __pyx_v_index);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5dwave_12optimization_5model_9StateView___init__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self, struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *__pyx_v_symbol, Py_ssize_t __pyx_v_index) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "dwave/optimization/model.pyx":1890
 * cdef class StateView:
 *     def __init__(self, ArraySymbol symbol, Py_ssize_t index):
 *         self.symbol = symbol             # <<<<<<<<<<<<<<
 *         self.index = index
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_symbol);
  __Pyx_GIVEREF((PyObject *)__pyx_v_symbol);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->symbol);
  __Pyx_DECREF((PyObject *)__pyx_v_self->symbol);
  __pyx_v_self->symbol = __pyx_v_symbol;

  /* "dwave/optimization/model.pyx":1891
 *     def __init__(self, ArraySymbol symbol, Py_ssize_t index):
 *         self.symbol = symbol
 *         self.index = index             # <<<<<<<<<<<<<<
 * 
 *         # we're assuming this object is being created because we want to access
 */
  __pyx_v_self->index = __pyx_v_index;

  /* "dwave/optimization/model.pyx":1896
 *         # the state, so let's go ahead and create the state if it's not already
 *         # there
 *         symbol.model.states.resolve()             # <<<<<<<<<<<<<<
 *         symbol.model._graph.recursive_initialize(symbol.model.states._states[index], symbol.node_ptr)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_symbol->__pyx_base.model->states->__pyx_vtab)->resolve(__pyx_v_symbol->__pyx_base.model->states, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1897
 *         # there
 *         symbol.model.states.resolve()
 *         symbol.model._graph.recursive_initialize(symbol.model.states._states[index], symbol.node_ptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getbuffer__(self, Py_buffer *buffer, int flags):
 */
  try {
    __pyx_v_symbol->__pyx_base.model->_graph.recursive_initialize((__pyx_v_symbol->__pyx_base.model->states->_states[__pyx_v_index]), __pyx_v_symbol->__pyx_base.node_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1897, __pyx_L1_error)
  }

  /* "dwave/optimization/model.pyx":1889
 * 
 * cdef class StateView:
 *     def __init__(self, ArraySymbol symbol, Py_ssize_t index):             # <<<<<<<<<<<<<<
 *         self.symbol = symbol
 *         self.index = index
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.StateView.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1899
 *         symbol.model._graph.recursive_initialize(symbol.model.states._states[index], symbol.node_ptr)
 * 
 *     def __getbuffer__(self, Py_buffer *buffer, int flags):             # <<<<<<<<<<<<<<
 *         # todo: inspect/respect/test flags
 *         self.symbol.model.states.resolve()
 */

/* Python wrapper */
CYTHON_UNUSED static int __pyx_pw_5dwave_12optimization_5model_9StateView_3__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_buffer, int __pyx_v_flags); /*proto*/
CYTHON_UNUSED static int __pyx_pw_5dwave_12optimization_5model_9StateView_3__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_buffer, int __pyx_v_flags) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_9StateView_2__getbuffer__(((struct __pyx_obj_5dwave_12optimization_5model_StateView *)__pyx_v_self), ((Py_buffer *)__pyx_v_buffer), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5dwave_12optimization_5model_9StateView_2__getbuffer__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self, Py_buffer *__pyx_v_buffer, CYTHON_UNUSED int __pyx_v_flags) {
  dwave::optimization::Array *__pyx_v_ptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  dwave::optimization::Array *__pyx_t_2;
  __Pyx_FakeReference<dwave::optimization::State> __pyx_t_3;
  __Pyx_FakeReference<dwave::optimization::State> __pyx_t_4;
  __Pyx_FakeReference<dwave::optimization::State> __pyx_t_5;
  struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (unlikely(__pyx_v_buffer == NULL)) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_buffer->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_buffer->obj);

  /* "dwave/optimization/model.pyx":1901
 *     def __getbuffer__(self, Py_buffer *buffer, int flags):
 *         # todo: inspect/respect/test flags
 *         self.symbol.model.states.resolve()             # <<<<<<<<<<<<<<
 * 
 *         cdef cppArray* ptr = self.symbol.array_ptr
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5dwave_12optimization_5model_States *)__pyx_v_self->symbol->__pyx_base.model->states->__pyx_vtab)->resolve(__pyx_v_self->symbol->__pyx_base.model->states, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1903
 *         self.symbol.model.states.resolve()
 * 
 *         cdef cppArray* ptr = self.symbol.array_ptr             # <<<<<<<<<<<<<<
 * 
 *         buffer.buf = <void*>(ptr.buff(self.symbol.model.states._states.at(self.index)))
 */
  __pyx_t_2 = __pyx_v_self->symbol->array_ptr;
  __pyx_v_ptr = __pyx_t_2;

  /* "dwave/optimization/model.pyx":1905
 *         cdef cppArray* ptr = self.symbol.array_ptr
 * 
 *         buffer.buf = <void*>(ptr.buff(self.symbol.model.states._states.at(self.index)))             # <<<<<<<<<<<<<<
 *         buffer.format = <char*>(ptr.format().c_str())
 *         buffer.internal = NULL
 */
  try {
    __pyx_t_3 = __pyx_v_self->symbol->__pyx_base.model->states->_states.at(__pyx_v_self->index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1905, __pyx_L1_error)
  }
  __pyx_v_buffer->buf = ((void *)__pyx_v_ptr->buff(__pyx_t_3));

  /* "dwave/optimization/model.pyx":1906
 * 
 *         buffer.buf = <void*>(ptr.buff(self.symbol.model.states._states.at(self.index)))
 *         buffer.format = <char*>(ptr.format().c_str())             # <<<<<<<<<<<<<<
 *         buffer.internal = NULL
 *         buffer.itemsize = ptr.itemsize()
 */
  __pyx_v_buffer->format = ((char *)__pyx_v_ptr->format().c_str());

  /* "dwave/optimization/model.pyx":1907
 *         buffer.buf = <void*>(ptr.buff(self.symbol.model.states._states.at(self.index)))
 *         buffer.format = <char*>(ptr.format().c_str())
 *         buffer.internal = NULL             # <<<<<<<<<<<<<<
 *         buffer.itemsize = ptr.itemsize()
 *         buffer.len = ptr.len(self.symbol.model.states._states.at(self.index))
 */
  __pyx_v_buffer->internal = NULL;

  /* "dwave/optimization/model.pyx":1908
 *         buffer.format = <char*>(ptr.format().c_str())
 *         buffer.internal = NULL
 *         buffer.itemsize = ptr.itemsize()             # <<<<<<<<<<<<<<
 *         buffer.len = ptr.len(self.symbol.model.states._states.at(self.index))
 *         buffer.ndim = ptr.ndim()
 */
  __pyx_v_buffer->itemsize = __pyx_v_ptr->itemsize();

  /* "dwave/optimization/model.pyx":1909
 *         buffer.internal = NULL
 *         buffer.itemsize = ptr.itemsize()
 *         buffer.len = ptr.len(self.symbol.model.states._states.at(self.index))             # <<<<<<<<<<<<<<
 *         buffer.ndim = ptr.ndim()
 *         buffer.obj = self
 */
  try {
    __pyx_t_4 = __pyx_v_self->symbol->__pyx_base.model->states->_states.at(__pyx_v_self->index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1909, __pyx_L1_error)
  }
  __pyx_v_buffer->len = __pyx_v_ptr->len(__pyx_t_4);

  /* "dwave/optimization/model.pyx":1910
 *         buffer.itemsize = ptr.itemsize()
 *         buffer.len = ptr.len(self.symbol.model.states._states.at(self.index))
 *         buffer.ndim = ptr.ndim()             # <<<<<<<<<<<<<<
 *         buffer.obj = self
 *         buffer.readonly = 1  # todo: consider loosening this requirement
 */
  __pyx_v_buffer->ndim = __pyx_v_ptr->ndim();

  /* "dwave/optimization/model.pyx":1911
 *         buffer.len = ptr.len(self.symbol.model.states._states.at(self.index))
 *         buffer.ndim = ptr.ndim()
 *         buffer.obj = self             # <<<<<<<<<<<<<<
 *         buffer.readonly = 1  # todo: consider loosening this requirement
 *         buffer.shape = <Py_ssize_t*>(ptr.shape(self.symbol.model.states._states.at(self.index)).data())
 */
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  __Pyx_GOTREF(__pyx_v_buffer->obj);
  __Pyx_DECREF(__pyx_v_buffer->obj);
  __pyx_v_buffer->obj = ((PyObject *)__pyx_v_self);

  /* "dwave/optimization/model.pyx":1912
 *         buffer.ndim = ptr.ndim()
 *         buffer.obj = self
 *         buffer.readonly = 1  # todo: consider loosening this requirement             # <<<<<<<<<<<<<<
 *         buffer.shape = <Py_ssize_t*>(ptr.shape(self.symbol.model.states._states.at(self.index)).data())
 *         buffer.strides = <Py_ssize_t*>(ptr.strides().data())
 */
  __pyx_v_buffer->readonly = 1;

  /* "dwave/optimization/model.pyx":1913
 *         buffer.obj = self
 *         buffer.readonly = 1  # todo: consider loosening this requirement
 *         buffer.shape = <Py_ssize_t*>(ptr.shape(self.symbol.model.states._states.at(self.index)).data())             # <<<<<<<<<<<<<<
 *         buffer.strides = <Py_ssize_t*>(ptr.strides().data())
 *         buffer.suboffsets = NULL
 */
  try {
    __pyx_t_5 = __pyx_v_self->symbol->__pyx_base.model->states->_states.at(__pyx_v_self->index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1913, __pyx_L1_error)
  }
  __pyx_v_buffer->shape = ((Py_ssize_t *)__pyx_v_ptr->shape(__pyx_t_5).data());

  /* "dwave/optimization/model.pyx":1914
 *         buffer.readonly = 1  # todo: consider loosening this requirement
 *         buffer.shape = <Py_ssize_t*>(ptr.shape(self.symbol.model.states._states.at(self.index)).data())
 *         buffer.strides = <Py_ssize_t*>(ptr.strides().data())             # <<<<<<<<<<<<<<
 *         buffer.suboffsets = NULL
 * 
 */
  __pyx_v_buffer->strides = ((Py_ssize_t *)__pyx_v_ptr->strides().data());

  /* "dwave/optimization/model.pyx":1915
 *         buffer.shape = <Py_ssize_t*>(ptr.shape(self.symbol.model.states._states.at(self.index)).data())
 *         buffer.strides = <Py_ssize_t*>(ptr.strides().data())
 *         buffer.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         self.symbol.model.states._view_count += 1
 */
  __pyx_v_buffer->suboffsets = NULL;

  /* "dwave/optimization/model.pyx":1917
 *         buffer.suboffsets = NULL
 * 
 *         self.symbol.model.states._view_count += 1             # <<<<<<<<<<<<<<
 * 
 *     def __releasebuffer__(self, Py_buffer *buffer):
 */
  __Pyx_INCREF((PyObject *)__pyx_v_self->symbol->__pyx_base.model->states);
  __pyx_t_6 = __pyx_v_self->symbol->__pyx_base.model->states;
  __pyx_t_6->_view_count = (__pyx_t_6->_view_count + 1);
  __Pyx_DECREF((PyObject *)__pyx_t_6); __pyx_t_6 = 0;

  /* "dwave/optimization/model.pyx":1899
 *         symbol.model._graph.recursive_initialize(symbol.model.states._states[index], symbol.node_ptr)
 * 
 *     def __getbuffer__(self, Py_buffer *buffer, int flags):             # <<<<<<<<<<<<<<
 *         # todo: inspect/respect/test flags
 *         self.symbol.model.states.resolve()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF((PyObject *)__pyx_t_6);
  __Pyx_AddTraceback("dwave.optimization.model.StateView.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_buffer->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_buffer->obj);
    __Pyx_DECREF(__pyx_v_buffer->obj); __pyx_v_buffer->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_buffer->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_buffer->obj);
    __Pyx_DECREF(__pyx_v_buffer->obj); __pyx_v_buffer->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pyx":1919
 *         self.symbol.model.states._view_count += 1
 * 
 *     def __releasebuffer__(self, Py_buffer *buffer):             # <<<<<<<<<<<<<<
 *         self.symbol.model.states._view_count -= 1
 */

/* Python wrapper */
CYTHON_UNUSED static void __pyx_pw_5dwave_12optimization_5model_9StateView_5__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_buffer); /*proto*/
CYTHON_UNUSED static void __pyx_pw_5dwave_12optimization_5model_9StateView_5__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_buffer) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5dwave_12optimization_5model_9StateView_4__releasebuffer__(((struct __pyx_obj_5dwave_12optimization_5model_StateView *)__pyx_v_self), ((Py_buffer *)__pyx_v_buffer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5dwave_12optimization_5model_9StateView_4__releasebuffer__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self, CYTHON_UNUSED Py_buffer *__pyx_v_buffer) {
  __Pyx_RefNannyDeclarations
  struct __pyx_obj_5dwave_12optimization_5model_States *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__releasebuffer__", 1);

  /* "dwave/optimization/model.pyx":1920
 * 
 *     def __releasebuffer__(self, Py_buffer *buffer):
 *         self.symbol.model.states._view_count -= 1             # <<<<<<<<<<<<<<
 */
  __Pyx_INCREF((PyObject *)__pyx_v_self->symbol->__pyx_base.model->states);
  __pyx_t_1 = __pyx_v_self->symbol->__pyx_base.model->states;
  __pyx_t_1->_view_count = (__pyx_t_1->_view_count - 1);
  __Pyx_DECREF((PyObject *)__pyx_t_1); __pyx_t_1 = 0;

  /* "dwave/optimization/model.pyx":1919
 *         self.symbol.model.states._view_count += 1
 * 
 *     def __releasebuffer__(self, Py_buffer *buffer):             # <<<<<<<<<<<<<<
 *         self.symbol.model.states._view_count -= 1
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "dwave/optimization/model.pxd":121
 * 
 * cdef class StateView:
 *     cdef readonly Py_ssize_t index  # which state we're accessing             # <<<<<<<<<<<<<<
 *     cdef readonly ArraySymbol symbol
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_9StateView_5index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_9StateView_5index_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_9StateView_5index___get__(((struct __pyx_obj_5dwave_12optimization_5model_StateView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_9StateView_5index___get__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.StateView.index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dwave/optimization/model.pxd":122
 * cdef class StateView:
 *     cdef readonly Py_ssize_t index  # which state we're accessing
 *     cdef readonly ArraySymbol symbol             # <<<<<<<<<<<<<<
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_9StateView_6symbol_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5dwave_12optimization_5model_9StateView_6symbol_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_9StateView_6symbol___get__(((struct __pyx_obj_5dwave_12optimization_5model_StateView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_9StateView_6symbol___get__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->symbol);
  __pyx_r = ((PyObject *)__pyx_v_self->symbol);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_9StateView_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_9StateView_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_9StateView_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_9StateView_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_9StateView_6__reduce_cython__(((struct __pyx_obj_5dwave_12optimization_5model_StateView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_9StateView_6__reduce_cython__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.index, self.symbol)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self->symbol);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->symbol);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->symbol))) __PYX_ERR(1, 5, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.index, self.symbol)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.index, self.symbol)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.symbol is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.index, self.symbol)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.symbol is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_StateView, (type(self), 0x60fdced, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->symbol) != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.symbol is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_StateView, (type(self), 0x60fdced, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self.symbol is not None
 *     if use_setstate:
 *         return __pyx_unpickle_StateView, (type(self), 0x60fdced, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_StateView, (type(self), 0x60fdced, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_StateView); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_101702893);
    __Pyx_GIVEREF(__pyx_int_101702893);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_101702893)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.symbol is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_StateView, (type(self), 0x60fdced, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_StateView, (type(self), 0x60fdced, None), state
 *     else:
 *         return __pyx_unpickle_StateView, (type(self), 0x60fdced, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_StateView__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_StateView); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_101702893);
    __Pyx_GIVEREF(__pyx_int_101702893);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_101702893)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dwave.optimization.model.StateView.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_StateView, (type(self), 0x60fdced, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_StateView__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_9StateView_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_9StateView_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_9StateView_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_9StateView_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.StateView.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_9StateView_8__setstate_cython__(((struct __pyx_obj_5dwave_12optimization_5model_StateView *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_9StateView_8__setstate_cython__(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_StateView, (type(self), 0x60fdced, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_StateView__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_5dwave_12optimization_5model___pyx_unpickle_StateView__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_StateView, (type(self), 0x60fdced, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_StateView__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dwave.optimization.model.StateView.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_StateView(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_5dwave_12optimization_5model_8__pyx_unpickle_StateView(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5dwave_12optimization_5model_8__pyx_unpickle_StateView = {"__pyx_unpickle_StateView", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_8__pyx_unpickle_StateView, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5dwave_12optimization_5model_8__pyx_unpickle_StateView(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_StateView (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StateView", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StateView", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_StateView") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StateView", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("dwave.optimization.model.__pyx_unpickle_StateView", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5dwave_12optimization_5model_7__pyx_unpickle_StateView(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5dwave_12optimization_5model_7__pyx_unpickle_StateView(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_StateView", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x60fdced, 0x3833493, 0x04b5c08):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x60fdced, 0x3833493, 0x04b5c08) = (index, symbol))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__50, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x60fdced, 0x3833493, 0x04b5c08):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x60fdced, 0x3833493, 0x04b5c08) = (index, symbol))" % __pyx_checksum
 *     __pyx_result = StateView.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x60fdced, 0x3833493, 0x04b5c08):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x60fdced, 0x3833493, 0x04b5c08) = (index, symbol))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = StateView.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x60fdced, 0x3833493, 0x04b5c08):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x60fdced, 0x3833493, 0x04b5c08) = (index, symbol))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x60fdced, 0x3833493, 0x04b5c08) = (index, symbol))" % __pyx_checksum
 *     __pyx_result = StateView.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StateView__set_state(<StateView> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5dwave_12optimization_5model_StateView), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x60fdced, 0x3833493, 0x04b5c08) = (index, symbol))" % __pyx_checksum
 *     __pyx_result = StateView.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_StateView__set_state(<StateView> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = StateView.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StateView__set_state(<StateView> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_StateView__set_state(StateView __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_5dwave_12optimization_5model___pyx_unpickle_StateView__set_state(((struct __pyx_obj_5dwave_12optimization_5model_StateView *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x60fdced, 0x3833493, 0x04b5c08) = (index, symbol))" % __pyx_checksum
 *     __pyx_result = StateView.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_StateView__set_state(<StateView> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StateView__set_state(<StateView> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_StateView__set_state(StateView __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.symbol = __pyx_state[1]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_StateView(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dwave.optimization.model.__pyx_unpickle_StateView", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_StateView__set_state(<StateView> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_StateView__set_state(StateView __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.symbol = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_5dwave_12optimization_5model___pyx_unpickle_StateView__set_state(struct __pyx_obj_5dwave_12optimization_5model_StateView *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_StateView__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_StateView__set_state(StateView __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.symbol = __pyx_state[1]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->index = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5dwave_12optimization_5model_ArraySymbol))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->symbol);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->symbol);
  __pyx_v___pyx_result->symbol = ((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_StateView__set_state(StateView __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.symbol = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_2 > 2);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.symbol = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_StateView__set_state(StateView __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.symbol = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_StateView__set_state(<StateView> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_StateView__set_state(StateView __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.symbol = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("dwave.optimization.model.__pyx_unpickle_StateView__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5dwave_12optimization_5model_Model __pyx_vtable_5dwave_12optimization_5model_Model;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model_Model(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5dwave_12optimization_5model_Model *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_5dwave_12optimization_5model_Model *)o);
  p->__pyx_vtab = __pyx_vtabptr_5dwave_12optimization_5model_Model;
  new((void*)&(p->_graph)) dwave::optimization::Graph();
  p->__dict__ = PyDict_New(); if (unlikely(!p->__dict__)) goto bad;p->objective = Py_None; Py_INCREF(Py_None);
  p->states = ((struct __pyx_obj_5dwave_12optimization_5model_States *)Py_None); Py_INCREF(Py_None);
  p->_data_sources = Py_None; Py_INCREF(Py_None);
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model_Model(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model_Model *p = (struct __pyx_obj_5dwave_12optimization_5model_Model *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model_Model) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  if (p->__weakref__) PyObject_ClearWeakRefs(o);
  if (p->__dict__) PyDict_Clear(p->__dict__);
  __Pyx_call_destructor(p->_graph);
  Py_CLEAR(p->__dict__);
  Py_CLEAR(p->objective);
  Py_CLEAR(p->states);
  Py_CLEAR(p->_data_sources);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_5dwave_12optimization_5model_Model(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model_Model *p = (struct __pyx_obj_5dwave_12optimization_5model_Model *)o;
  if (p->__dict__) {
    e = (*v)(p->__dict__, a); if (e) return e;
  }
  if (p->objective) {
    e = (*v)(p->objective, a); if (e) return e;
  }
  if (p->states) {
    e = (*v)(((PyObject *)p->states), a); if (e) return e;
  }
  if (p->_data_sources) {
    e = (*v)(p->_data_sources, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5dwave_12optimization_5model_Model(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5dwave_12optimization_5model_Model *p = (struct __pyx_obj_5dwave_12optimization_5model_Model *)o;
  tmp = ((PyObject*)p->__dict__);
  p->__dict__ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->objective);
  p->objective = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->states);
  p->states = ((struct __pyx_obj_5dwave_12optimization_5model_States *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_data_sources);
  p->_data_sources = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx___dict__getter_5dwave_12optimization_5model_Model(PyObject *o, CYTHON_UNUSED void *x) {
  struct __pyx_obj_5dwave_12optimization_5model_Model *p = (struct __pyx_obj_5dwave_12optimization_5model_Model *)o;
  if (unlikely(!p->__dict__)){
    p->__dict__ = PyDict_New();
  }
  Py_XINCREF(p->__dict__);
  return p->__dict__;
}

static PyObject *__pyx_getprop_5dwave_12optimization_5model_5Model_objective(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5dwave_12optimization_5model_5Model_9objective_1__get__(o);
}

static PyObject *__pyx_getprop_5dwave_12optimization_5model_5Model_states(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5dwave_12optimization_5model_5Model_6states_1__get__(o);
}

static PyObject *__pyx_getprop_5dwave_12optimization_5model_5Model__lock_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5dwave_12optimization_5model_5Model_11_lock_count_1__get__(o);
}

static PyMethodDef __pyx_methods_5dwave_12optimization_5model_Model[] = {
  {"add_constraint", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_3add_constraint, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_2add_constraint},
  {"binary", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_5binary, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_4binary},
  {"constant", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_7constant, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_6constant},
  {"decision_state_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_9decision_state_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_8decision_state_size},
  {"disjoint_bit_sets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_11disjoint_bit_sets, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_10disjoint_bit_sets},
  {"disjoint_lists", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_13disjoint_lists, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_12disjoint_lists},
  {"from_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_15from_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_14from_file},
  {"integer", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_17integer, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_16integer},
  {"_header_data", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_19_header_data, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_18_header_data},
  {"into_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_21into_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_20into_file},
  {"iter_constraints", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_25iter_constraints, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_24iter_constraints},
  {"iter_decisions", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_28iter_decisions, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_27iter_decisions},
  {"iter_symbols", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_31iter_symbols, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_30iter_symbols},
  {"list", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_34list, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_33list},
  {"lock", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_36lock, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_35lock},
  {"minimize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_38minimize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_37minimize},
  {"num_symbols", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_46num_symbols, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_45num_symbols},
  {"quadratic_model", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_48quadratic_model, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_47quadratic_model},
  {"set", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_50set, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_49set},
  {"state_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_52state_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_51state_size},
  {"to_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_54to_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_53to_file},
  {"to_networkx", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_56to_networkx, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_55to_networkx},
  {"unlock", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_58unlock, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_5Model_57unlock},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_60__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_5Model_62__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5dwave_12optimization_5model_Model[] = {
  {(char *)"__dict__", __pyx___dict__getter_5dwave_12optimization_5model_Model, 0, (char *)0, 0},
  {(char *)"objective", __pyx_getprop_5dwave_12optimization_5model_5Model_objective, 0, (char *)0, 0},
  {(char *)"states", __pyx_getprop_5dwave_12optimization_5model_5Model_states, 0, (char *)0, 0},
  {(char *)"_lock_count", __pyx_getprop_5dwave_12optimization_5model_5Model__lock_count, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static struct PyMemberDef __pyx_tp_members_Model[] = {
  {"__dictoffset__", T_PYSSIZET, offsetof(struct __pyx_obj_5dwave_12optimization_5model_Model, __dict__), READONLY, NULL},
  {NULL, 0, 0, 0, NULL}
};
static PyType_Slot __pyx_type_5dwave_12optimization_5model_Model_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model_Model},
  {Py_tp_doc, (void *)PyDoc_STR("Nonlinear model. \n    \n    The nonlinear model represents a general optimization problem with an \n    :term:`objective function` and/or constraints over variables of various \n    types.\n    \n    The :class:`.Model` class can contain this model and its methods provide \n    convenient utilities for working with representations of a problem.\n    \n    Examples:\n        This example creates a model for a \n        :class:`flow-shop-scheduling <dwave.optimization.generators.flow_shop_scheduling>`\n        problem with two jobs on three machines. \n    \n        >>> from dwave.optimization.generators import flow_shop_scheduling\n        ...\n        >>> processing_times = [[10, 5, 7], [20, 10, 15]]\n        >>> model = flow_shop_scheduling(processing_times=processing_times)\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model_Model},
  {Py_tp_clear, (void *)__pyx_tp_clear_5dwave_12optimization_5model_Model},
  {Py_tp_methods, (void *)__pyx_methods_5dwave_12optimization_5model_Model},
  {Py_tp_members, (void *)__pyx_tp_members_Model},
  {Py_tp_getset, (void *)__pyx_getsets_5dwave_12optimization_5model_Model},
  #if !CYTHON_USE_TYPE_SPECS
  {Py_tp_dictoffset, (void *)offsetof(struct __pyx_obj_5dwave_12optimization_5model_Model, __dict__)},
  #endif
  {Py_tp_init, (void *)__pyx_pw_5dwave_12optimization_5model_5Model_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model_Model},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model_Model_spec = {
  "dwave.optimization.model.Model",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model_Model),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_5dwave_12optimization_5model_Model_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model_Model = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""Model", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model_Model), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model_Model, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("Nonlinear model. \n    \n    The nonlinear model represents a general optimization problem with an \n    :term:`objective function` and/or constraints over variables of various \n    types.\n    \n    The :class:`.Model` class can contain this model and its methods provide \n    convenient utilities for working with representations of a problem.\n    \n    Examples:\n        This example creates a model for a \n        :class:`flow-shop-scheduling <dwave.optimization.generators.flow_shop_scheduling>`\n        problem with two jobs on three machines. \n    \n        >>> from dwave.optimization.generators import flow_shop_scheduling\n        ...\n        >>> processing_times = [[10, 5, 7], [20, 10, 15]]\n        >>> model = flow_shop_scheduling(processing_times=processing_times)\n    "), /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model_Model, /*tp_traverse*/
  __pyx_tp_clear_5dwave_12optimization_5model_Model, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5dwave_12optimization_5model_Model, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5dwave_12optimization_5model_Model, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  offsetof(struct __pyx_obj_5dwave_12optimization_5model_Model, __dict__), /*tp_dictoffset*/
  #endif
  __pyx_pw_5dwave_12optimization_5model_5Model_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model_Model, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_5dwave_12optimization_5model_States __pyx_vtable_5dwave_12optimization_5model_States;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model_States(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5dwave_12optimization_5model_States *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_5dwave_12optimization_5model_States *)o);
  p->__pyx_vtab = __pyx_vtabptr_5dwave_12optimization_5model_States;
  new((void*)&(p->_states)) std::vector<dwave::optimization::State> ();
  p->_model_ref = Py_None; Py_INCREF(Py_None);
  p->_future = Py_None; Py_INCREF(Py_None);
  p->_result_hook = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model_States(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model_States *p = (struct __pyx_obj_5dwave_12optimization_5model_States *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model_States) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_states);
  Py_CLEAR(p->_model_ref);
  Py_CLEAR(p->_future);
  Py_CLEAR(p->_result_hook);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_5dwave_12optimization_5model_States(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model_States *p = (struct __pyx_obj_5dwave_12optimization_5model_States *)o;
  if (p->_model_ref) {
    e = (*v)(p->_model_ref, a); if (e) return e;
  }
  if (p->_future) {
    e = (*v)(p->_future, a); if (e) return e;
  }
  if (p->_result_hook) {
    e = (*v)(p->_result_hook, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5dwave_12optimization_5model_States(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5dwave_12optimization_5model_States *p = (struct __pyx_obj_5dwave_12optimization_5model_States *)o;
  tmp = ((PyObject*)p->_model_ref);
  p->_model_ref = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_future);
  p->_future = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_result_hook);
  p->_result_hook = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5dwave_12optimization_5model_6States__model_ref(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5dwave_12optimization_5model_6States_10_model_ref_1__get__(o);
}

static PyObject *__pyx_getprop_5dwave_12optimization_5model_6States__future(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5dwave_12optimization_5model_6States_7_future_1__get__(o);
}

static PyObject *__pyx_getprop_5dwave_12optimization_5model_6States__result_hook(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5dwave_12optimization_5model_6States_12_result_hook_1__get__(o);
}

static PyMethodDef __pyx_methods_5dwave_12optimization_5model_States[] = {
  {"clear", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_5clear, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_4clear},
  {"from_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_7from_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_6from_file},
  {"from_future", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_9from_future, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_8from_future},
  {"initialize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_11initialize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_10initialize},
  {"into_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_13into_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_12into_file},
  {"resize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_15resize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_14resize},
  {"to_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_21to_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6States_20to_file},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_23__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6States_25__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5dwave_12optimization_5model_States[] = {
  {(char *)"_model_ref", __pyx_getprop_5dwave_12optimization_5model_6States__model_ref, 0, (char *)0, 0},
  {(char *)"_future", __pyx_getprop_5dwave_12optimization_5model_6States__future, 0, (char *)0, 0},
  {(char *)"_result_hook", __pyx_getprop_5dwave_12optimization_5model_6States__result_hook, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model_States_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model_States},
  {Py_sq_length, (void *)__pyx_pw_5dwave_12optimization_5model_6States_3__len__},
  {Py_mp_length, (void *)__pyx_pw_5dwave_12optimization_5model_6States_3__len__},
  {Py_tp_doc, (void *)PyDoc_STR("States of a symbol in a model.\n    \n    States represent assignments of values to a symbol's elements. For \n    example, an :meth:`~Model.integer` symbol of size :math:`1 \\times 5` \n    might have state ``[3, 8, 0, 12, 8]``, representing one assignment \n    of values to the symbol.\n    \n    Examples:\n        This example creates a :class:`~dwave.optimization.generators.knapsack` \n        model and manipulates its states to test that it behaves as expected. \n\n        First, create a model. \n    \n        >>> from dwave.optimization import Model\n        ...\n        >>> model = Model()\n        >>> # Add constants\n        >>> weights = model.constant([10, 20, 5, 15])\n        >>> values = model.constant([-5, -7, -2, -9])\n        >>> capacity = model.constant(30)\n        >>> # Add the decision variable\n        >>> items = model.set(4)\n        >>> # add the capacity constraint\n        >>> model.add_constraint(weights[items].sum() <= capacity)\n        >>> # Set the objective \n        >>> model.minimize(values[items].sum())\n\n        Lock the model to prevent changes to directed acyclic graph. At any \n        time, you can verify the locked state, which is demonstrated here. \n        \n        >>> with model.lock():\n        ...     model.is_locked()\n        True \n\n        Set a couple of states on the decision variable and verify that the \n        model generates the expected values for the objective. \n\n        >>> model.states.resize(2)\n        >>> items.set_state(0, [0, 1])\n        >>> items.set_state(1, [0, 2, 3])\n        >>> with model.lock():\n        ...     print(model.objective.state(0) > model.objective.state(1))\n        True\n\n        You can clear the states you set.\n\n        >>> model.states.clear()\n        >>> model.states.size()\n        0\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model_States},
  {Py_tp_clear, (void *)__pyx_tp_clear_5dwave_12optimization_5model_States},
  {Py_tp_methods, (void *)__pyx_methods_5dwave_12optimization_5model_States},
  {Py_tp_getset, (void *)__pyx_getsets_5dwave_12optimization_5model_States},
  {Py_tp_init, (void *)__pyx_pw_5dwave_12optimization_5model_6States_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model_States},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model_States_spec = {
  "dwave.optimization.model.States",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model_States),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_5dwave_12optimization_5model_States_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_States = {
  __pyx_pw_5dwave_12optimization_5model_6States_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_States = {
  __pyx_pw_5dwave_12optimization_5model_6States_3__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5dwave_12optimization_5model_States = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""States", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model_States), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model_States, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_States, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_States, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("States of a symbol in a model.\n    \n    States represent assignments of values to a symbol's elements. For \n    example, an :meth:`~Model.integer` symbol of size :math:`1 \\times 5` \n    might have state ``[3, 8, 0, 12, 8]``, representing one assignment \n    of values to the symbol.\n    \n    Examples:\n        This example creates a :class:`~dwave.optimization.generators.knapsack` \n        model and manipulates its states to test that it behaves as expected. \n\n        First, create a model. \n    \n        >>> from dwave.optimization import Model\n        ...\n        >>> model = Model()\n        >>> # Add constants\n        >>> weights = model.constant([10, 20, 5, 15])\n        >>> values = model.constant([-5, -7, -2, -9])\n        >>> capacity = model.constant(30)\n        >>> # Add the decision variable\n        >>> items = model.set(4)\n        >>> # add the capacity constraint\n        >>> model.add_constraint(weights[items].sum() <= capacity)\n        >>> # Set the objective \n        >>> model.minimize(values[items].sum())\n\n        Lock the model to prevent changes to directed acyclic graph. At any \n        time, you can verify the locked state, which is demonstrated here. \n        \n        >>> with model.lock():\n        ...     model.is_locked()\n        True \n\n        Set a couple of states on the decision variable and verify that the \n        model generates the expected values for the objective. \n\n        >>> model.states.resize(2)\n        >>> items.set_state(0, [0, 1])\n        >>> items.set_state(1, [0, 2, 3])\n        >>> with model.lock():\n        ...     print(model.objective.state(0) > model.objective.state(1))\n        True\n\n        You can clear the states you set.\n\n        >>> model.states.clear()\n        >>> model.states.size()\n        0\n    "), /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model_States, /*tp_traverse*/
  __pyx_tp_clear_5dwave_12optimization_5model_States, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5dwave_12optimization_5model_States, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5dwave_12optimization_5model_States, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5dwave_12optimization_5model_6States_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model_States, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_5dwave_12optimization_5model_Symbol __pyx_vtable_5dwave_12optimization_5model_Symbol;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model_Symbol(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5dwave_12optimization_5model_Symbol *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_5dwave_12optimization_5model_Symbol *)o);
  p->__pyx_vtab = __pyx_vtabptr_5dwave_12optimization_5model_Symbol;
  new((void*)&(p->expired_ptr)) std::shared_ptr<bool> ();
  p->model = ((struct __pyx_obj_5dwave_12optimization_5model_Model *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model_Symbol(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model_Symbol *p = (struct __pyx_obj_5dwave_12optimization_5model_Symbol *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model_Symbol) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->expired_ptr);
  Py_CLEAR(p->model);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_5dwave_12optimization_5model_Symbol(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model_Symbol *p = (struct __pyx_obj_5dwave_12optimization_5model_Symbol *)o;
  if (p->model) {
    e = (*v)(((PyObject *)p->model), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5dwave_12optimization_5model_Symbol(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5dwave_12optimization_5model_Symbol *p = (struct __pyx_obj_5dwave_12optimization_5model_Symbol *)o;
  tmp = ((PyObject*)p->model);
  p->model = ((struct __pyx_obj_5dwave_12optimization_5model_Model *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5dwave_12optimization_5model_6Symbol_model(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5dwave_12optimization_5model_6Symbol_5model_1__get__(o);
}

static PyMethodDef __pyx_methods_5dwave_12optimization_5model_Symbol[] = {
  {"equals", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_3equals, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_2equals},
  {"_from_zipfile", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_7_from_zipfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_6_from_zipfile},
  {"has_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_9has_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_8has_state},
  {"_into_zipfile", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_11_into_zipfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_10_into_zipfile},
  {"iter_predecessors", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_13iter_predecessors, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_12iter_predecessors},
  {"iter_successors", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_16iter_successors, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_15iter_successors},
  {"maybe_equals", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_19maybe_equals, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_18maybe_equals},
  {"reset_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_21reset_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_20reset_state},
  {"shares_memory", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_23shares_memory, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_22shares_memory},
  {"_state_from_zipfile", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_25_state_from_zipfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_state_into_zipfile", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_27_state_into_zipfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"state_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_29state_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_28state_size},
  {"topological_index", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_31topological_index, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_6Symbol_30topological_index},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_33__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_6Symbol_35__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5dwave_12optimization_5model_Symbol[] = {
  {(char *)"model", __pyx_getprop_5dwave_12optimization_5model_6Symbol_model, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model_Symbol_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model_Symbol},
  {Py_tp_doc, (void *)PyDoc_STR("Base class for symbols.\n\n    Each symbol corresponds to a node in the directed acyclic graph representing\n    the problem.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model_Symbol},
  {Py_tp_clear, (void *)__pyx_tp_clear_5dwave_12optimization_5model_Symbol},
  {Py_tp_methods, (void *)__pyx_methods_5dwave_12optimization_5model_Symbol},
  {Py_tp_getset, (void *)__pyx_getsets_5dwave_12optimization_5model_Symbol},
  {Py_tp_init, (void *)__pyx_pw_5dwave_12optimization_5model_6Symbol_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model_Symbol},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model_Symbol_spec = {
  "dwave.optimization.model.Symbol",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model_Symbol),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_5dwave_12optimization_5model_Symbol_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model_Symbol = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""Symbol", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model_Symbol), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model_Symbol, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("Base class for symbols.\n\n    Each symbol corresponds to a node in the directed acyclic graph representing\n    the problem.\n    "), /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model_Symbol, /*tp_traverse*/
  __pyx_tp_clear_5dwave_12optimization_5model_Symbol, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5dwave_12optimization_5model_Symbol, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5dwave_12optimization_5model_Symbol, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5dwave_12optimization_5model_6Symbol_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model_Symbol, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_5dwave_12optimization_5model_ArraySymbol __pyx_vtable_5dwave_12optimization_5model_ArraySymbol;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model_ArraySymbol(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *p;
  PyObject *o = __pyx_tp_new_5dwave_12optimization_5model_Symbol(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5dwave_12optimization_5model_Symbol*)__pyx_vtabptr_5dwave_12optimization_5model_ArraySymbol;
  return o;
}
static PyObject *__pyx_sq_item_5dwave_12optimization_5model_ArraySymbol(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_tp_richcompare_5dwave_12optimization_5model_ArraySymbol(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_5dwave_12optimization_5model_11ArraySymbol_7__eq__(o1, o2);
    }
    case Py_LE: {
      return __pyx_pw_5dwave_12optimization_5model_11ArraySymbol_11__le__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_5dwave_12optimization_5model_11ArraySymbol_7__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret);
        Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static CYTHON_INLINE PyObject *__pyx_nb_add_5dwave_12optimization_5model_ArraySymbol_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_add : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_add);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_add_5dwave_12optimization_5model_ArraySymbol(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_add == &__pyx_nb_add_5dwave_12optimization_5model_ArraySymbol)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5dwave_12optimization_5model_ArraySymbol);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5dwave_12optimization_5model_11ArraySymbol_5__add__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_add == &__pyx_nb_add_5dwave_12optimization_5model_ArraySymbol)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5dwave_12optimization_5model_ArraySymbol);
    if (maybe_self_is_right) {
        return __pyx_nb_add_5dwave_12optimization_5model_ArraySymbol_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_subtract_5dwave_12optimization_5model_ArraySymbol_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_subtract : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_subtract);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_subtract_5dwave_12optimization_5model_ArraySymbol(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_subtract == &__pyx_nb_subtract_5dwave_12optimization_5model_ArraySymbol)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5dwave_12optimization_5model_ArraySymbol);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5dwave_12optimization_5model_11ArraySymbol_19__sub__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_subtract == &__pyx_nb_subtract_5dwave_12optimization_5model_ArraySymbol)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5dwave_12optimization_5model_ArraySymbol);
    if (maybe_self_is_right) {
        return __pyx_nb_subtract_5dwave_12optimization_5model_ArraySymbol_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_multiply_5dwave_12optimization_5model_ArraySymbol_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_multiply : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_multiply);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_multiply_5dwave_12optimization_5model_ArraySymbol(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_multiply == &__pyx_nb_multiply_5dwave_12optimization_5model_ArraySymbol)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5dwave_12optimization_5model_ArraySymbol);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5dwave_12optimization_5model_11ArraySymbol_13__mul__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_multiply == &__pyx_nb_multiply_5dwave_12optimization_5model_ArraySymbol)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5dwave_12optimization_5model_ArraySymbol);
    if (maybe_self_is_right) {
        return __pyx_nb_multiply_5dwave_12optimization_5model_ArraySymbol_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_power_5dwave_12optimization_5model_ArraySymbol_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right , PyObject* extra_arg) {
    ternaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_power : NULL;
#else
    slot = (ternaryfunc) PyType_GetSlot(type, Py_nb_power);
#endif
    return slot ? slot(left, right , extra_arg) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_power_5dwave_12optimization_5model_ArraySymbol(PyObject *left, PyObject *right , PyObject* extra_arg) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_power == &__pyx_nb_power_5dwave_12optimization_5model_ArraySymbol)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5dwave_12optimization_5model_ArraySymbol);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5dwave_12optimization_5model_11ArraySymbol_17__pow__(left, right, extra_arg);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_power == &__pyx_nb_power_5dwave_12optimization_5model_ArraySymbol)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5dwave_12optimization_5model_ArraySymbol);
    if (maybe_self_is_right) {
        return __pyx_nb_power_5dwave_12optimization_5model_ArraySymbol_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, tp_base, PyTypeObject*), left, right , extra_arg);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static PyMethodDef __pyx_methods_5dwave_12optimization_5model_ArraySymbol[] = {
  {"all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_21all, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_20all},
  {"max", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_23max, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_22max},
  {"maybe_equals", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_25maybe_equals, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_24maybe_equals},
  {"min", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_27min, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_26min},
  {"ndim", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_29ndim, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_28ndim},
  {"prod", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_31prod, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_30prod},
  {"reshape", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_33reshape, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_32reshape},
  {"shape", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_35shape, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_34shape},
  {"size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_37size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_36size},
  {"state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_39state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_38state},
  {"_state_from_zipfile", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_41_state_from_zipfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_state_into_zipfile", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_43_state_into_zipfile, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"state_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_45state_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_44state_size},
  {"strides", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_47strides, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_46strides},
  {"sum", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_49sum, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5dwave_12optimization_5model_11ArraySymbol_48sum},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_51__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_53__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model_ArraySymbol_slots[] = {
  {Py_nb_add, (void *)__pyx_nb_add_5dwave_12optimization_5model_ArraySymbol},
  {Py_nb_subtract, (void *)__pyx_nb_subtract_5dwave_12optimization_5model_ArraySymbol},
  {Py_nb_multiply, (void *)__pyx_nb_multiply_5dwave_12optimization_5model_ArraySymbol},
  {Py_nb_power, (void *)__pyx_nb_power_5dwave_12optimization_5model_ArraySymbol},
  {Py_nb_negative, (void *)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_15__neg__},
  {Py_nb_absolute, (void *)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_3__abs__},
  {Py_sq_item, (void *)__pyx_sq_item_5dwave_12optimization_5model_ArraySymbol},
  {Py_mp_subscript, (void *)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_9__getitem__},
  {Py_tp_doc, (void *)PyDoc_STR("Base class for symbols that can be interpreted as an array.")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model_Symbol},
  {Py_tp_clear, (void *)__pyx_tp_clear_5dwave_12optimization_5model_Symbol},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_5dwave_12optimization_5model_ArraySymbol},
  {Py_tp_methods, (void *)__pyx_methods_5dwave_12optimization_5model_ArraySymbol},
  {Py_tp_init, (void *)__pyx_pw_5dwave_12optimization_5model_11ArraySymbol_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model_ArraySymbol},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model_ArraySymbol_spec = {
  "dwave.optimization.model.ArraySymbol",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_5dwave_12optimization_5model_ArraySymbol_slots,
};
#else

static PyNumberMethods __pyx_tp_as_number_ArraySymbol = {
  __pyx_nb_add_5dwave_12optimization_5model_ArraySymbol, /*nb_add*/
  __pyx_nb_subtract_5dwave_12optimization_5model_ArraySymbol, /*nb_subtract*/
  __pyx_nb_multiply_5dwave_12optimization_5model_ArraySymbol, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  __pyx_nb_power_5dwave_12optimization_5model_ArraySymbol, /*nb_power*/
  __pyx_pw_5dwave_12optimization_5model_11ArraySymbol_15__neg__, /*nb_negative*/
  0, /*nb_positive*/
  __pyx_pw_5dwave_12optimization_5model_11ArraySymbol_3__abs__, /*nb_absolute*/
  0, /*nb_bool*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_ArraySymbol = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5dwave_12optimization_5model_ArraySymbol, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ArraySymbol = {
  0, /*mp_length*/
  __pyx_pw_5dwave_12optimization_5model_11ArraySymbol_9__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5dwave_12optimization_5model_ArraySymbol = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""ArraySymbol", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model_Symbol, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_ArraySymbol, /*tp_as_number*/
  &__pyx_tp_as_sequence_ArraySymbol, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ArraySymbol, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("Base class for symbols that can be interpreted as an array."), /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model_Symbol, /*tp_traverse*/
  __pyx_tp_clear_5dwave_12optimization_5model_Symbol, /*tp_clear*/
  __pyx_tp_richcompare_5dwave_12optimization_5model_ArraySymbol, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5dwave_12optimization_5model_ArraySymbol, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5dwave_12optimization_5model_11ArraySymbol_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model_ArraySymbol, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5dwave_12optimization_5model_StateView(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5dwave_12optimization_5model_StateView *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_5dwave_12optimization_5model_StateView *)o);
  p->symbol = ((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model_StateView(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model_StateView *p = (struct __pyx_obj_5dwave_12optimization_5model_StateView *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model_StateView) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->symbol);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_5dwave_12optimization_5model_StateView(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model_StateView *p = (struct __pyx_obj_5dwave_12optimization_5model_StateView *)o;
  if (p->symbol) {
    e = (*v)(((PyObject *)p->symbol), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5dwave_12optimization_5model_StateView(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5dwave_12optimization_5model_StateView *p = (struct __pyx_obj_5dwave_12optimization_5model_StateView *)o;
  tmp = ((PyObject*)p->symbol);
  p->symbol = ((struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5dwave_12optimization_5model_9StateView_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5dwave_12optimization_5model_9StateView_5index_1__get__(o);
}

static PyObject *__pyx_getprop_5dwave_12optimization_5model_9StateView_symbol(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5dwave_12optimization_5model_9StateView_6symbol_1__get__(o);
}

static PyMethodDef __pyx_methods_5dwave_12optimization_5model_StateView[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_9StateView_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5dwave_12optimization_5model_9StateView_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5dwave_12optimization_5model_StateView[] = {
  {(char *)"index", __pyx_getprop_5dwave_12optimization_5model_9StateView_index, 0, (char *)0, 0},
  {(char *)"symbol", __pyx_getprop_5dwave_12optimization_5model_9StateView_symbol, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
#if !CYTHON_COMPILING_IN_LIMITED_API

static PyBufferProcs __pyx_tp_as_buffer_StateView = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_pw_5dwave_12optimization_5model_9StateView_3__getbuffer__, /*bf_getbuffer*/
  __pyx_pw_5dwave_12optimization_5model_9StateView_5__releasebuffer__, /*bf_releasebuffer*/
};
#endif
static PyType_Slot __pyx_type_5dwave_12optimization_5model_StateView_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model_StateView},
  #if defined(Py_bf_getbuffer)
  {Py_bf_getbuffer, (void *)__pyx_pw_5dwave_12optimization_5model_9StateView_3__getbuffer__},
  #endif
  #if defined(Py_bf_releasebuffer)
  {Py_bf_releasebuffer, (void *)__pyx_pw_5dwave_12optimization_5model_9StateView_5__releasebuffer__},
  #endif
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model_StateView},
  {Py_tp_clear, (void *)__pyx_tp_clear_5dwave_12optimization_5model_StateView},
  {Py_tp_methods, (void *)__pyx_methods_5dwave_12optimization_5model_StateView},
  {Py_tp_getset, (void *)__pyx_getsets_5dwave_12optimization_5model_StateView},
  {Py_tp_init, (void *)__pyx_pw_5dwave_12optimization_5model_9StateView_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model_StateView},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model_StateView_spec = {
  "dwave.optimization.model.StateView",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model_StateView),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_5dwave_12optimization_5model_StateView_slots,
};
#else

static PyBufferProcs __pyx_tp_as_buffer_StateView = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_pw_5dwave_12optimization_5model_9StateView_3__getbuffer__, /*bf_getbuffer*/
  __pyx_pw_5dwave_12optimization_5model_9StateView_5__releasebuffer__, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type_5dwave_12optimization_5model_StateView = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""StateView", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model_StateView), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model_StateView, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_StateView, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model_StateView, /*tp_traverse*/
  __pyx_tp_clear_5dwave_12optimization_5model_StateView, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5dwave_12optimization_5model_StateView, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5dwave_12optimization_5model_StateView, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5dwave_12optimization_5model_9StateView_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model_StateView, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct__locked[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct__locked = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct__locked(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct__locked > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct__locked[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct__locked];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct__locked(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct__locked) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_model);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct__locked < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct__locked[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct__locked++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct__locked(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked *)o;
  if (p->__pyx_v_model) {
    e = (*v)(p->__pyx_v_model, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct__locked_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct__locked},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct__locked},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct__locked},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct__locked_spec = {
  "dwave.optimization.model.__pyx_scope_struct__locked",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct__locked_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct__locked = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct__locked", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct__locked), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct__locked, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct__locked, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct__locked, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_sym);
  Py_CLEAR(p->__pyx_t_0);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_sym) {
    e = (*v)(p->__pyx_v_sym, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr_spec = {
  "dwave.optimization.model.__pyx_scope_struct_1_genexpr",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_DisjointBitSet);
  Py_CLEAR(p->__pyx_v_main);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets *)o;
  if (p->__pyx_v_DisjointBitSet) {
    e = (*v)(p->__pyx_v_DisjointBitSet, a); if (e) return e;
  }
  if (p->__pyx_v_main) {
    e = (*v)(p->__pyx_v_main, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets *)o;
  tmp = ((PyObject*)p->__pyx_v_DisjointBitSet);
  p->__pyx_v_DisjointBitSet = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_main);
  p->__pyx_v_main = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets},
  {Py_tp_clear, (void *)__pyx_tp_clear_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets_spec = {
  "dwave.optimization.model.__pyx_scope_struct_2_disjoint_bit_sets",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_2_disjoint_bit_sets", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets, /*tp_traverse*/
  __pyx_tp_clear_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr_spec = {
  "dwave.optimization.model.__pyx_scope_struct_3_genexpr",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints_spec = {
  "dwave.optimization.model.__pyx_scope_struct_4_iter_constraints",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_4_iter_constraints", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_symbol);
  Py_CLEAR(p->__pyx_t_0);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_symbol) {
    e = (*v)(((PyObject *)p->__pyx_v_symbol), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions_spec = {
  "dwave.optimization.model.__pyx_scope_struct_5_iter_decisions",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_5_iter_decisions", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols_spec = {
  "dwave.optimization.model.__pyx_scope_struct_6_iter_symbols",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_6_iter_symbols", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_sym);
  Py_CLEAR(p->__pyx_t_0);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr *)o;
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_sym) {
    e = (*v)(p->__pyx_v_sym, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr_spec = {
  "dwave.optimization.model.__pyx_scope_struct_7_genexpr",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_7_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_p);
  Py_CLEAR(p->__pyx_v_q);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr *)o;
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_p) {
    e = (*v)(p->__pyx_v_p, a); if (e) return e;
  }
  if (p->__pyx_v_q) {
    e = (*v)(p->__pyx_v_q, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr_spec = {
  "dwave.optimization.model.__pyx_scope_struct_8_genexpr",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_8_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  p = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors *)o);
  new((void*)&(p->__pyx_v_end)) std::vector<dwave::optimization::Node *> ::const_iterator();
  new((void*)&(p->__pyx_v_it)) std::vector<dwave::optimization::Node *> ::const_iterator();
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_end);
  __Pyx_call_destructor(p->__pyx_v_it);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors_spec = {
  "dwave.optimization.model.__pyx_scope_struct_9_iter_predecessors",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_9_iter_predecessors", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  p = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors *)o);
  new((void*)&(p->__pyx_v_end)) std::vector<dwave::optimization::Node::SuccessorView> ::const_iterator();
  new((void*)&(p->__pyx_v_it)) std::vector<dwave::optimization::Node::SuccessorView> ::const_iterator();
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_end);
  __Pyx_call_destructor(p->__pyx_v_it);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors_spec = {
  "dwave.optimization.model.__pyx_scope_struct_10_iter_successors",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_10_iter_successors", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_register);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *)o;
  if (p->__pyx_v_register) {
    e = (*v)(p->__pyx_v_register, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses *)o;
  tmp = ((PyObject*)p->__pyx_v_register);
  p->__pyx_v_register = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses},
  {Py_tp_clear, (void *)__pyx_tp_clear_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses_spec = {
  "dwave.optimization.model.__pyx_scope_struct_11__register_node_subclasses",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_11__register_node_subclasses", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses, /*tp_traverse*/
  __pyx_tp_clear_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_idx);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr *)o;
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_idx) {
    e = (*v)(p->__pyx_v_idx, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr_spec = {
  "dwave.optimization.model.__pyx_scope_struct_12_genexpr",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_12_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_idx);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr *)o;
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_idx) {
    e = (*v)(p->__pyx_v_idx, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr_spec = {
  "dwave.optimization.model.__pyx_scope_struct_13_genexpr",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_13_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_idx);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr *)o;
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_idx) {
    e = (*v)(p->__pyx_v_idx, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr_spec = {
  "dwave.optimization.model.__pyx_scope_struct_14_genexpr",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_14_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_15_shape[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_15_shape = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_15_shape(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_15_shape > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_15_shape[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_15_shape];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape));
    (void) PyObject_INIT(o, t);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  p = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape *)o);
  new((void*)&(p->__pyx_v_shape)) std::span<Py_ssize_t const > ();
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_15_shape(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_15_shape) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->__pyx_v_shape);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_15_shape < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_15_shape[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_15_shape++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_15_shape_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_15_shape},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_15_shape},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_15_shape_spec = {
  "dwave.optimization.model.__pyx_scope_struct_15_shape",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_15_shape_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_15_shape = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_15_shape", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_15_shape), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_15_shape, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_15_shape, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr_spec = {
  "dwave.optimization.model.__pyx_scope_struct_16_genexpr",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_16_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_17_strides[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_17_strides = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_17_strides(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_17_strides > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_17_strides[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_17_strides];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides));
    (void) PyObject_INIT(o, t);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  p = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides *)o);
  new((void*)&(p->__pyx_v_strides)) std::span<Py_ssize_t const > ();
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_17_strides(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_17_strides) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->__pyx_v_strides);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_17_strides < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_17_strides[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_17_strides++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_17_strides_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_17_strides},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_17_strides},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_17_strides_spec = {
  "dwave.optimization.model.__pyx_scope_struct_17_strides",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_17_strides_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_17_strides = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_17_strides", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_17_strides), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_17_strides, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_17_strides, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr *__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr[8];
static int __pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr = 0;

static PyObject *__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr[--__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr(PyObject *o) {
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr)))) {
    __pyx_freelist_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr[__pyx_freecount_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr++] = ((struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr *p = (struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr_spec = {
  "dwave.optimization.model.__pyx_scope_struct_18_genexpr",
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "dwave.optimization.model.""__pyx_scope_struct_18_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_n_s_Absolute, __pyx_k_Absolute, sizeof(__pyx_k_Absolute), 0, 0, 1, 1},
    {&__pyx_n_s_Add, __pyx_k_Add, sizeof(__pyx_k_Add), 0, 0, 1, 1},
    {&__pyx_kp_u_Add_a_constraint_to_the_model_Ar, __pyx_k_Add_a_constraint_to_the_model_Ar, sizeof(__pyx_k_Add_a_constraint_to_the_model_Ar), 0, 1, 0, 0},
    {&__pyx_n_s_AdvancedIndexing, __pyx_k_AdvancedIndexing, sizeof(__pyx_k_AdvancedIndexing), 0, 0, 1, 1},
    {&__pyx_n_s_All, __pyx_k_All, sizeof(__pyx_k_All), 0, 0, 1, 1},
    {&__pyx_kp_u_An_estimate_of_the_size_in_bytes, __pyx_k_An_estimate_of_the_size_in_bytes, sizeof(__pyx_k_An_estimate_of_the_size_in_bytes), 0, 1, 0, 0},
    {&__pyx_kp_u_An_estimated_size_in_bytes_of_th, __pyx_k_An_estimated_size_in_bytes_of_th, sizeof(__pyx_k_An_estimated_size_in_bytes_of_th), 0, 1, 0, 0},
    {&__pyx_n_s_ArraySymbol, __pyx_k_ArraySymbol, sizeof(__pyx_k_ArraySymbol), 0, 0, 1, 1},
    {&__pyx_n_s_ArraySymbol___reduce_cython, __pyx_k_ArraySymbol___reduce_cython, sizeof(__pyx_k_ArraySymbol___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ArraySymbol___setstate_cython, __pyx_k_ArraySymbol___setstate_cython, sizeof(__pyx_k_ArraySymbol___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ArraySymbol__state_from_zipfile, __pyx_k_ArraySymbol__state_from_zipfile, sizeof(__pyx_k_ArraySymbol__state_from_zipfile), 0, 0, 1, 1},
    {&__pyx_n_s_ArraySymbol__state_into_zipfile, __pyx_k_ArraySymbol__state_into_zipfile, sizeof(__pyx_k_ArraySymbol__state_into_zipfile), 0, 0, 1, 1},
    {&__pyx_n_s_ArraySymbol_all, __pyx_k_ArraySymbol_all, sizeof(__pyx_k_ArraySymbol_all), 0, 0, 1, 1},
    {&__pyx_n_s_ArraySymbol_max, __pyx_k_ArraySymbol_max, sizeof(__pyx_k_ArraySymbol_max), 0, 0, 1, 1},
    {&__pyx_n_s_ArraySymbol_maybe_equals, __pyx_k_ArraySymbol_maybe_equals, sizeof(__pyx_k_ArraySymbol_maybe_equals), 0, 0, 1, 1},
    {&__pyx_kp_u_ArraySymbol_maybe_equals_line_16, __pyx_k_ArraySymbol_maybe_equals_line_16, sizeof(__pyx_k_ArraySymbol_maybe_equals_line_16), 0, 1, 0, 0},
    {&__pyx_n_s_ArraySymbol_min, __pyx_k_ArraySymbol_min, sizeof(__pyx_k_ArraySymbol_min), 0, 0, 1, 1},
    {&__pyx_n_s_ArraySymbol_ndim, __pyx_k_ArraySymbol_ndim, sizeof(__pyx_k_ArraySymbol_ndim), 0, 0, 1, 1},
    {&__pyx_n_s_ArraySymbol_prod, __pyx_k_ArraySymbol_prod, sizeof(__pyx_k_ArraySymbol_prod), 0, 0, 1, 1},
    {&__pyx_n_s_ArraySymbol_reshape, __pyx_k_ArraySymbol_reshape, sizeof(__pyx_k_ArraySymbol_reshape), 0, 0, 1, 1},
    {&__pyx_kp_u_ArraySymbol_reshape_line_1695, __pyx_k_ArraySymbol_reshape_line_1695, sizeof(__pyx_k_ArraySymbol_reshape_line_1695), 0, 1, 0, 0},
    {&__pyx_n_s_ArraySymbol_shape, __pyx_k_ArraySymbol_shape, sizeof(__pyx_k_ArraySymbol_shape), 0, 0, 1, 1},
    {&__pyx_kp_u_ArraySymbol_shape_line_1722, __pyx_k_ArraySymbol_shape_line_1722, sizeof(__pyx_k_ArraySymbol_shape_line_1722), 0, 1, 0, 0},
    {&__pyx_n_s_ArraySymbol_size, __pyx_k_ArraySymbol_size, sizeof(__pyx_k_ArraySymbol_size), 0, 0, 1, 1},
    {&__pyx_kp_u_ArraySymbol_size_line_1740, __pyx_k_ArraySymbol_size_line_1740, sizeof(__pyx_k_ArraySymbol_size_line_1740), 0, 1, 0, 0},
    {&__pyx_n_s_ArraySymbol_state, __pyx_k_ArraySymbol_state, sizeof(__pyx_k_ArraySymbol_state), 0, 0, 1, 1},
    {&__pyx_kp_u_ArraySymbol_state_line_1757, __pyx_k_ArraySymbol_state_line_1757, sizeof(__pyx_k_ArraySymbol_state_line_1757), 0, 1, 0, 0},
    {&__pyx_n_s_ArraySymbol_state_size, __pyx_k_ArraySymbol_state_size, sizeof(__pyx_k_ArraySymbol_state_size), 0, 0, 1, 1},
    {&__pyx_kp_u_ArraySymbol_state_size_line_1830, __pyx_k_ArraySymbol_state_size_line_1830, sizeof(__pyx_k_ArraySymbol_state_size_line_1830), 0, 1, 0, 0},
    {&__pyx_n_s_ArraySymbol_strides, __pyx_k_ArraySymbol_strides, sizeof(__pyx_k_ArraySymbol_strides), 0, 0, 1, 1},
    {&__pyx_kp_u_ArraySymbol_strides_line_1860, __pyx_k_ArraySymbol_strides_line_1860, sizeof(__pyx_k_ArraySymbol_strides_line_1860), 0, 1, 0, 0},
    {&__pyx_n_s_ArraySymbol_sum, __pyx_k_ArraySymbol_sum, sizeof(__pyx_k_ArraySymbol_sum), 0, 0, 1, 1},
    {&__pyx_kp_u_ArraySymbols_cannot_be_construct, __pyx_k_ArraySymbols_cannot_be_construct, sizeof(__pyx_k_ArraySymbols_cannot_be_construct), 0, 1, 0, 0},
    {&__pyx_n_s_BasicIndexing, __pyx_k_BasicIndexing, sizeof(__pyx_k_BasicIndexing), 0, 0, 1, 1},
    {&__pyx_n_s_BinaryVariable, __pyx_k_BinaryVariable, sizeof(__pyx_k_BinaryVariable), 0, 0, 1, 1},
    {&__pyx_kp_u_Cannot_initialize_states_of_an_u, __pyx_k_Cannot_initialize_states_of_an_u, sizeof(__pyx_k_Cannot_initialize_states_of_an_u), 0, 1, 0, 0},
    {&__pyx_kp_u_Clear_any_saved_states_Clears_an, __pyx_k_Clear_any_saved_states_Clears_an, sizeof(__pyx_k_Clear_any_saved_states_Clears_an), 0, 1, 0, 0},
    {&__pyx_kp_u_Compare_to_another_symbol_Args_o, __pyx_k_Compare_to_another_symbol_Args_o, sizeof(__pyx_k_Compare_to_another_symbol_Args_o), 0, 1, 0, 0},
    {&__pyx_n_s_Constant, __pyx_k_Constant, sizeof(__pyx_k_Constant), 0, 0, 1, 1},
    {&__pyx_kp_u_Convert_the_model_to_a_NetworkX, __pyx_k_Convert_the_model_to_a_NetworkX, sizeof(__pyx_k_Convert_the_model_to_a_NetworkX), 0, 1, 0, 0},
    {&__pyx_kp_u_Create_a_binary_symbol_as_a_deci, __pyx_k_Create_a_binary_symbol_as_a_deci, sizeof(__pyx_k_Create_a_binary_symbol_as_a_deci), 0, 1, 0, 0},
    {&__pyx_kp_u_Create_a_class_dwave_optimizatio, __pyx_k_Create_a_class_dwave_optimizatio, sizeof(__pyx_k_Create_a_class_dwave_optimizatio), 0, 1, 0, 0},
    {&__pyx_kp_u_Create_a_constant_symbol_Args_ar, __pyx_k_Create_a_constant_symbol_Args_ar, sizeof(__pyx_k_Create_a_constant_symbol_Args_ar), 0, 1, 0, 0},
    {&__pyx_kp_u_Create_a_disjoint_lists_symbol_a, __pyx_k_Create_a_disjoint_lists_symbol_a, sizeof(__pyx_k_Create_a_disjoint_lists_symbol_a), 0, 1, 0, 0},
    {&__pyx_kp_u_Create_a_disjoint_sets_symbol_as, __pyx_k_Create_a_disjoint_sets_symbol_as, sizeof(__pyx_k_Create_a_disjoint_sets_symbol_as), 0, 1, 0, 0},
    {&__pyx_kp_u_Create_a_list_symbol_as_a_decisi, __pyx_k_Create_a_list_symbol_as_a_decisi, sizeof(__pyx_k_Create_a_list_symbol_as_a_decisi), 0, 1, 0, 0},
    {&__pyx_kp_u_Create_a_quadratic_model_from_an, __pyx_k_Create_a_quadratic_model_from_an, sizeof(__pyx_k_Create_a_quadratic_model_from_an), 0, 1, 0, 0},
    {&__pyx_kp_u_Create_a_set_symbol_as_a_decisio, __pyx_k_Create_a_set_symbol_as_a_decisio, sizeof(__pyx_k_Create_a_set_symbol_as_a_decisio), 0, 1, 0, 0},
    {&__pyx_kp_u_Create_an_integer_symbol_as_a_de, __pyx_k_Create_an_integer_symbol_as_a_de, sizeof(__pyx_k_Create_an_integer_symbol_as_a_de), 0, 1, 0, 0},
    {&__pyx_n_s_DEFINITELY, __pyx_k_DEFINITELY, sizeof(__pyx_k_DEFINITELY), 0, 0, 1, 1},
    {&__pyx_n_b_DWNL, __pyx_k_DWNL, sizeof(__pyx_k_DWNL), 0, 0, 0, 1},
    {&__pyx_n_s_DiGraph, __pyx_k_DiGraph, sizeof(__pyx_k_DiGraph), 0, 0, 1, 1},
    {&__pyx_n_s_DisjointBitSet, __pyx_k_DisjointBitSet, sizeof(__pyx_k_DisjointBitSet), 0, 0, 1, 1},
    {&__pyx_n_s_DisjointBitSets, __pyx_k_DisjointBitSets, sizeof(__pyx_k_DisjointBitSets), 0, 0, 1, 1},
    {&__pyx_n_s_DisjointList, __pyx_k_DisjointList, sizeof(__pyx_k_DisjointList), 0, 0, 1, 1},
    {&__pyx_n_s_DisjointLists, __pyx_k_DisjointLists, sizeof(__pyx_k_DisjointLists), 0, 0, 1, 1},
    {&__pyx_n_s_Equal, __pyx_k_Equal, sizeof(__pyx_k_Equal), 0, 0, 1, 1},
    {&__pyx_n_s_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 0, 1, 1},
    {&__pyx_kp_u_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 1, 0, 0},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
    {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
    {&__pyx_n_s_IntegerVariable, __pyx_k_IntegerVariable, sizeof(__pyx_k_IntegerVariable), 0, 0, 1, 1},
    {&__pyx_n_s_Integral, __pyx_k_Integral, sizeof(__pyx_k_Integral), 0, 0, 1, 1},
    {&__pyx_kp_u_Iterate_over_a_node_s_predecesso, __pyx_k_Iterate_over_a_node_s_predecesso, sizeof(__pyx_k_Iterate_over_a_node_s_predecesso), 0, 1, 0, 0},
    {&__pyx_kp_u_Iterate_over_a_node_s_successors, __pyx_k_Iterate_over_a_node_s_successors, sizeof(__pyx_k_Iterate_over_a_node_s_successors), 0, 1, 0, 0},
    {&__pyx_kp_u_Iterate_over_all_constraints_in, __pyx_k_Iterate_over_all_constraints_in, sizeof(__pyx_k_Iterate_over_all_constraints_in), 0, 1, 0, 0},
    {&__pyx_kp_u_Iterate_over_all_decision_variab, __pyx_k_Iterate_over_all_decision_variab, sizeof(__pyx_k_Iterate_over_all_decision_variab), 0, 1, 0, 0},
    {&__pyx_kp_u_Iterate_over_all_symbols_in_the, __pyx_k_Iterate_over_all_symbols_in_the, sizeof(__pyx_k_Iterate_over_all_symbols_in_the), 0, 1, 0, 0},
    {&__pyx_n_s_JSONEncoder, __pyx_k_JSONEncoder, sizeof(__pyx_k_JSONEncoder), 0, 0, 1, 1},
    {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
    {&__pyx_n_s_LessEqual, __pyx_k_LessEqual, sizeof(__pyx_k_LessEqual), 0, 0, 1, 1},
    {&__pyx_n_s_ListVariable, __pyx_k_ListVariable, sizeof(__pyx_k_ListVariable), 0, 0, 1, 1},
    {&__pyx_kp_u_Lock_the_model_No_new_symbols_ca, __pyx_k_Lock_the_model_No_new_symbols_ca, sizeof(__pyx_k_Lock_the_model_No_new_symbols_ca), 0, 1, 0, 0},
    {&__pyx_n_s_MAYBE, __pyx_k_MAYBE, sizeof(__pyx_k_MAYBE), 0, 0, 1, 1},
    {&__pyx_n_s_Max, __pyx_k_Max, sizeof(__pyx_k_Max), 0, 0, 1, 1},
    {&__pyx_n_s_Min, __pyx_k_Min, sizeof(__pyx_k_Min), 0, 0, 1, 1},
    {&__pyx_n_s_Model, __pyx_k_Model, sizeof(__pyx_k_Model), 0, 0, 1, 1},
    {&__pyx_n_u_Model, __pyx_k_Model, sizeof(__pyx_k_Model), 0, 1, 0, 1},
    {&__pyx_n_s_Model___reduce_cython, __pyx_k_Model___reduce_cython, sizeof(__pyx_k_Model___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Model___setstate_cython, __pyx_k_Model___setstate_cython, sizeof(__pyx_k_Model___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Model__header_data, __pyx_k_Model__header_data, sizeof(__pyx_k_Model__header_data), 0, 0, 1, 1},
    {&__pyx_n_s_Model_add_constraint, __pyx_k_Model_add_constraint, sizeof(__pyx_k_Model_add_constraint), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_add_constraint_line_87, __pyx_k_Model_add_constraint_line_87, sizeof(__pyx_k_Model_add_constraint_line_87), 0, 1, 0, 0},
    {&__pyx_n_s_Model_binary, __pyx_k_Model_binary, sizeof(__pyx_k_Model_binary), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_binary_line_108, __pyx_k_Model_binary_line_108, sizeof(__pyx_k_Model_binary_line_108), 0, 1, 0, 0},
    {&__pyx_n_s_Model_constant, __pyx_k_Model_constant, sizeof(__pyx_k_Model_constant), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_constant_line_127, __pyx_k_Model_constant_line_127, sizeof(__pyx_k_Model_constant_line_127), 0, 1, 0, 0},
    {&__pyx_n_s_Model_decision_state_size, __pyx_k_Model_decision_state_size, sizeof(__pyx_k_Model_decision_state_size), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_decision_state_size_line_1, __pyx_k_Model_decision_state_size_line_1, sizeof(__pyx_k_Model_decision_state_size_line_1), 0, 1, 0, 0},
    {&__pyx_n_s_Model_disjoint_bit_sets, __pyx_k_Model_disjoint_bit_sets, sizeof(__pyx_k_Model_disjoint_bit_sets), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_disjoint_bit_sets_line_164, __pyx_k_Model_disjoint_bit_sets_line_164, sizeof(__pyx_k_Model_disjoint_bit_sets_line_164), 0, 1, 0, 0},
    {&__pyx_n_s_Model_disjoint_lists, __pyx_k_Model_disjoint_lists, sizeof(__pyx_k_Model_disjoint_lists), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_disjoint_lists_line_199, __pyx_k_Model_disjoint_lists_line_199, sizeof(__pyx_k_Model_disjoint_lists_line_199), 0, 1, 0, 0},
    {&__pyx_n_s_Model_from_file, __pyx_k_Model_from_file, sizeof(__pyx_k_Model_from_file), 0, 0, 1, 1},
    {&__pyx_n_s_Model_integer, __pyx_k_Model_integer, sizeof(__pyx_k_Model_integer), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_integer_line_331, __pyx_k_Model_integer_line_331, sizeof(__pyx_k_Model_integer_line_331), 0, 1, 0, 0},
    {&__pyx_n_s_Model_into_file, __pyx_k_Model_into_file, sizeof(__pyx_k_Model_into_file), 0, 0, 1, 1},
    {&__pyx_n_s_Model_is_locked, __pyx_k_Model_is_locked, sizeof(__pyx_k_Model_is_locked), 0, 0, 1, 1},
    {&__pyx_n_s_Model_iter_constraints, __pyx_k_Model_iter_constraints, sizeof(__pyx_k_Model_iter_constraints), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_iter_constraints_line_507, __pyx_k_Model_iter_constraints_line_507, sizeof(__pyx_k_Model_iter_constraints_line_507), 0, 1, 0, 0},
    {&__pyx_n_s_Model_iter_decisions, __pyx_k_Model_iter_decisions, sizeof(__pyx_k_Model_iter_decisions), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_iter_decisions_line_523, __pyx_k_Model_iter_decisions_line_523, sizeof(__pyx_k_Model_iter_decisions_line_523), 0, 1, 0, 0},
    {&__pyx_n_s_Model_iter_symbols, __pyx_k_Model_iter_symbols, sizeof(__pyx_k_Model_iter_symbols), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_iter_symbols_line_550, __pyx_k_Model_iter_symbols_line_550, sizeof(__pyx_k_Model_iter_symbols_line_550), 0, 1, 0, 0},
    {&__pyx_n_s_Model_list, __pyx_k_Model_list, sizeof(__pyx_k_Model_list), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_list_line_565, __pyx_k_Model_list_line_565, sizeof(__pyx_k_Model_list_line_565), 0, 1, 0, 0},
    {&__pyx_n_s_Model_lock, __pyx_k_Model_lock, sizeof(__pyx_k_Model_lock), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_lock_line_584, __pyx_k_Model_lock_line_584, sizeof(__pyx_k_Model_lock_line_584), 0, 1, 0, 0},
    {&__pyx_n_s_Model_minimize, __pyx_k_Model_minimize, sizeof(__pyx_k_Model_minimize), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_minimize_line_628, __pyx_k_Model_minimize_line_628, sizeof(__pyx_k_Model_minimize_line_628), 0, 1, 0, 0},
    {&__pyx_n_s_Model_num_constraints, __pyx_k_Model_num_constraints, sizeof(__pyx_k_Model_num_constraints), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_num_constraints_line_660, __pyx_k_Model_num_constraints_line_660, sizeof(__pyx_k_Model_num_constraints_line_660), 0, 1, 0, 0},
    {&__pyx_n_s_Model_num_decisions, __pyx_k_Model_num_decisions, sizeof(__pyx_k_Model_num_decisions), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_num_decisions_line_678, __pyx_k_Model_num_decisions_line_678, sizeof(__pyx_k_Model_num_decisions_line_678), 0, 1, 0, 0},
    {&__pyx_n_s_Model_num_nodes, __pyx_k_Model_num_nodes, sizeof(__pyx_k_Model_num_nodes), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_num_nodes_line_697, __pyx_k_Model_num_nodes_line_697, sizeof(__pyx_k_Model_num_nodes_line_697), 0, 1, 0, 0},
    {&__pyx_n_s_Model_num_symbols, __pyx_k_Model_num_symbols, sizeof(__pyx_k_Model_num_symbols), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_num_symbols_line_717, __pyx_k_Model_num_symbols_line_717, sizeof(__pyx_k_Model_num_symbols_line_717), 0, 1, 0, 0},
    {&__pyx_n_s_Model_quadratic_model, __pyx_k_Model_quadratic_model, sizeof(__pyx_k_Model_quadratic_model), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_quadratic_model_line_740, __pyx_k_Model_quadratic_model_line_740, sizeof(__pyx_k_Model_quadratic_model_line_740), 0, 1, 0, 0},
    {&__pyx_n_s_Model_set, __pyx_k_Model_set, sizeof(__pyx_k_Model_set), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_set_line_767, __pyx_k_Model_set_line_767, sizeof(__pyx_k_Model_set_line_767), 0, 1, 0, 0},
    {&__pyx_n_s_Model_state_size, __pyx_k_Model_state_size, sizeof(__pyx_k_Model_state_size), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_state_size_line_789, __pyx_k_Model_state_size_line_789, sizeof(__pyx_k_Model_state_size_line_789), 0, 1, 0, 0},
    {&__pyx_n_s_Model_to_file, __pyx_k_Model_to_file, sizeof(__pyx_k_Model_to_file), 0, 0, 1, 1},
    {&__pyx_n_s_Model_to_networkx, __pyx_k_Model_to_networkx, sizeof(__pyx_k_Model_to_networkx), 0, 0, 1, 1},
    {&__pyx_kp_u_Model_to_networkx_line_817, __pyx_k_Model_to_networkx_line_817, sizeof(__pyx_k_Model_to_networkx_line_817), 0, 1, 0, 0},
    {&__pyx_n_s_Model_unlock, __pyx_k_Model_unlock, sizeof(__pyx_k_Model_unlock), 0, 0, 1, 1},
    {&__pyx_n_s_Multiply, __pyx_k_Multiply, sizeof(__pyx_k_Multiply), 0, 0, 1, 1},
    {&__pyx_n_s_NOT, __pyx_k_NOT, sizeof(__pyx_k_NOT), 0, 0, 1, 1},
    {&__pyx_n_s_Negative, __pyx_k_Negative, sizeof(__pyx_k_Negative), 0, 0, 1, 1},
    {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
    {&__pyx_kp_u_Number_of_constraints_in_the_mod, __pyx_k_Number_of_constraints_in_the_mod, sizeof(__pyx_k_Number_of_constraints_in_the_mod), 0, 1, 0, 0},
    {&__pyx_kp_u_Number_of_independent_decision_n, __pyx_k_Number_of_independent_decision_n, sizeof(__pyx_k_Number_of_independent_decision_n), 0, 1, 0, 0},
    {&__pyx_kp_u_Number_of_model_states_Examples, __pyx_k_Number_of_model_states_Examples, sizeof(__pyx_k_Number_of_model_states_Examples), 0, 1, 0, 0},
    {&__pyx_kp_u_Number_of_nodes_in_the_directed, __pyx_k_Number_of_nodes_in_the_directed, sizeof(__pyx_k_Number_of_nodes_in_the_directed), 0, 1, 0, 0},
    {&__pyx_kp_u_Number_of_symbols_tracked_by_the, __pyx_k_Number_of_symbols_tracked_by_the, sizeof(__pyx_k_Number_of_symbols_tracked_by_the), 0, 1, 0, 0},
    {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_Prod, __pyx_k_Prod, sizeof(__pyx_k_Prod), 0, 0, 1, 1},
    {&__pyx_n_s_QuadraticModel, __pyx_k_QuadraticModel, sizeof(__pyx_k_QuadraticModel), 0, 0, 1, 1},
    {&__pyx_n_s_ReferenceError, __pyx_k_ReferenceError, sizeof(__pyx_k_ReferenceError), 0, 0, 1, 1},
    {&__pyx_kp_u_Reset_the_state_of_a_node_and_an, __pyx_k_Reset_the_state_of_a_node_and_an, sizeof(__pyx_k_Reset_the_state_of_a_node_and_an), 0, 1, 0, 0},
    {&__pyx_n_s_Reshape, __pyx_k_Reshape, sizeof(__pyx_k_Reshape), 0, 0, 1, 1},
    {&__pyx_kp_u_Resize_the_number_of_states_If_n, __pyx_k_Resize_the_number_of_states_If_n, sizeof(__pyx_k_Resize_the_number_of_states_If_n), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_an_estimated_byte_size_of, __pyx_k_Return_an_estimated_byte_size_of, sizeof(__pyx_k_Return_an_estimated_byte_size_of), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_the_number_of_elements_in, __pyx_k_Return_the_number_of_elements_in, sizeof(__pyx_k_Return_the_number_of_elements_in), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_the_shape_of_the_symbol_E, __pyx_k_Return_the_shape_of_the_symbol_E, sizeof(__pyx_k_Return_the_shape_of_the_symbol_E), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_the_state_of_the_node_Arg, __pyx_k_Return_the_state_of_the_node_Arg, sizeof(__pyx_k_Return_the_state_of_the_node_Arg), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_the_stride_length_in_byte, __pyx_k_Return_the_stride_length_in_byte, sizeof(__pyx_k_Return_the_stride_length_in_byte), 0, 1, 0, 0},
    {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
    {&__pyx_n_s_SetVariable, __pyx_k_SetVariable, sizeof(__pyx_k_SetVariable), 0, 0, 1, 1},
    {&__pyx_kp_u_Set_the_objective_value_to_minim, __pyx_k_Set_the_objective_value_to_minim, sizeof(__pyx_k_Set_the_objective_value_to_minim), 0, 1, 0, 0},
    {&__pyx_n_s_Square, __pyx_k_Square, sizeof(__pyx_k_Square), 0, 0, 1, 1},
    {&__pyx_n_s_StateView, __pyx_k_StateView, sizeof(__pyx_k_StateView), 0, 0, 1, 1},
    {&__pyx_n_s_StateView___reduce_cython, __pyx_k_StateView___reduce_cython, sizeof(__pyx_k_StateView___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_StateView___setstate_cython, __pyx_k_StateView___setstate_cython, sizeof(__pyx_k_StateView___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_States, __pyx_k_States, sizeof(__pyx_k_States), 0, 0, 1, 1},
    {&__pyx_n_s_States___reduce_cython, __pyx_k_States___reduce_cython, sizeof(__pyx_k_States___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_States___setstate_cython, __pyx_k_States___setstate_cython, sizeof(__pyx_k_States___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_States_clear, __pyx_k_States_clear, sizeof(__pyx_k_States_clear), 0, 0, 1, 1},
    {&__pyx_kp_u_States_clear_line_967, __pyx_k_States_clear_line_967, sizeof(__pyx_k_States_clear_line_967), 0, 1, 0, 0},
    {&__pyx_n_s_States_from_file, __pyx_k_States_from_file, sizeof(__pyx_k_States_from_file), 0, 0, 1, 1},
    {&__pyx_n_s_States_from_future, __pyx_k_States_from_future, sizeof(__pyx_k_States_from_future), 0, 0, 1, 1},
    {&__pyx_n_s_States_initialize, __pyx_k_States_initialize, sizeof(__pyx_k_States_initialize), 0, 0, 1, 1},
    {&__pyx_n_s_States_into_file, __pyx_k_States_into_file, sizeof(__pyx_k_States_into_file), 0, 0, 1, 1},
    {&__pyx_n_s_States_resize, __pyx_k_States_resize, sizeof(__pyx_k_States_resize), 0, 0, 1, 1},
    {&__pyx_kp_u_States_resize_line_1088, __pyx_k_States_resize_line_1088, sizeof(__pyx_k_States_resize_line_1088), 0, 1, 0, 0},
    {&__pyx_n_s_States_resolve, __pyx_k_States_resolve, sizeof(__pyx_k_States_resolve), 0, 0, 1, 1},
    {&__pyx_n_s_States_size, __pyx_k_States_size, sizeof(__pyx_k_States_size), 0, 0, 1, 1},
    {&__pyx_kp_u_States_size_line_1135, __pyx_k_States_size_line_1135, sizeof(__pyx_k_States_size_line_1135), 0, 1, 0, 0},
    {&__pyx_n_s_States_to_file, __pyx_k_States_to_file, sizeof(__pyx_k_States_to_file), 0, 0, 1, 1},
    {&__pyx_n_s_Subtract, __pyx_k_Subtract, sizeof(__pyx_k_Subtract), 0, 0, 1, 1},
    {&__pyx_n_s_Sum, __pyx_k_Sum, sizeof(__pyx_k_Sum), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol, __pyx_k_Symbol, sizeof(__pyx_k_Symbol), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol___reduce_cython, __pyx_k_Symbol___reduce_cython, sizeof(__pyx_k_Symbol___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol___setstate_cython, __pyx_k_Symbol___setstate_cython, sizeof(__pyx_k_Symbol___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol__from_zipfile, __pyx_k_Symbol__from_zipfile, sizeof(__pyx_k_Symbol__from_zipfile), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol__into_zipfile, __pyx_k_Symbol__into_zipfile, sizeof(__pyx_k_Symbol__into_zipfile), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol__state_from_zipfile, __pyx_k_Symbol__state_from_zipfile, sizeof(__pyx_k_Symbol__state_from_zipfile), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol__state_into_zipfile, __pyx_k_Symbol__state_into_zipfile, sizeof(__pyx_k_Symbol__state_into_zipfile), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol_equals, __pyx_k_Symbol_equals, sizeof(__pyx_k_Symbol_equals), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol_expired, __pyx_k_Symbol_expired, sizeof(__pyx_k_Symbol_expired), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol_has_state, __pyx_k_Symbol_has_state, sizeof(__pyx_k_Symbol_has_state), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol_iter_predecessors, __pyx_k_Symbol_iter_predecessors, sizeof(__pyx_k_Symbol_iter_predecessors), 0, 0, 1, 1},
    {&__pyx_kp_u_Symbol_iter_predecessors_line_12, __pyx_k_Symbol_iter_predecessors_line_12, sizeof(__pyx_k_Symbol_iter_predecessors_line_12), 0, 1, 0, 0},
    {&__pyx_n_s_Symbol_iter_successors, __pyx_k_Symbol_iter_successors, sizeof(__pyx_k_Symbol_iter_successors), 0, 0, 1, 1},
    {&__pyx_kp_u_Symbol_iter_successors_line_1289, __pyx_k_Symbol_iter_successors_line_1289, sizeof(__pyx_k_Symbol_iter_successors_line_1289), 0, 1, 0, 0},
    {&__pyx_n_s_Symbol_maybe_equals, __pyx_k_Symbol_maybe_equals, sizeof(__pyx_k_Symbol_maybe_equals), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol_reset_state, __pyx_k_Symbol_reset_state, sizeof(__pyx_k_Symbol_reset_state), 0, 0, 1, 1},
    {&__pyx_kp_u_Symbol_reset_state_line_1356, __pyx_k_Symbol_reset_state_line_1356, sizeof(__pyx_k_Symbol_reset_state_line_1356), 0, 1, 0, 0},
    {&__pyx_n_s_Symbol_shares_memory, __pyx_k_Symbol_shares_memory, sizeof(__pyx_k_Symbol_shares_memory), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol_state_size, __pyx_k_Symbol_state_size, sizeof(__pyx_k_Symbol_state_size), 0, 0, 1, 1},
    {&__pyx_n_s_Symbol_topological_index, __pyx_k_Symbol_topological_index, sizeof(__pyx_k_Symbol_topological_index), 0, 0, 1, 1},
    {&__pyx_kp_u_Symbol_topological_index_line_14, __pyx_k_Symbol_topological_index_line_14, sizeof(__pyx_k_Symbol_topological_index_line_14), 0, 1, 0, 0},
    {&__pyx_kp_u_Symbols_cannot_be_constructed_di, __pyx_k_Symbols_cannot_be_constructed_di, sizeof(__pyx_k_Symbols_cannot_be_constructed_di), 0, 1, 0, 0},
    {&__pyx_n_s_TemporaryFile, __pyx_k_TemporaryFile, sizeof(__pyx_k_TemporaryFile), 0, 0, 1, 1},
    {&__pyx_kp_u_Topological_index_of_the_node_Re, __pyx_k_Topological_index_of_the_node_Re, sizeof(__pyx_k_Topological_index_of_the_node_Re), 0, 1, 0, 0},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_kp_u_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 1, 0, 0},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s_ZipFile, __pyx_k_ZipFile, sizeof(__pyx_k_ZipFile), 0, 0, 1, 1},
    {&__pyx_kp_u__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0, 0},
    {&__pyx_kp_b__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 0, 0},
    {&__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
    {&__pyx_n_s__179, __pyx_k__179, sizeof(__pyx_k__179), 0, 0, 1, 1},
    {&__pyx_kp_u__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 1, 0, 0},
    {&__pyx_kp_u__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 1, 0, 0},
    {&__pyx_kp_b__23, __pyx_k__23, sizeof(__pyx_k__23), 0, 0, 0, 0},
    {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
    {&__pyx_n_s__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 0, 1, 1},
    {&__pyx_kp_b__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 0, 0},
    {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
    {&__pyx_n_s_abc, __pyx_k_abc, sizeof(__pyx_k_abc), 0, 0, 1, 1},
    {&__pyx_kp_u_accessing_the_states_of_a_garbag, __pyx_k_accessing_the_states_of_a_garbag, sizeof(__pyx_k_accessing_the_states_of_a_garbag), 0, 1, 0, 0},
    {&__pyx_n_s_add_constraint, __pyx_k_add_constraint, sizeof(__pyx_k_add_constraint), 0, 0, 1, 1},
    {&__pyx_n_s_add_edge, __pyx_k_add_edge, sizeof(__pyx_k_add_edge), 0, 0, 1, 1},
    {&__pyx_n_s_add_node, __pyx_k_add_node, sizeof(__pyx_k_add_node), 0, 0, 1, 1},
    {&__pyx_kp_u_adj_adjlist, __pyx_k_adj_adjlist, sizeof(__pyx_k_adj_adjlist), 0, 1, 0, 0},
    {&__pyx_n_s_adjlist, __pyx_k_adjlist, sizeof(__pyx_k_adjlist), 0, 0, 1, 1},
    {&__pyx_n_s_advanced_indices, __pyx_k_advanced_indices, sizeof(__pyx_k_advanced_indices), 0, 0, 1, 1},
    {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
    {&__pyx_n_s_all_2, __pyx_k_all_2, sizeof(__pyx_k_all_2), 0, 0, 1, 1},
    {&__pyx_n_s_allow_pickle, __pyx_k_allow_pickle, sizeof(__pyx_k_allow_pickle), 0, 0, 1, 1},
    {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
    {&__pyx_kp_u_appending_states_is_not_yet_impl, __pyx_k_appending_states_is_not_yet_impl, sizeof(__pyx_k_appending_states_is_not_yet_impl), 0, 1, 0, 0},
    {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
    {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
    {&__pyx_n_s_array_like, __pyx_k_array_like, sizeof(__pyx_k_array_like), 0, 0, 1, 1},
    {&__pyx_kp_u_array_npy, __pyx_k_array_npy, sizeof(__pyx_k_array_npy), 0, 1, 0, 0},
    {&__pyx_n_u_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 1, 0, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_basic_indices, __pyx_k_basic_indices, sizeof(__pyx_k_basic_indices), 0, 0, 1, 1},
    {&__pyx_n_s_binary, __pyx_k_binary, sizeof(__pyx_k_binary), 0, 0, 1, 1},
    {&__pyx_kp_u_but_got, __pyx_k_but_got, sizeof(__pyx_k_but_got), 0, 1, 0, 0},
    {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
    {&__pyx_kp_u_cannot_load_states_into_a_model, __pyx_k_cannot_load_states_into_a_model, sizeof(__pyx_k_cannot_load_states_into_a_model), 0, 1, 0, 0},
    {&__pyx_n_s_check_header, __pyx_k_check_header, sizeof(__pyx_k_check_header), 0, 0, 1, 1},
    {&__pyx_n_s_cid, __pyx_k_cid, sizeof(__pyx_k_cid), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_classname, __pyx_k_classname, sizeof(__pyx_k_classname), 0, 0, 1, 1},
    {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
    {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
    {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
    {&__pyx_n_s_collections_abc, __pyx_k_collections_abc, sizeof(__pyx_k_collections_abc), 0, 0, 1, 1},
    {&__pyx_n_s_constant, __pyx_k_constant, sizeof(__pyx_k_constant), 0, 0, 1, 1},
    {&__pyx_n_s_constraints, __pyx_k_constraints, sizeof(__pyx_k_constraints), 0, 0, 1, 1},
    {&__pyx_kp_u_constraints_json, __pyx_k_constraints_json, sizeof(__pyx_k_constraints_json), 0, 1, 0, 0},
    {&__pyx_n_s_contextlib, __pyx_k_contextlib, sizeof(__pyx_k_contextlib), 0, 0, 1, 1},
    {&__pyx_n_s_contextmanager, __pyx_k_contextmanager, sizeof(__pyx_k_contextmanager), 0, 0, 1, 1},
    {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
    {&__pyx_kp_u_copy_False_is_not_yet_supported, __pyx_k_copy_False_is_not_yet_supported, sizeof(__pyx_k_copy_False_is_not_yet_supported), 0, 1, 0, 0},
    {&__pyx_kp_u_d_a_zA_z_Node, __pyx_k_d_a_zA_z_Node, sizeof(__pyx_k_d_a_zA_z_Node), 0, 1, 0, 0},
    {&__pyx_n_s_decision_state_size, __pyx_k_decision_state_size, sizeof(__pyx_k_decision_state_size), 0, 0, 1, 1},
    {&__pyx_n_s_decision_state_size_locals_genex, __pyx_k_decision_state_size_locals_genex, sizeof(__pyx_k_decision_state_size_locals_genex), 0, 0, 1, 1},
    {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
    {&__pyx_n_s_directory, __pyx_k_directory, sizeof(__pyx_k_directory), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_disjoint_bit_sets, __pyx_k_disjoint_bit_sets, sizeof(__pyx_k_disjoint_bit_sets), 0, 0, 1, 1},
    {&__pyx_n_s_disjoint_bit_sets_locals_genexpr, __pyx_k_disjoint_bit_sets_locals_genexpr, sizeof(__pyx_k_disjoint_bit_sets_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_disjoint_lists, __pyx_k_disjoint_lists, sizeof(__pyx_k_disjoint_lists), 0, 0, 1, 1},
    {&__pyx_n_s_dwave, __pyx_k_dwave, sizeof(__pyx_k_dwave), 0, 0, 1, 1},
    {&__pyx_n_s_dwave_optimization_model, __pyx_k_dwave_optimization_model, sizeof(__pyx_k_dwave_optimization_model), 0, 0, 1, 1},
    {&__pyx_kp_s_dwave_optimization_model_pyx, __pyx_k_dwave_optimization_model_pyx, sizeof(__pyx_k_dwave_optimization_model_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_dwave_optimization_symbols, __pyx_k_dwave_optimization_symbols, sizeof(__pyx_k_dwave_optimization_symbols), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
    {&__pyx_kp_u_encoded_model_has_an_unsupported, __pyx_k_encoded_model_has_an_unsupported, sizeof(__pyx_k_encoded_model_has_an_unsupported), 0, 1, 0, 0},
    {&__pyx_n_s_encoder, __pyx_k_encoder, sizeof(__pyx_k_encoder), 0, 0, 1, 1},
    {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
    {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
    {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
    {&__pyx_n_s_equals, __pyx_k_equals, sizeof(__pyx_k_equals), 0, 0, 1, 1},
    {&__pyx_n_s_equals_locals_genexpr, __pyx_k_equals_locals_genexpr, sizeof(__pyx_k_equals_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
    {&__pyx_n_s_expected, __pyx_k_expected, sizeof(__pyx_k_expected), 0, 0, 1, 1},
    {&__pyx_kp_u_expected_num_nodes_to_be_a_posit, __pyx_k_expected_num_nodes_to_be_a_posit, sizeof(__pyx_k_expected_num_nodes_to_be_a_posit), 0, 1, 0, 0},
    {&__pyx_kp_u_expected_num_states_to_be_a_posi, __pyx_k_expected_num_states_to_be_a_posi, sizeof(__pyx_k_expected_num_states_to_be_a_posi), 0, 1, 0, 0},
    {&__pyx_n_s_expired, __pyx_k_expired, sizeof(__pyx_k_expired), 0, 0, 1, 1},
    {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
    {&__pyx_n_s_fadj, __pyx_k_fadj, sizeof(__pyx_k_fadj), 0, 0, 1, 1},
    {&__pyx_n_s_fcls, __pyx_k_fcls, sizeof(__pyx_k_fcls), 0, 0, 1, 1},
    {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
    {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
    {&__pyx_n_s_fname, __pyx_k_fname, sizeof(__pyx_k_fname), 0, 0, 1, 1},
    {&__pyx_n_s_force_zip64, __pyx_k_force_zip64, sizeof(__pyx_k_force_zip64), 0, 0, 1, 1},
    {&__pyx_n_s_from_file, __pyx_k_from_file, sizeof(__pyx_k_from_file), 0, 0, 1, 1},
    {&__pyx_n_s_from_future, __pyx_k_from_future, sizeof(__pyx_k_from_future), 0, 0, 1, 1},
    {&__pyx_n_s_from_zipfile, __pyx_k_from_zipfile, sizeof(__pyx_k_from_zipfile), 0, 0, 1, 1},
    {&__pyx_n_s_functools, __pyx_k_functools, sizeof(__pyx_k_functools), 0, 0, 1, 1},
    {&__pyx_n_s_future, __pyx_k_future, sizeof(__pyx_k_future), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
    {&__pyx_n_s_getinfo, __pyx_k_getinfo, sizeof(__pyx_k_getinfo), 0, 0, 1, 1},
    {&__pyx_n_s_getitem___locals_genexpr, __pyx_k_getitem___locals_genexpr, sizeof(__pyx_k_getitem___locals_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_kp_u_has_not_implemented_state_deser, __pyx_k_has_not_implemented_state_deser, sizeof(__pyx_k_has_not_implemented_state_deser), 0, 1, 0, 0},
    {&__pyx_kp_u_has_not_implemented_state_seria, __pyx_k_has_not_implemented_state_seria, sizeof(__pyx_k_has_not_implemented_state_seria), 0, 1, 0, 0},
    {&__pyx_n_s_has_state, __pyx_k_has_state, sizeof(__pyx_k_has_state), 0, 0, 1, 1},
    {&__pyx_n_s_header_data, __pyx_k_header_data, sizeof(__pyx_k_header_data), 0, 0, 1, 1},
    {&__pyx_n_s_header_data_2, __pyx_k_header_data_2, sizeof(__pyx_k_header_data_2), 0, 0, 1, 1},
    {&__pyx_kp_u_header_data_does_not_match_the_d, __pyx_k_header_data_does_not_match_the_d, sizeof(__pyx_k_header_data_does_not_match_the_d), 0, 1, 0, 0},
    {&__pyx_n_s_header_len, __pyx_k_header_len, sizeof(__pyx_k_header_len), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
    {&__pyx_kp_u_index_out_of_range, __pyx_k_index_out_of_range, sizeof(__pyx_k_index_out_of_range), 0, 1, 0, 0},
    {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
    {&__pyx_n_u_inf, __pyx_k_inf, sizeof(__pyx_k_inf), 0, 1, 0, 1},
    {&__pyx_kp_u_info_json, __pyx_k_info_json, sizeof(__pyx_k_info_json), 0, 1, 0, 0},
    {&__pyx_n_s_initialize, __pyx_k_initialize, sizeof(__pyx_k_initialize), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_kp_u_instead, __pyx_k_instead, sizeof(__pyx_k_instead), 0, 1, 0, 0},
    {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
    {&__pyx_n_s_integer, __pyx_k_integer, sizeof(__pyx_k_integer), 0, 0, 1, 1},
    {&__pyx_n_s_into_file, __pyx_k_into_file, sizeof(__pyx_k_into_file), 0, 0, 1, 1},
    {&__pyx_n_s_into_zipfile, __pyx_k_into_zipfile, sizeof(__pyx_k_into_zipfile), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_is_locked, __pyx_k_is_locked, sizeof(__pyx_k_is_locked), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_islice, __pyx_k_islice, sizeof(__pyx_k_islice), 0, 0, 1, 1},
    {&__pyx_n_s_it, __pyx_k_it, sizeof(__pyx_k_it), 0, 0, 1, 1},
    {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
    {&__pyx_n_s_iter_constraints, __pyx_k_iter_constraints, sizeof(__pyx_k_iter_constraints), 0, 0, 1, 1},
    {&__pyx_n_s_iter_decisions, __pyx_k_iter_decisions, sizeof(__pyx_k_iter_decisions), 0, 0, 1, 1},
    {&__pyx_n_s_iter_predecessors, __pyx_k_iter_predecessors, sizeof(__pyx_k_iter_predecessors), 0, 0, 1, 1},
    {&__pyx_n_s_iter_successors, __pyx_k_iter_successors, sizeof(__pyx_k_iter_successors), 0, 0, 1, 1},
    {&__pyx_n_s_iter_symbols, __pyx_k_iter_symbols, sizeof(__pyx_k_iter_symbols), 0, 0, 1, 1},
    {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
    {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
    {&__pyx_n_s_json, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
    {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
    {&__pyx_n_s_linear, __pyx_k_linear, sizeof(__pyx_k_linear), 0, 0, 1, 1},
    {&__pyx_n_s_lineno, __pyx_k_lineno, sizeof(__pyx_k_lineno), 0, 0, 1, 1},
    {&__pyx_n_s_list, __pyx_k_list, sizeof(__pyx_k_list), 0, 0, 1, 1},
    {&__pyx_n_s_lists, __pyx_k_lists, sizeof(__pyx_k_lists), 0, 0, 1, 1},
    {&__pyx_n_s_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 0, 1, 1},
    {&__pyx_n_s_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 0, 1, 1},
    {&__pyx_n_s_lock, __pyx_k_lock, sizeof(__pyx_k_lock), 0, 0, 1, 1},
    {&__pyx_n_s_locked, __pyx_k_locked, sizeof(__pyx_k_locked), 0, 0, 1, 1},
    {&__pyx_n_s_lower_bound, __pyx_k_lower_bound, sizeof(__pyx_k_lower_bound), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_main_2, __pyx_k_main_2, sizeof(__pyx_k_main_2), 0, 0, 1, 1},
    {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
    {&__pyx_n_s_match, __pyx_k_match, sizeof(__pyx_k_match), 0, 0, 1, 1},
    {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
    {&__pyx_n_s_max_num_states, __pyx_k_max_num_states, sizeof(__pyx_k_max_num_states), 0, 0, 1, 1},
    {&__pyx_n_s_max_size, __pyx_k_max_size, sizeof(__pyx_k_max_size), 0, 0, 1, 1},
    {&__pyx_n_s_maybe, __pyx_k_maybe, sizeof(__pyx_k_maybe), 0, 0, 1, 1},
    {&__pyx_n_s_maybe_equals, __pyx_k_maybe_equals, sizeof(__pyx_k_maybe_equals), 0, 0, 1, 1},
    {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
    {&__pyx_n_s_min_size, __pyx_k_min_size, sizeof(__pyx_k_min_size), 0, 0, 1, 1},
    {&__pyx_n_s_minimize, __pyx_k_minimize, sizeof(__pyx_k_minimize), 0, 0, 1, 1},
    {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
    {&__pyx_n_s_model, __pyx_k_model, sizeof(__pyx_k_model), 0, 0, 1, 1},
    {&__pyx_n_s_model_info, __pyx_k_model_info, sizeof(__pyx_k_model_info), 0, 0, 1, 1},
    {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
    {&__pyx_n_s_n0, __pyx_k_n0, sizeof(__pyx_k_n0), 0, 0, 1, 1},
    {&__pyx_n_s_n1, __pyx_k_n1, sizeof(__pyx_k_n1), 0, 0, 1, 1},
    {&__pyx_kp_u_n_must_be_a_non_negative_integer, __pyx_k_n_must_be_a_non_negative_integer, sizeof(__pyx_k_n_must_be_a_non_negative_integer), 0, 1, 0, 0},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_ndarray, __pyx_k_ndarray, sizeof(__pyx_k_ndarray), 0, 0, 1, 1},
    {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
    {&__pyx_n_s_networkx, __pyx_k_networkx, sizeof(__pyx_k_networkx), 0, 0, 1, 1},
    {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
    {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
    {&__pyx_n_s_node_id, __pyx_k_node_id, sizeof(__pyx_k_node_id), 0, 0, 1, 1},
    {&__pyx_n_s_node_subclasses, __pyx_k_node_subclasses, sizeof(__pyx_k_node_subclasses), 0, 0, 1, 1},
    {&__pyx_kp_u_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 1, 0, 0},
    {&__pyx_kp_u_nodetypes_txt, __pyx_k_nodetypes_txt, sizeof(__pyx_k_nodetypes_txt), 0, 1, 0, 0},
    {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
    {&__pyx_n_s_num_constraints, __pyx_k_num_constraints, sizeof(__pyx_k_num_constraints), 0, 0, 1, 1},
    {&__pyx_n_s_num_decisions, __pyx_k_num_decisions, sizeof(__pyx_k_num_decisions), 0, 0, 1, 1},
    {&__pyx_n_s_num_disjoint_lists, __pyx_k_num_disjoint_lists, sizeof(__pyx_k_num_disjoint_lists), 0, 0, 1, 1},
    {&__pyx_n_s_num_disjoint_sets, __pyx_k_num_disjoint_sets, sizeof(__pyx_k_num_disjoint_sets), 0, 0, 1, 1},
    {&__pyx_n_s_num_nodes, __pyx_k_num_nodes, sizeof(__pyx_k_num_nodes), 0, 0, 1, 1},
    {&__pyx_n_u_num_nodes, __pyx_k_num_nodes, sizeof(__pyx_k_num_nodes), 0, 1, 0, 1},
    {&__pyx_n_s_num_states, __pyx_k_num_states, sizeof(__pyx_k_num_states), 0, 0, 1, 1},
    {&__pyx_n_u_num_states, __pyx_k_num_states, sizeof(__pyx_k_num_states), 0, 1, 0, 1},
    {&__pyx_n_s_num_symbols, __pyx_k_num_symbols, sizeof(__pyx_k_num_symbols), 0, 0, 1, 1},
    {&__pyx_n_s_numbers, __pyx_k_numbers, sizeof(__pyx_k_numbers), 0, 0, 1, 1},
    {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
    {&__pyx_n_s_objective_buff, __pyx_k_objective_buff, sizeof(__pyx_k_objective_buff), 0, 0, 1, 1},
    {&__pyx_n_s_objective_id, __pyx_k_objective_id, sizeof(__pyx_k_objective_id), 0, 0, 1, 1},
    {&__pyx_kp_u_objective_json, __pyx_k_objective_json, sizeof(__pyx_k_objective_json), 0, 1, 0, 0},
    {&__pyx_kp_u_objective_must_be_an_integer_and, __pyx_k_objective_must_be_an_integer_and, sizeof(__pyx_k_objective_must_be_an_integer_and), 0, 1, 0, 0},
    {&__pyx_n_s_only_decision, __pyx_k_only_decision, sizeof(__pyx_k_only_decision), 0, 0, 1, 1},
    {&__pyx_kp_u_only_integers_slices_and_array_s, __pyx_k_only_integers_slices_and_array_s, sizeof(__pyx_k_only_integers_slices_and_array_s), 0, 1, 0, 0},
    {&__pyx_kp_u_only_squaring_is_currently_suppo, __pyx_k_only_squaring_is_currently_suppo, sizeof(__pyx_k_only_squaring_is_currently_suppo), 0, 1, 0, 0},
    {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
    {&__pyx_n_s_operator, __pyx_k_operator, sizeof(__pyx_k_operator), 0, 0, 1, 1},
    {&__pyx_n_s_optimization, __pyx_k_optimization, sizeof(__pyx_k_optimization), 0, 0, 1, 1},
    {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
    {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
    {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
    {&__pyx_n_s_padding, __pyx_k_padding, sizeof(__pyx_k_padding), 0, 0, 1, 1},
    {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
    {&__pyx_n_s_pid, __pyx_k_pid, sizeof(__pyx_k_pid), 0, 0, 1, 1},
    {&__pyx_n_s_pptr, __pyx_k_pptr, sizeof(__pyx_k_pptr), 0, 0, 1, 1},
    {&__pyx_n_s_pred, __pyx_k_pred, sizeof(__pyx_k_pred), 0, 0, 1, 1},
    {&__pyx_n_s_predecessor_ids, __pyx_k_predecessor_ids, sizeof(__pyx_k_predecessor_ids), 0, 0, 1, 1},
    {&__pyx_n_s_predecessors, __pyx_k_predecessors, sizeof(__pyx_k_predecessors), 0, 0, 1, 1},
    {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
    {&__pyx_n_s_primary_set_size, __pyx_k_primary_set_size, sizeof(__pyx_k_primary_set_size), 0, 0, 1, 1},
    {&__pyx_n_s_prod, __pyx_k_prod, sizeof(__pyx_k_prod), 0, 0, 1, 1},
    {&__pyx_n_s_ptr, __pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_StateView, __pyx_k_pyx_unpickle_StateView, sizeof(__pyx_k_pyx_unpickle_StateView), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
    {&__pyx_n_s_quadratic, __pyx_k_quadratic, sizeof(__pyx_k_quadratic), 0, 0, 1, 1},
    {&__pyx_n_s_quadratic_model, __pyx_k_quadratic_model, sizeof(__pyx_k_quadratic_model), 0, 0, 1, 1},
    {&__pyx_n_u_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 1, 0, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_u_rb, __pyx_k_rb, sizeof(__pyx_k_rb), 0, 1, 0, 1},
    {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
    {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
    {&__pyx_n_s_read_prefix, __pyx_k_read_prefix, sizeof(__pyx_k_read_prefix), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_ref, __pyx_k_ref, sizeof(__pyx_k_ref), 0, 0, 1, 1},
    {&__pyx_n_s_register, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
    {&__pyx_n_s_register_node_subclasses, __pyx_k_register_node_subclasses, sizeof(__pyx_k_register_node_subclasses), 0, 0, 1, 1},
    {&__pyx_n_s_register_node_subclasses_locals, __pyx_k_register_node_subclasses_locals, sizeof(__pyx_k_register_node_subclasses_locals), 0, 0, 1, 1},
    {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
    {&__pyx_n_s_reset_state, __pyx_k_reset_state, sizeof(__pyx_k_reset_state), 0, 0, 1, 1},
    {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
    {&__pyx_n_s_resize, __pyx_k_resize, sizeof(__pyx_k_resize), 0, 0, 1, 1},
    {&__pyx_n_s_resolve, __pyx_k_resolve, sizeof(__pyx_k_resolve), 0, 0, 1, 1},
    {&__pyx_n_s_result_hook, __pyx_k_result_hook, sizeof(__pyx_k_result_hook), 0, 0, 1, 1},
    {&__pyx_n_s_rhs, __pyx_k_rhs, sizeof(__pyx_k_rhs), 0, 0, 1, 1},
    {&__pyx_n_s_rstrip, __pyx_k_rstrip, sizeof(__pyx_k_rstrip), 0, 0, 1, 1},
    {&__pyx_n_s_save, __pyx_k_save, sizeof(__pyx_k_save), 0, 0, 1, 1},
    {&__pyx_n_s_search, __pyx_k_search, sizeof(__pyx_k_search), 0, 0, 1, 1},
    {&__pyx_n_s_seek, __pyx_k_seek, sizeof(__pyx_k_seek), 0, 0, 1, 1},
    {&__pyx_n_s_seen_decisions, __pyx_k_seen_decisions, sizeof(__pyx_k_seen_decisions), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_kp_s_self__graph_cannot_be_converted, __pyx_k_self__graph_cannot_be_converted, sizeof(__pyx_k_self__graph_cannot_be_converted), 0, 0, 1, 0},
    {&__pyx_kp_s_self__states_cannot_be_converted, __pyx_k_self__states_cannot_be_converted, sizeof(__pyx_k_self__states_cannot_be_converted), 0, 0, 1, 0},
    {&__pyx_kp_s_self_array_ptr_self_expired_ptr, __pyx_k_self_array_ptr_self_expired_ptr, sizeof(__pyx_k_self_array_ptr_self_expired_ptr), 0, 0, 1, 0},
    {&__pyx_kp_s_self_expired_ptr_self_node_ptr_c, __pyx_k_self_expired_ptr_self_node_ptr_c, sizeof(__pyx_k_self_expired_ptr_self_node_ptr_c), 0, 0, 1, 0},
    {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
    {&__pyx_n_s_separators, __pyx_k_separators, sizeof(__pyx_k_separators), 0, 0, 1, 1},
    {&__pyx_n_s_set, __pyx_k_set, sizeof(__pyx_k_set), 0, 0, 1, 1},
    {&__pyx_n_s_set_state, __pyx_k_set_state, sizeof(__pyx_k_set_state), 0, 0, 1, 1},
    {&__pyx_n_s_sets, __pyx_k_sets, sizeof(__pyx_k_sets), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
    {&__pyx_n_s_shape_locals_genexpr, __pyx_k_shape_locals_genexpr, sizeof(__pyx_k_shape_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_shares_memory, __pyx_k_shares_memory, sizeof(__pyx_k_shares_memory), 0, 0, 1, 1},
    {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
    {&__pyx_kp_u_size_is_unbounded, __pyx_k_size_is_unbounded, sizeof(__pyx_k_size_is_unbounded), 0, 1, 0, 0},
    {&__pyx_n_s_sizeinfo, __pyx_k_sizeinfo, sizeof(__pyx_k_sizeinfo), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
    {&__pyx_n_s_split_indices, __pyx_k_split_indices, sizeof(__pyx_k_split_indices), 0, 0, 1, 1},
    {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
    {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
    {&__pyx_n_s_state_from_zipfile, __pyx_k_state_from_zipfile, sizeof(__pyx_k_state_from_zipfile), 0, 0, 1, 1},
    {&__pyx_n_s_state_index, __pyx_k_state_index, sizeof(__pyx_k_state_index), 0, 0, 1, 1},
    {&__pyx_n_s_state_into_zipfile, __pyx_k_state_into_zipfile, sizeof(__pyx_k_state_into_zipfile), 0, 0, 1, 1},
    {&__pyx_n_s_state_size, __pyx_k_state_size, sizeof(__pyx_k_state_size), 0, 0, 1, 1},
    {&__pyx_n_s_state_size_locals_genexpr, __pyx_k_state_size_locals_genexpr, sizeof(__pyx_k_state_size_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_kp_u_states, __pyx_k_states, sizeof(__pyx_k_states), 0, 1, 0, 0},
    {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
    {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
    {&__pyx_n_s_strides, __pyx_k_strides, sizeof(__pyx_k_strides), 0, 0, 1, 1},
    {&__pyx_n_s_strides_locals_genexpr, __pyx_k_strides_locals_genexpr, sizeof(__pyx_k_strides_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
    {&__pyx_n_s_subclass, __pyx_k_subclass, sizeof(__pyx_k_subclass), 0, 0, 1, 1},
    {&__pyx_n_s_subclasses, __pyx_k_subclasses, sizeof(__pyx_k_subclasses), 0, 0, 1, 1},
    {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
    {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
    {&__pyx_n_s_symbol, __pyx_k_symbol, sizeof(__pyx_k_symbol), 0, 0, 1, 1},
    {&__pyx_n_s_symbols, __pyx_k_symbols, sizeof(__pyx_k_symbols), 0, 0, 1, 1},
    {&__pyx_n_s_tempfile, __pyx_k_tempfile, sizeof(__pyx_k_tempfile), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_kp_u_the_state_of_an_intermediate_var, __pyx_k_the_state_of_an_intermediate_var, sizeof(__pyx_k_the_state_of_an_intermediate_var), 0, 1, 0, 0},
    {&__pyx_kp_u_the_value_of_an_array_with_more, __pyx_k_the_value_of_an_array_with_more, sizeof(__pyx_k_the_value_of_an_array_with_more), 0, 1, 0, 0},
    {&__pyx_kp_u_the_value_of_an_empty_array_is_a, __pyx_k_the_value_of_an_empty_array_is_a, sizeof(__pyx_k_the_value_of_an_empty_array_is_a), 0, 1, 0, 0},
    {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
    {&__pyx_kp_u_to_be_a_subset_of, __pyx_k_to_be_a_subset_of, sizeof(__pyx_k_to_be_a_subset_of), 0, 1, 0, 0},
    {&__pyx_n_s_to_file, __pyx_k_to_file, sizeof(__pyx_k_to_file), 0, 0, 1, 1},
    {&__pyx_n_s_to_networkx, __pyx_k_to_networkx, sizeof(__pyx_k_to_networkx), 0, 0, 1, 1},
    {&__pyx_n_s_topological_index, __pyx_k_topological_index, sizeof(__pyx_k_topological_index), 0, 0, 1, 1},
    {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
    {&__pyx_kp_u_unexpected_adj_adjlist_format, __pyx_k_unexpected_adj_adjlist_format, sizeof(__pyx_k_unexpected_adj_adjlist_format), 0, 1, 0, 0},
    {&__pyx_kp_u_unexpected_index_type, __pyx_k_unexpected_index_type, sizeof(__pyx_k_unexpected_index_type), 0, 1, 0, 0},
    {&__pyx_kp_u_unexpected_predecessor_id, __pyx_k_unexpected_predecessor_id, sizeof(__pyx_k_unexpected_predecessor_id), 0, 1, 0, 0},
    {&__pyx_kp_u_unknown_file_type_expected_magic, __pyx_k_unknown_file_type_expected_magic, sizeof(__pyx_k_unknown_file_type_expected_magic), 0, 1, 0, 0},
    {&__pyx_n_s_unlock, __pyx_k_unlock, sizeof(__pyx_k_unlock), 0, 0, 1, 1},
    {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_s_upper_bound, __pyx_k_upper_bound, sizeof(__pyx_k_upper_bound), 0, 0, 1, 1},
    {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
    {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
    {&__pyx_kp_u_value_cannot_be_None, __pyx_k_value_cannot_be_None, sizeof(__pyx_k_value_cannot_be_None), 0, 1, 0, 0},
    {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
    {&__pyx_kp_u_version_txt, __pyx_k_version_txt, sizeof(__pyx_k_version_txt), 0, 1, 0, 0},
    {&__pyx_n_u_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 1, 0, 1},
    {&__pyx_kp_u_w_b, __pyx_k_w_b, sizeof(__pyx_k_w_b), 0, 1, 0, 0},
    {&__pyx_n_u_wb, __pyx_k_wb, sizeof(__pyx_k_wb), 0, 1, 0, 1},
    {&__pyx_n_s_weakref, __pyx_k_weakref, sizeof(__pyx_k_weakref), 0, 0, 1, 1},
    {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
    {&__pyx_n_s_writestr, __pyx_k_writestr, sizeof(__pyx_k_writestr), 0, 0, 1, 1},
    {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
    {&__pyx_n_s_zf, __pyx_k_zf, sizeof(__pyx_k_zf), 0, 0, 1, 1},
    {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
    {&__pyx_n_s_zipfile, __pyx_k_zipfile, sizeof(__pyx_k_zipfile), 0, 0, 1, 1},
    {&__pyx_n_s_zipinfo, __pyx_k_zipinfo, sizeof(__pyx_k_zipinfo), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 162, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 196, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 276, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 276, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) __PYX_ERR(0, 278, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 293, __pyx_L1_error)
  __pyx_builtin_filter = __Pyx_GetBuiltinName(__pyx_n_s_filter); if (!__pyx_builtin_filter) __PYX_ERR(0, 493, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 1023, __pyx_L1_error)
  __pyx_builtin_ReferenceError = __Pyx_GetBuiltinName(__pyx_n_s_ReferenceError); if (!__pyx_builtin_ReferenceError) __PYX_ERR(0, 1085, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 1476, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 1591, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 1658, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "dwave/optimization/model.pyx":104
 *         """
 *         if value is None:
 *             raise ValueError("value cannot be None")             # <<<<<<<<<<<<<<
 *         # TODO: shall we accept array valued constraints?
 *         self._graph.add_constraint(value.array_ptr)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_value_cannot_be_None); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "dwave/optimization/model.pyx":248
 *         """
 *         if isinstance(file, str):
 *             with open(file, "rb") as f:             # <<<<<<<<<<<<<<
 *                 return cls.from_file(f)
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "dwave/optimization/model.pyx":273
 *             num_nodes = model_info.get("num_nodes")
 *             if not isinstance(num_nodes, int) or num_nodes < 0:
 *                 raise ValueError("expected num_nodes to be a positive integer")             # <<<<<<<<<<<<<<
 * 
 *             with zf.open("nodetypes.txt", "r") as fcls, zf.open("adj.adjlist", "r") as fadj:
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_expected_num_nodes_to_be_a_posit); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "dwave/optimization/model.pyx":275
 *                 raise ValueError("expected num_nodes to be a positive integer")
 * 
 *             with zf.open("nodetypes.txt", "r") as fcls, zf.open("adj.adjlist", "r") as fadj:             # <<<<<<<<<<<<<<
 *                 for lineno, (classname, adjlist) in enumerate(zip(fcls, fadj)):
 *                     # get the predecessors
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_kp_u_nodetypes_txt, __pyx_n_u_r); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_kp_u_adj_adjlist, __pyx_n_u_r); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "dwave/optimization/model.pyx":280
 *                     node_id, *predecessor_ids = map(int, adjlist.split(b" "))
 *                     if node_id != lineno:  # sanity check
 *                         raise ValueError("unexpected adj.adjlist format")             # <<<<<<<<<<<<<<
 * 
 *                     predecessors = []
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_unexpected_adj_adjlist_format); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "dwave/optimization/model.pyx":285
 *                     for pid in predecessor_ids:
 *                         if not 0 <= pid < node_id:
 *                             raise ValueError("unexpected predecessor id")             # <<<<<<<<<<<<<<
 *                         predecessors.append(symbol_from_ptr(model, model._graph.nodes()[pid].get()))
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_unexpected_predecessor_id); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "dwave/optimization/model.pyx":294
 *                         _node_subclasses[classname]._from_zipfile(zf, directory, model, predecessors=predecessors)
 *                     except KeyError:
 *                         raise ValueError("encoded model has an unsupported node type")             # <<<<<<<<<<<<<<
 * 
 *             objective_buff = zf.read("objective.json")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_encoded_model_has_an_unsupported); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "dwave/optimization/model.pyx":300
 *                 objective_id = json.loads(objective_buff)
 *                 if not isinstance(objective_id, int) or objective_id >= model.num_nodes():
 *                     raise ValueError("objective must be an integer and a valid node id")             # <<<<<<<<<<<<<<
 *                 model.minimize(symbol_from_ptr(model, model._graph.nodes()[objective_id].get()))
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_objective_must_be_an_integer_and); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "dwave/optimization/model.pyx":309
 *             num_states = model_info.get("num_states")
 *             if not isinstance(num_states, int) or num_states < 0:
 *                 raise ValueError("expected num_states to be a positive integer")             # <<<<<<<<<<<<<<
 * 
 *             if num_states > 0:
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_expected_num_states_to_be_a_posi); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "dwave/optimization/model.pyx":409
 *                     )
 * 
 *         version = (0, 1)             # <<<<<<<<<<<<<<
 * 
 *         model_info = self._header_data(max_num_states=max_num_states, only_decision=only_decision)
 */
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_1); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "dwave/optimization/model.pyx":414
 *         num_states = model_info["num_states"]
 * 
 *         encoder = json.JSONEncoder(separators=(',', ':'))             # <<<<<<<<<<<<<<
 * 
 *         # First prepend the header
 */
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_kp_u__18, __pyx_kp_u__19); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "dwave/optimization/model.pyx":454
 * 
 *             # On the first pass we made a nodetypes.txt file that has the node names
 *             with zf.open("nodetypes.txt", "w", force_zip64=True) as f:             # <<<<<<<<<<<<<<
 *                 for node in itertools.islice(self.iter_symbols(), 0, stop):
 *                     f.write(type(node).__name__.encode("UTF-8"))
 */
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_kp_u_nodetypes_txt, __pyx_n_u_w); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "dwave/optimization/model.pyx":460
 * 
 *             # On the second pass we encode the adjacency
 *             with zf.open("adj.adjlist", "w", force_zip64=True) as f:             # <<<<<<<<<<<<<<
 *                 # We don't actually need to make the Python symbols here, but it's convenient
 *                 # Also, if we're only_decision then there will never be predecessors, but
 */
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_kp_u_adj_adjlist, __pyx_n_u_w); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "dwave/optimization/model.pyx":481
 *                 zf.writestr("objective.json", encoder.encode(self.objective.topological_index()))
 *             else:
 *                 zf.writestr("objective.json", b"")             # <<<<<<<<<<<<<<
 * 
 *             constraints = []  # todo: not yet available at the python level
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_kp_u_objective_json, __pyx_kp_b__23); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "dwave/optimization/model.pyx":654
 *             raise ValueError("value cannot be None")
 *         if value.size() < 1:
 *             raise ValueError("the value of an empty array is ambiguous")             # <<<<<<<<<<<<<<
 *         if value.size() > 1:
 *             raise ValueError("the value of an array with more than one element is ambiguous")
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_the_value_of_an_empty_array_is_a); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "dwave/optimization/model.pyx":656
 *             raise ValueError("the value of an empty array is ambiguous")
 *         if value.size() > 1:
 *             raise ValueError("the value of an array with more than one element is ambiguous")             # <<<<<<<<<<<<<<
 *         self._graph.set_objective(value.array_ptr)
 *         self.objective = value
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_the_value_of_an_array_with_more); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "dwave/optimization/model.pyx":1023
 * 
 *         if not replace:
 *             raise NotImplementedError("appending states is not (yet) implemented")             # <<<<<<<<<<<<<<
 * 
 *         # todo: we don't need to actually construct a model, but this is nice and
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_appending_states_is_not_yet_impl); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "dwave/optimization/model.pyx":1033
 *             # todo: replace with proper node quality testing once we have it
 *             if not isinstance(n0, type(n1)):
 *                 raise ValueError("cannot load states into a model with mismatched decisions")             # <<<<<<<<<<<<<<
 * 
 *         self.attach_states(move(model.states.detach_states()))
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_u_cannot_load_states_into_a_model); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "dwave/optimization/model.pyx":1061
 * 
 *         if not model.is_locked():
 *             raise ValueError("Cannot initialize states of an unlocked model")             # <<<<<<<<<<<<<<
 *         for i in range(self._states.size()):
 *             self._states[i].resize(model.num_nodes())
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_u_Cannot_initialize_states_of_an_u); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "dwave/optimization/model.pyx":1085
 *         cdef Model m = self._model_ref()
 *         if m is None:
 *             raise ReferenceError("accessing the states of a garbage collected model")             # <<<<<<<<<<<<<<
 *         return m
 * 
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_u_accessing_the_states_of_a_garbag); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "dwave/optimization/model.pyx":1114
 * 
 *         if n < 0:
 *             raise ValueError("n must be a non-negative integer")             # <<<<<<<<<<<<<<
 * 
 *         self._states.resize(n)
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_u_n_must_be_a_non_negative_integer); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "dwave/optimization/model.pyx":1166
 *         # disallow direct construction of symbols, they should be constructed
 *         # via their subclasses.
 *         raise ValueError("Symbols cannot be constructed directly")             # <<<<<<<<<<<<<<
 * 
 *     cdef void initialize_node(self, Model model, cppNode* node_ptr) noexcept:
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_u_Symbols_cannot_be_constructed_di); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "dwave/optimization/model.pyx":1227
 *         """
 *         if not self.model.is_locked() and self.node_ptr.topological_index() < 0:
 *             raise TypeError("the state of an intermediate variable cannot be accessed without "             # <<<<<<<<<<<<<<
 *                             "locking the model first. See model.lock().")
 * 
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_u_the_state_of_an_intermediate_var); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 1227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "dwave/optimization/model.pyx":1473
 * _node_subclasses = dict()
 * def _register_node_subclasses():
 *     def register(cls):             # <<<<<<<<<<<<<<
 *         if cls.__name__ in _node_subclasses:
 *             if _node_subclasses[cls.__name__] != cls:
 */
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_n_s_cls, __pyx_n_s_subclass); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 1473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_register, 1473, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 1473, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1511
 *                 # Advanced can only handle empty slices, so we do basic first
 *                 basic_indices.append(index)
 *                 advanced_indices.append(slice(None))             # <<<<<<<<<<<<<<
 *         elif isinstance(index, (ArraySymbol, np.ndarray)):
 *             # Only advanced handles arrays, it preserves the axis so basic gets
 */
  __pyx_slice__42 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__42)) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__42);
  __Pyx_GIVEREF(__pyx_slice__42);

  /* "dwave/optimization/model.pyx":1522
 *         else:
 *             # this should be checked by the calling function, but just in case
 *             raise RuntimeError("unexpected index type")             # <<<<<<<<<<<<<<
 * 
 *     return tuple(basic_indices), tuple(advanced_indices)
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_u_unexpected_index_type); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 1522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "dwave/optimization/model.pyx":1536
 *         # disallow direct construction of array symbols, they should be constructed
 *         # via their subclasses.
 *         raise ValueError("ArraySymbols cannot be constructed directly")             # <<<<<<<<<<<<<<
 * 
 *     cdef void initialize_array(self, cppArray* array_ptr) noexcept:
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_u_ArraySymbols_cannot_be_construct); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 1536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "dwave/optimization/model.pyx":1554
 * 
 *     def __getitem__(self, index):
 *         import dwave.optimization.symbols  # avoid circular import             # <<<<<<<<<<<<<<
 *         if isinstance(index, tuple):
 *             index = list(index)
 */
  __pyx_tuple__45 = PyTuple_Pack(3, __pyx_n_s_dwave, __pyx_n_s_optimization, __pyx_n_s_symbols); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "dwave/optimization/model.pyx":1591
 * 
 *                 # this error message is chosen to be similar to NumPy's
 *                 raise IndexError("only integers, slices (`:`), and array symbols are valid indices")             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_u_only_integers_slices_and_array_s); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 1591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "dwave/optimization/model.pyx":1612
 *             from dwave.optimization.symbols import Square  # avoid circular import
 *             return Square(self)
 *         raise NotImplementedError("only squaring is currently supported")             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(self, ArraySymbol rhs):
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_u_only_squaring_is_currently_suppo); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 1612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "dwave/optimization/model.pyx":1786
 *         if not copy:
 *             # todo: document once implemented
 *             raise NotImplementedError("copy=False is not (yet) supported")             # <<<<<<<<<<<<<<
 * 
 *         cdef Py_ssize_t num_states = self.model.states.size()
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_u_copy_False_is_not_yet_supported); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 1786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "dwave/optimization/model.pyx":1856
 *         # This shouldn't happen, but just in case...
 *         if not sizeinfo.max.has_value():
 *             raise RuntimeError("size is unbounded")             # <<<<<<<<<<<<<<
 * 
 *         return sizeinfo.max.value() * self.array_ptr.itemsize()
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_u_size_is_unbounded); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x60fdced, 0x3833493, 0x04b5c08):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x60fdced, 0x3833493, 0x04b5c08) = (index, symbol))" % __pyx_checksum
 */
  __pyx_tuple__50 = PyTuple_Pack(3, __pyx_int_101702893, __pyx_int_58930323, __pyx_int_4938760); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "dwave/optimization/model.pyx":27
 * 
 * import contextlib
 * import collections.abc             # <<<<<<<<<<<<<<
 * import functools
 * import itertools
 */
  __pyx_tuple__51 = PyTuple_Pack(2, __pyx_n_s_collections, __pyx_n_s_abc); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "dwave/optimization/model.pyx":53
 * 
 * 
 * @contextlib.contextmanager             # <<<<<<<<<<<<<<
 * def locked(model):
 *     """Context manager that hold a locked model and unlocks it when the context is exited."""
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_n_s_model); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj_ = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_locked, 53, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj_)) __PYX_ERR(0, 53, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":87
 *         self._data_sources = []
 * 
 *     def add_constraint(self, ArraySymbol value):             # <<<<<<<<<<<<<<
 *         """Add a constraint to the model.
 * 
 */
  __pyx_tuple__53 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_value); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_add_constraint, 87, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 87, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":108
 *         self._graph.add_constraint(value.array_ptr)
 * 
 *     def binary(self, shape=None):             # <<<<<<<<<<<<<<
 *         r"""Create a binary symbol as a decision variable.
 * 
 */
  __pyx_tuple__55 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_shape, __pyx_n_s_BinaryVariable); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_binary, 108, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 108, __pyx_L1_error)
  __pyx_tuple__57 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "dwave/optimization/model.pyx":127
 *         return BinaryVariable(self, shape)
 * 
 *     def constant(self, array_like):             # <<<<<<<<<<<<<<
 *         r"""Create a constant symbol.
 * 
 */
  __pyx_tuple__58 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_array_like, __pyx_n_s_Constant); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_constant, 127, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 127, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":149
 *         return Constant(self, array_like)
 * 
 *     def decision_state_size(self):             # <<<<<<<<<<<<<<
 *         r"""An estimated size, in bytes, of the model's decision states.
 * 
 */
  __pyx_tuple__60 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_decision_state_size, 149, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 149, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":164
 *         return sum(sym.state_size() for sym in self.iter_decisions())
 * 
 *     def disjoint_bit_sets(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_sets):             # <<<<<<<<<<<<<<
 *         """Create a disjoint-sets symbol as a decision variable.
 * 
 */
  __pyx_tuple__62 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_primary_set_size, __pyx_n_s_num_disjoint_sets, __pyx_n_s_DisjointBitSets, __pyx_n_s_DisjointBitSet, __pyx_n_s_main_2, __pyx_n_s_sets, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_disjoint_bit_sets, 164, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 164, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":199
 *         return main, sets
 * 
 *     def disjoint_lists(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_lists):             # <<<<<<<<<<<<<<
 *         """Create a disjoint-lists symbol as a decision variable.
 * 
 */
  __pyx_tuple__64 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_primary_set_size, __pyx_n_s_num_disjoint_lists, __pyx_n_s_DisjointLists, __pyx_n_s_DisjointList, __pyx_n_s_main_2, __pyx_n_s_lists, __pyx_n_s_i); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_disjoint_lists, 199, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 199, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":230
 *         return main, lists
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_file(cls, file, *,
 *                   check_header = True,
 */
  __pyx_tuple__66 = PyTuple_Pack(31, __pyx_n_s_cls, __pyx_n_s_file, __pyx_n_s_check_header, __pyx_n_s_f, __pyx_n_s_prefix, __pyx_n_s_read_prefix, __pyx_n_s_version, __pyx_n_s_header_len, __pyx_n_s_header_data_2, __pyx_n_s_model, __pyx_n_s_zf, __pyx_n_s_model_info, __pyx_n_s_num_nodes, __pyx_n_s_fcls, __pyx_n_s_fadj, __pyx_n_s_lineno, __pyx_n_s_classname, __pyx_n_s_adjlist, __pyx_n_s_node_id, __pyx_n_s_predecessor_ids, __pyx_n_s_predecessors, __pyx_n_s_pid, __pyx_n_s_directory, __pyx_n_s_objective_buff, __pyx_n_s_objective_id, __pyx_n_s_cid, __pyx_n_s_num_states, __pyx_n_s_num_decisions, __pyx_n_s_node, __pyx_n_s_i, __pyx_n_s_expected); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 1, 31, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_from_file, 230, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 230, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":331
 *         return model
 * 
 *     def integer(self, shape=None, lower_bound=None, upper_bound=None):             # <<<<<<<<<<<<<<
 *         r"""Create an integer symbol as a decision variable.
 * 
 */
  __pyx_tuple__68 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_shape, __pyx_n_s_lower_bound, __pyx_n_s_upper_bound, __pyx_n_s_IntegerVariable); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_integer, 331, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 331, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":357
 *         return IntegerVariable(self, shape, lower_bound, upper_bound)
 * 
 *     def _header_data(self, *, only_decision, max_num_states=float('inf')):             # <<<<<<<<<<<<<<
 *         """The header data associated with the model (but not the states)."""
 *         num_nodes = self.num_decisions() if only_decision else self.num_nodes()
 */
  __pyx_tuple__70 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_only_decision, __pyx_n_s_max_num_states, __pyx_n_s_num_nodes, __pyx_n_s_num_states, __pyx_n_s_decision_state_size, __pyx_n_s_state_size); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_header_data, 357, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 357, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":372
 *         )
 * 
 *     def into_file(self, file, *,             # <<<<<<<<<<<<<<
 *                   Py_ssize_t max_num_states = 0,
 *                   bool only_decision = False,
 */
  __pyx_tuple__72 = PyTuple_Pack(19, __pyx_n_s_self, __pyx_n_s_file, __pyx_n_s_max_num_states, __pyx_n_s_only_decision, __pyx_n_s_f, __pyx_n_s_version, __pyx_n_s_model_info, __pyx_n_s_num_states, __pyx_n_s_encoder, __pyx_n_s_header_data_2, __pyx_n_s_padding, __pyx_n_s_zf, __pyx_n_s_stop, __pyx_n_s_node, __pyx_n_s_pred, __pyx_n_s_directory, __pyx_n_s_constraints, __pyx_n_s_c, __pyx_n_s_i); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 19, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_into_file, 372, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 372, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":497
 *                         node._state_into_zipfile(zf, directory, i)
 * 
 *     cpdef bool is_locked(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Lock status of the model.
 * 
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_is_locked, 497, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 497, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":507
 *         return self._lock_count > 0
 * 
 *     def iter_constraints(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all constraints in the model.
 * 
 */
  __pyx_tuple__76 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_i); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_iter_constraints, 507, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 507, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":523
 *             yield symbol_from_ptr(self, self._graph.constraints()[i])
 * 
 *     def iter_decisions(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all decision variables in the model.
 * 
 */
  __pyx_tuple__77 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_num_decisions, __pyx_n_s_seen_decisions, __pyx_n_s_symbol); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_iter_decisions, 523, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 523, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":550
 *                     return
 * 
 *     def iter_symbols(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all symbols in the model.
 * 
 */
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_iter_symbols, 550, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 550, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":565
 *             yield symbol_from_ptr(self, self._graph.nodes()[i].get())
 * 
 *     def list(self, n : int):             # <<<<<<<<<<<<<<
 *         """Create a list symbol as a decision variable.
 * 
 */
  __pyx_tuple__78 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_n, __pyx_n_s_ListVariable); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_list, 565, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 565, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":584
 *         return ListVariable(self, n)
 * 
 *     def lock(self):             # <<<<<<<<<<<<<<
 *         """Lock the model.
 * 
 */
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_lock, 584, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(0, 584, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":628
 *         return locked(self)
 * 
 *     def minimize(self, ArraySymbol value):             # <<<<<<<<<<<<<<
 *         """Set the objective value to minimize.
 * 
 */
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_minimize, 628, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 628, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":660
 *         self.objective = value
 * 
 *     cpdef Py_ssize_t num_constraints(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Number of constraints in the model.
 * 
 */
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_num_constraints, 660, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 660, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":678
 *         return self._graph.num_constraints()
 * 
 *     cpdef Py_ssize_t num_decisions(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Number of independent decision nodes in the model.
 * 
 */
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_num_decisions, 678, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 678, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":697
 *         return self._graph.num_decisions()
 * 
 *     cpdef Py_ssize_t num_nodes(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Number of nodes in the directed acyclic graph for the model.
 * 
 */
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_num_nodes, 697, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(0, 697, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":717
 *         return self._graph.num_nodes()
 * 
 *     def num_symbols(self):             # <<<<<<<<<<<<<<
 *         """Number of symbols tracked by the model.
 * 
 */
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_num_symbols, 717, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 717, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":740
 *         return self.num_nodes()
 * 
 *     def quadratic_model(self, ArraySymbol x, quadratic, linear=None):             # <<<<<<<<<<<<<<
 *         """Create a quadratic model from an array and a quadratic model.
 * 
 */
  __pyx_tuple__86 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_quadratic, __pyx_n_s_linear, __pyx_n_s_QuadraticModel); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_quadratic_model, 740, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 740, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":767
 * 
 * 
 *     def set(self, Py_ssize_t n, Py_ssize_t min_size = 0, max_size = None):             # <<<<<<<<<<<<<<
 *         """Create a set symbol as a decision variable.
 * 
 */
  __pyx_tuple__88 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_n, __pyx_n_s_min_size, __pyx_n_s_max_size, __pyx_n_s_SetVariable); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_set, 767, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 767, __pyx_L1_error)
  __pyx_tuple__90 = PyTuple_Pack(2, __pyx_int_0, Py_None); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);

  /* "dwave/optimization/model.pyx":789
 *         return SetVariable(self, n, min_size, n if max_size is None else max_size)
 * 
 *     def state_size(self):             # <<<<<<<<<<<<<<
 *         """An estimate of the size, in bytes, of all states in the model.
 * 
 */
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_state_size, 789, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(0, 789, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":806
 *         return sum(sym.state_size() for sym in self.iter_symbols())
 * 
 *     def to_file(self, **kwargs):             # <<<<<<<<<<<<<<
 *         """Serialize the model to a new file-like object.
 * 
 */
  __pyx_tuple__92 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_kwargs, __pyx_n_s_file); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_to_file, 806, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 806, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":817
 *         return file
 * 
 *     def to_networkx(self):             # <<<<<<<<<<<<<<
 *         """Convert the model to a NetworkX graph.
 * 
 */
  __pyx_tuple__94 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_re, __pyx_n_s_networkx, __pyx_n_s_G, __pyx_n_s_ptr, __pyx_n_s_i, __pyx_n_s_match, __pyx_n_s_u, __pyx_n_s_j, __pyx_n_s_pptr, __pyx_n_s_v); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_to_networkx, 817, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 817, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":870
 *         return G
 * 
 *     def unlock(self):             # <<<<<<<<<<<<<<
 *         """Release a lock, decrementing the lock count.
 * 
 */
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_unlock, 870, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 870, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__98 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":967
 *         self._states.swap(states)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         """Clear any saved states.
 * 
 */
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_clear, 967, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(0, 967, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1004
 *         return move(states)
 * 
 *     def from_file(self, file, *, bool replace = True, check_header = True):             # <<<<<<<<<<<<<<
 *         """Construct states from the given file.
 * 
 */
  __pyx_tuple__101 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_file, __pyx_n_s_replace, __pyx_n_s_check_header, __pyx_n_s_model, __pyx_n_s_n0, __pyx_n_s_n1); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__101, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_from_file, 1004, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(0, 1004, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1037
 *         self.attach_states(move(model.states.detach_states()))
 * 
 *     def from_future(self, future, result_hook):             # <<<<<<<<<<<<<<
 *         """Populate the states from the result of a future computation.
 * 
 */
  __pyx_tuple__103 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_future, __pyx_n_s_result_hook); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__103, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_from_future, 1037, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(0, 1037, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1054
 *         self._result_hook = result_hook
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Initialize any uninitialized states."""
 *         self.resolve()
 */
  __pyx_tuple__105 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_model, __pyx_n_s_i); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_initialize, 1054, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(0, 1054, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1066
 *             model._graph.initialize_state(self._states[i])
 * 
 *     def into_file(self, file):             # <<<<<<<<<<<<<<
 *         """Serialize the states into an existing  file.
 * 
 */
  __pyx_tuple__107 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_file); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_into_file, 1066, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(0, 1066, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1088
 *         return m
 * 
 *     def resize(self, Py_ssize_t n):             # <<<<<<<<<<<<<<
 *         """Resize the number of states.
 * 
 */
  __pyx_tuple__109 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_n); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__109, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_resize, 1088, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(0, 1088, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1118
 *         self._states.resize(n)
 * 
 *     cpdef resolve(self):             # <<<<<<<<<<<<<<
 *         """Block until states are retrieved from any pending future computations.
 * 
 */
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_resolve, 1118, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 1118, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1135
 *             result_hook(self._model(), future)
 * 
 *     cpdef Py_ssize_t size(self) except -1:             # <<<<<<<<<<<<<<
 *         """Number of model states.
 * 
 */
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_size, 1135, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(0, 1135, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1151
 *         return self._states.size()
 * 
 *     def to_file(self):             # <<<<<<<<<<<<<<
 *         """Serialize the states to a new file-like object."""
 *         self.resolve()
 */
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_to_file, 1151, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(0, 1151, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1174
 *         self.expired_ptr = node_ptr.expired_ptr()
 * 
 *     def equals(self, other):             # <<<<<<<<<<<<<<
 *         """Compare whether two nodes are identical.
 * 
 */
  __pyx_tuple__116 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_other, __pyx_n_s_maybe, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_equals, 1174, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 1174, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1191
 *         return all(p.equals(q) for p, q in zip(self.iter_predecessors(), other.iter_predecessors()))
 * 
 *     cpdef bool expired(self) noexcept:             # <<<<<<<<<<<<<<
 *         return deref(self.expired_ptr)
 * 
 */
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_expired, 1191, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(0, 1191, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1194
 *         return deref(self.expired_ptr)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def _from_zipfile(cls, zf, directory, Model model, predecessors):
 *         """Construct a node from a compressed file.
 */
  __pyx_tuple__119 = PyTuple_Pack(5, __pyx_n_s_cls, __pyx_n_s_zf, __pyx_n_s_directory, __pyx_n_s_model, __pyx_n_s_predecessors); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);
  __pyx_codeobj__120 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__119, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_from_zipfile, 1194, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__120)) __PYX_ERR(0, 1194, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1217
 *         return cls(*predecessors)
 * 
 *     def has_state(self, Py_ssize_t index = 0):             # <<<<<<<<<<<<<<
 *         """Return the initialization status of the indexed state.
 * 
 */
  __pyx_tuple__121 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_index, __pyx_n_s_num_states); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__121, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_has_state, 1217, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __pyx_tuple__123 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);

  /* "dwave/optimization/model.pyx":1248
 *         return <bool>(self.model.states._states[index][self.node_ptr.topological_index()])
 * 
 *     def _into_zipfile(self, zf, directory):             # <<<<<<<<<<<<<<
 *         """Store node-specific information to a compressed file.
 * 
 */
  __pyx_tuple__124 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_zf, __pyx_n_s_directory); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_into_zipfile, 1248, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(0, 1248, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1266
 *         pass
 * 
 *     def iter_predecessors(self):             # <<<<<<<<<<<<<<
 *         """Iterate over a node's predecessors in the model.
 * 
 */
  __pyx_tuple__126 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_it, __pyx_n_s_end); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_iter_predecessors, 1266, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 1266, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1289
 *             inc(it)
 * 
 *     def iter_successors(self):             # <<<<<<<<<<<<<<
 *         """Iterate over a node's successors in the model.
 * 
 */
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_iter_successors, 1289, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 1289, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1311
 *             inc(it)
 * 
 *     def maybe_equals(self, other):             # <<<<<<<<<<<<<<
 *         """Compare to another node.
 * 
 */
  __pyx_tuple__127 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_other, __pyx_n_s_NOT, __pyx_n_s_MAYBE, __pyx_n_s_DEFINITELY, __pyx_n_s_rhs, __pyx_n_s_p, __pyx_n_s_q); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);
  __pyx_codeobj__128 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__127, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_maybe_equals, 1311, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__128)) __PYX_ERR(0, 1311, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1356
 *         return MAYBE
 * 
 *     def reset_state(self, Py_ssize_t index):             # <<<<<<<<<<<<<<
 *         """Reset the state of a node and any successor symbols.
 * 
 */
  __pyx_tuple__129 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_index); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);
  __pyx_codeobj__130 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__129, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_reset_state, 1356, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__130)) __PYX_ERR(0, 1356, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1400
 *         self.model._graph.recursive_reset(self.model.states._states[index], self.node_ptr)
 * 
 *     def shares_memory(self, other):             # <<<<<<<<<<<<<<
 *         """Determine if two symbols share memory.
 * 
 */
  __pyx_tuple__131 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_other, __pyx_n_s_rhs); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  __pyx_codeobj__132 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__131, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_shares_memory, 1400, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__132)) __PYX_ERR(0, 1400, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1418
 *             )
 * 
 *     def _state_from_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         # unlike node serialization, by default we raise an error because if
 *         # this is being called, it must have a state
 */
  __pyx_tuple__133 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_zf, __pyx_n_s_directory, __pyx_n_s_state_index); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);
  __pyx_codeobj__134 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__133, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_state_from_zipfile, 1418, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__134)) __PYX_ERR(0, 1418, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1423
 *         raise NotImplementedError(f"{type(self).__name__} has not implemented state deserialization")
 * 
 *     def _state_into_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         # unlike node serialization, by default we raise an error because if
 *         # this is being called, it must have a state
 */
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__133, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_state_into_zipfile, 1423, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(0, 1423, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1428
 *         raise NotImplementedError(f"{type(self).__name__} has not implemented state serialization")
 * 
 *     def state_size(self):             # <<<<<<<<<<<<<<
 *         """Return an estimated size, in bytes, of the node's state.
 * 
 */
  __pyx_codeobj__136 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_state_size, 1428, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__136)) __PYX_ERR(0, 1428, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1444
 *         return 0
 * 
 *     def topological_index(self):             # <<<<<<<<<<<<<<
 *         """Topological index of the node.
 * 
 */
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__129, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_topological_index, 1444, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(0, 1444, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__138 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__138)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1472
 * # various ways if it ever becomes a problem.
 * _node_subclasses = dict()
 * def _register_node_subclasses():             # <<<<<<<<<<<<<<
 *     def register(cls):
 *         if cls.__name__ in _node_subclasses:
 */
  __pyx_tuple__140 = PyTuple_Pack(3, __pyx_n_s_register, __pyx_n_s_register, __pyx_n_s_cls); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__140, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_register_node_subclasses, 1472, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(0, 1472, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1488
 * 
 * 
 * def _split_indices(indices):             # <<<<<<<<<<<<<<
 *     """Given a set of indices, made up of slices, integers, and array symbols,
 *     create two consecutive indexing operations that can be passed to
 */
  __pyx_tuple__142 = PyTuple_Pack(4, __pyx_n_s_indices, __pyx_n_s_basic_indices, __pyx_n_s_advanced_indices, __pyx_n_s_index); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(0, 1488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_split_indices, 1488, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(0, 1488, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1618
 *         return Subtract(self, rhs)
 * 
 *     def all(self):             # <<<<<<<<<<<<<<
 *         """Create an :class:`~dwave.optimization.symbols.All` symbol.
 * 
 */
  __pyx_tuple__144 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_All); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(0, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__144, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_all_2, 1618, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(0, 1618, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1626
 *         return All(self)
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Max` symbol.
 * 
 */
  __pyx_tuple__146 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_Max); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__146, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_max, 1626, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(0, 1626, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1634
 *         return Max(self)
 * 
 *     def maybe_equals(self, other):             # <<<<<<<<<<<<<<
 *         """Compare to another symbol.
 * 
 */
  __pyx_tuple__148 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_other, __pyx_n_s_maybe, __pyx_n_s_NOT, __pyx_n_s_MAYBE); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_maybe_equals, 1634, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(0, 1634, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1675
 *         return MAYBE
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Min` symbol.
 * 
 */
  __pyx_tuple__150 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_Min); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_min, 1675, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(0, 1675, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1683
 *         return Min(self)
 * 
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         """Return the number of dimensions for a symbol."""
 *         return self.array_ptr.ndim()
 */
  __pyx_codeobj__152 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_ndim, 1683, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__152)) __PYX_ERR(0, 1683, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1687
 *         return self.array_ptr.ndim()
 * 
 *     def prod(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Prod` symbol.
 * 
 */
  __pyx_tuple__153 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_Prod); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(0, 1687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);
  __pyx_codeobj__154 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__153, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_prod, 1687, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__154)) __PYX_ERR(0, 1687, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1695
 *         return Prod(self)
 * 
 *     def reshape(self, *shape):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Reshape` symbol.
 * 
 */
  __pyx_tuple__155 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_shape, __pyx_n_s_Reshape); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(0, 1695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__155, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_reshape, 1695, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(0, 1695, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1722
 *             return Reshape(self, shape[0])
 * 
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         """Return the shape of the symbol.
 * 
 */
  __pyx_tuple__157 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_shape, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_shape, 1722, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) __PYX_ERR(0, 1722, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1740
 *         return tuple(shape[i] for i in range(shape.size()))
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         r"""Return the number of elements in the symbol.
 * 
 */
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_size, 1740, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) __PYX_ERR(0, 1740, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1757
 *         return self.array_ptr.size()
 * 
 *     def state(self, Py_ssize_t index = 0, *, bool copy = True):             # <<<<<<<<<<<<<<
 *         """Return the state of the node.
 * 
 */
  __pyx_tuple__160 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_index, __pyx_n_s_copy, __pyx_n_s_num_states); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(0, 1757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);
  __pyx_codeobj__161 = (PyObject*)__Pyx_PyCode_New(2, 0, 1, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__160, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_state, 1757, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__161)) __PYX_ERR(0, 1757, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1801
 *         return np.array(StateView(self, index), copy=copy)
 * 
 *     def _state_from_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         fname = directory + "array.npy"
 * 
 */
  __pyx_tuple__162 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_zf, __pyx_n_s_directory, __pyx_n_s_state_index, __pyx_n_s_fname, __pyx_n_s_zipinfo, __pyx_n_s_f, __pyx_n_s_state); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(0, 1801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);
  __pyx_codeobj__163 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__162, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_state_from_zipfile, 1801, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__163)) __PYX_ERR(0, 1801, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1821
 *         self.set_state(state_index, state)
 * 
 *     def _state_into_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         # do this first to get any potential error messages out of the way
 *         # todo: use a view not a copy
 */
  __pyx_tuple__164 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_zf, __pyx_n_s_directory, __pyx_n_s_state_index, __pyx_n_s_array, __pyx_n_s_f); if (unlikely(!__pyx_tuple__164)) __PYX_ERR(0, 1821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__164);
  __Pyx_GIVEREF(__pyx_tuple__164);
  __pyx_codeobj__165 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__164, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_state_into_zipfile, 1821, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__165)) __PYX_ERR(0, 1821, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1830
 *             np.save(f, array, allow_pickle=False)
 * 
 *     def state_size(self):             # <<<<<<<<<<<<<<
 *         """Return an estimated byte-size of the state.
 * 
 */
  __pyx_tuple__166 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_sizeinfo); if (unlikely(!__pyx_tuple__166)) __PYX_ERR(0, 1830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);
  __pyx_codeobj__167 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__166, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_state_size, 1830, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__167)) __PYX_ERR(0, 1830, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1860
 *         return sizeinfo.max.value() * self.array_ptr.itemsize()
 * 
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         """Return the stride length, in bytes, for traversing a symbol.
 * 
 */
  __pyx_tuple__168 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_strides, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(0, 1860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);
  __pyx_codeobj__169 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__168, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_strides, 1860, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__169)) __PYX_ERR(0, 1860, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":1879
 *         return tuple(strides[i] for i in range(strides.size()))
 * 
 *     def sum(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Sum` symbol.
 * 
 */
  __pyx_tuple__170 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_Sum); if (unlikely(!__pyx_tuple__170)) __PYX_ERR(0, 1879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__170);
  __Pyx_GIVEREF(__pyx_tuple__170);
  __pyx_codeobj__171 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__170, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dwave_optimization_model_pyx, __pyx_n_s_sum, 1879, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__171)) __PYX_ERR(0, 1879, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__172 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__172)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__173 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__173)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__174 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__174)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);
  __pyx_codeobj__175 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__174, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__175)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_StateView, (type(self), 0x60fdced, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_StateView__set_state(self, __pyx_state)
 */
  __pyx_codeobj__176 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__176)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_StateView(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__177 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);
  __pyx_codeobj__178 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__177, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_StateView, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__178)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4938760 = PyInt_FromLong(4938760L); if (unlikely(!__pyx_int_4938760)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_58930323 = PyInt_FromLong(58930323L); if (unlikely(!__pyx_int_58930323)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_101702893 = PyInt_FromLong(101702893L); if (unlikely(!__pyx_int_101702893)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5dwave_12optimization_5model_Model = &__pyx_vtable_5dwave_12optimization_5model_Model;
  __pyx_vtable_5dwave_12optimization_5model_Model.is_locked = (bool (*)(struct __pyx_obj_5dwave_12optimization_5model_Model *, int __pyx_skip_dispatch))__pyx_f_5dwave_12optimization_5model_5Model_is_locked;
  __pyx_vtable_5dwave_12optimization_5model_Model.num_decisions = (Py_ssize_t (*)(struct __pyx_obj_5dwave_12optimization_5model_Model *, int __pyx_skip_dispatch))__pyx_f_5dwave_12optimization_5model_5Model_num_decisions;
  __pyx_vtable_5dwave_12optimization_5model_Model.num_nodes = (Py_ssize_t (*)(struct __pyx_obj_5dwave_12optimization_5model_Model *, int __pyx_skip_dispatch))__pyx_f_5dwave_12optimization_5model_5Model_num_nodes;
  __pyx_vtable_5dwave_12optimization_5model_Model.num_constraints = (Py_ssize_t (*)(struct __pyx_obj_5dwave_12optimization_5model_Model *, int __pyx_skip_dispatch))__pyx_f_5dwave_12optimization_5model_5Model_num_constraints;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model_Model = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model_Model_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model_Model)) __PYX_ERR(0, 62, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model_Model_spec, __pyx_ptype_5dwave_12optimization_5model_Model) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model_Model = &__pyx_type_5dwave_12optimization_5model_Model;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model_Model) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model_Model->tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_vtabptr_5dwave_12optimization_5model_Model) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_5dwave_12optimization_5model_Model) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Model, (PyObject *) __pyx_ptype_5dwave_12optimization_5model_Model) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  if (__pyx_ptype_5dwave_12optimization_5model_Model->tp_weaklistoffset == 0) __pyx_ptype_5dwave_12optimization_5model_Model->tp_weaklistoffset = offsetof(struct __pyx_obj_5dwave_12optimization_5model_Model, __weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5dwave_12optimization_5model_Model) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  #endif
  __pyx_vtabptr_5dwave_12optimization_5model_States = &__pyx_vtable_5dwave_12optimization_5model_States;
  __pyx_vtable_5dwave_12optimization_5model_States.attach_states = (void (*)(struct __pyx_obj_5dwave_12optimization_5model_States *, std::vector<dwave::optimization::State> ))__pyx_f_5dwave_12optimization_5model_6States_attach_states;
  __pyx_vtable_5dwave_12optimization_5model_States.detach_states = (std::vector<dwave::optimization::State>  (*)(struct __pyx_obj_5dwave_12optimization_5model_States *))__pyx_f_5dwave_12optimization_5model_6States_detach_states;
  __pyx_vtable_5dwave_12optimization_5model_States.resolve = (PyObject *(*)(struct __pyx_obj_5dwave_12optimization_5model_States *, int __pyx_skip_dispatch))__pyx_f_5dwave_12optimization_5model_6States_resolve;
  __pyx_vtable_5dwave_12optimization_5model_States.size = (Py_ssize_t (*)(struct __pyx_obj_5dwave_12optimization_5model_States *, int __pyx_skip_dispatch))__pyx_f_5dwave_12optimization_5model_6States_size;
  __pyx_vtable_5dwave_12optimization_5model_States._model = (struct __pyx_obj_5dwave_12optimization_5model_Model *(*)(struct __pyx_obj_5dwave_12optimization_5model_States *))__pyx_f_5dwave_12optimization_5model_6States__model;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model_States = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model_States_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model_States)) __PYX_ERR(0, 893, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model_States_spec, __pyx_ptype_5dwave_12optimization_5model_States) < 0) __PYX_ERR(0, 893, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model_States = &__pyx_type_5dwave_12optimization_5model_States;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model_States) < 0) __PYX_ERR(0, 893, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model_States->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model_States->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model_States->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model_States->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_5dwave_12optimization_5model_States, "__len__"); if (unlikely(!wrapper)) __PYX_ERR(0, 893, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_5dwave_12optimization_5model_6States_2__len__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5dwave_12optimization_5model_6States_2__len__.doc = __pyx_doc_5dwave_12optimization_5model_6States_2__len__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5dwave_12optimization_5model_6States_2__len__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_5dwave_12optimization_5model_States, __pyx_vtabptr_5dwave_12optimization_5model_States) < 0) __PYX_ERR(0, 893, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_5dwave_12optimization_5model_States) < 0) __PYX_ERR(0, 893, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_States, (PyObject *) __pyx_ptype_5dwave_12optimization_5model_States) < 0) __PYX_ERR(0, 893, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5dwave_12optimization_5model_States) < 0) __PYX_ERR(0, 893, __pyx_L1_error)
  #endif
  __pyx_vtabptr_5dwave_12optimization_5model_Symbol = &__pyx_vtable_5dwave_12optimization_5model_Symbol;
  __pyx_vtable_5dwave_12optimization_5model_Symbol.initialize_node = (void (*)(struct __pyx_obj_5dwave_12optimization_5model_Symbol *, struct __pyx_obj_5dwave_12optimization_5model_Model *, dwave::optimization::Node *))__pyx_f_5dwave_12optimization_5model_6Symbol_initialize_node;
  __pyx_vtable_5dwave_12optimization_5model_Symbol.expired = (bool (*)(struct __pyx_obj_5dwave_12optimization_5model_Symbol *, int __pyx_skip_dispatch))__pyx_f_5dwave_12optimization_5model_6Symbol_expired;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model_Symbol = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model_Symbol_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model_Symbol)) __PYX_ERR(0, 1157, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model_Symbol_spec, __pyx_ptype_5dwave_12optimization_5model_Symbol) < 0) __PYX_ERR(0, 1157, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model_Symbol = &__pyx_type_5dwave_12optimization_5model_Symbol;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model_Symbol) < 0) __PYX_ERR(0, 1157, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model_Symbol->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model_Symbol->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model_Symbol->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model_Symbol->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_vtabptr_5dwave_12optimization_5model_Symbol) < 0) __PYX_ERR(0, 1157, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_5dwave_12optimization_5model_Symbol) < 0) __PYX_ERR(0, 1157, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Symbol, (PyObject *) __pyx_ptype_5dwave_12optimization_5model_Symbol) < 0) __PYX_ERR(0, 1157, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5dwave_12optimization_5model_Symbol) < 0) __PYX_ERR(0, 1157, __pyx_L1_error)
  #endif
  __pyx_vtabptr_5dwave_12optimization_5model_ArraySymbol = &__pyx_vtable_5dwave_12optimization_5model_ArraySymbol;
  __pyx_vtable_5dwave_12optimization_5model_ArraySymbol.__pyx_base = *__pyx_vtabptr_5dwave_12optimization_5model_Symbol;
  __pyx_vtable_5dwave_12optimization_5model_ArraySymbol.initialize_array = (void (*)(struct __pyx_obj_5dwave_12optimization_5model_ArraySymbol *, dwave::optimization::Array *))__pyx_f_5dwave_12optimization_5model_11ArraySymbol_initialize_array;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5dwave_12optimization_5model_ArraySymbol = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model_ArraySymbol_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5dwave_12optimization_5model_ArraySymbol)) __PYX_ERR(0, 1530, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model_ArraySymbol_spec, __pyx_ptype_5dwave_12optimization_5model_ArraySymbol) < 0) __PYX_ERR(0, 1530, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model_ArraySymbol = &__pyx_type_5dwave_12optimization_5model_ArraySymbol;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5dwave_12optimization_5model_ArraySymbol->tp_base = __pyx_ptype_5dwave_12optimization_5model_Symbol;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol) < 0) __PYX_ERR(0, 1530, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model_ArraySymbol->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model_ArraySymbol->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model_ArraySymbol->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model_ArraySymbol->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_vtabptr_5dwave_12optimization_5model_ArraySymbol) < 0) __PYX_ERR(0, 1530, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol) < 0) __PYX_ERR(0, 1530, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ArraySymbol, (PyObject *) __pyx_ptype_5dwave_12optimization_5model_ArraySymbol) < 0) __PYX_ERR(0, 1530, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5dwave_12optimization_5model_ArraySymbol) < 0) __PYX_ERR(0, 1530, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model_StateView = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model_StateView_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model_StateView)) __PYX_ERR(0, 1888, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5dwave_12optimization_5model_StateView->tp_as_buffer = &__pyx_tp_as_buffer_StateView;
  #elif defined(Py_bf_getbuffer) && defined(Py_bf_releasebuffer)
  /* PY_VERSION_HEX >= 0x03090000 || Py_LIMITED_API >= 0x030B0000 */
  #elif defined(_MSC_VER)
  #pragma message ("The buffer protocol is not supported in the Limited C-API < 3.11.")
  #else
  #warning "The buffer protocol is not supported in the Limited C-API < 3.11."
  #endif
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model_StateView_spec, __pyx_ptype_5dwave_12optimization_5model_StateView) < 0) __PYX_ERR(0, 1888, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model_StateView = &__pyx_type_5dwave_12optimization_5model_StateView;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model_StateView) < 0) __PYX_ERR(0, 1888, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model_StateView->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model_StateView->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model_StateView->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model_StateView->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StateView, (PyObject *) __pyx_ptype_5dwave_12optimization_5model_StateView) < 0) __PYX_ERR(0, 1888, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5dwave_12optimization_5model_StateView) < 0) __PYX_ERR(0, 1888, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct__locked_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked)) __PYX_ERR(0, 53, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct__locked_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct__locked;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct__locked->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr)) __PYX_ERR(0, 162, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_1_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets)) __PYX_ERR(0, 164, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_2_disjoint_bit_sets->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr)) __PYX_ERR(0, 196, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_3_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints)) __PYX_ERR(0, 507, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_4_iter_constraints->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions)) __PYX_ERR(0, 523, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions) < 0) __PYX_ERR(0, 523, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions) < 0) __PYX_ERR(0, 523, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_5_iter_decisions->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols)) __PYX_ERR(0, 550, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols) < 0) __PYX_ERR(0, 550, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols) < 0) __PYX_ERR(0, 550, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_6_iter_symbols->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr)) __PYX_ERR(0, 804, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr) < 0) __PYX_ERR(0, 804, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr) < 0) __PYX_ERR(0, 804, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_7_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr)) __PYX_ERR(0, 1189, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr) < 0) __PYX_ERR(0, 1189, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr) < 0) __PYX_ERR(0, 1189, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_8_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors)) __PYX_ERR(0, 1266, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors) < 0) __PYX_ERR(0, 1266, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors) < 0) __PYX_ERR(0, 1266, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_9_iter_predecessors->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors)) __PYX_ERR(0, 1289, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors) < 0) __PYX_ERR(0, 1289, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors) < 0) __PYX_ERR(0, 1289, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_10_iter_successors->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses)) __PYX_ERR(0, 1472, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses) < 0) __PYX_ERR(0, 1472, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses) < 0) __PYX_ERR(0, 1472, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_11__register_node_subclasses->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr)) __PYX_ERR(0, 1563, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr) < 0) __PYX_ERR(0, 1563, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr) < 0) __PYX_ERR(0, 1563, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_12_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr)) __PYX_ERR(0, 1569, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr) < 0) __PYX_ERR(0, 1569, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr) < 0) __PYX_ERR(0, 1569, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_13_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr)) __PYX_ERR(0, 1576, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr) < 0) __PYX_ERR(0, 1576, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr) < 0) __PYX_ERR(0, 1576, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_14_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_15_shape_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape)) __PYX_ERR(0, 1722, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_15_shape_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape) < 0) __PYX_ERR(0, 1722, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_15_shape;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape) < 0) __PYX_ERR(0, 1722, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_15_shape->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr)) __PYX_ERR(0, 1738, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr) < 0) __PYX_ERR(0, 1738, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr) < 0) __PYX_ERR(0, 1738, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_16_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_17_strides_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides)) __PYX_ERR(0, 1860, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_17_strides_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides) < 0) __PYX_ERR(0, 1860, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_17_strides;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides) < 0) __PYX_ERR(0, 1860, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_17_strides->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr)) __PYX_ERR(0, 1877, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr_spec, __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr) < 0) __PYX_ERR(0, 1877, __pyx_L1_error)
  #else
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr = &__pyx_type_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr) < 0) __PYX_ERR(0, 1877, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr->tp_dictoffset && __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5dwave_12optimization_5model___pyx_scope_struct_18_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_8(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType_3_0_8(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyBoolObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType_3_0_8(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyComplexObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("dwave.optimization.symbols"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_8(__pyx_t_1, "__pyx_fuse_0symbol_from_ptr", (void (**)(void))&__pyx_fuse_0__pyx_f_5dwave_12optimization_7symbols_symbol_from_ptr, "PyObject *(struct __pyx_obj_5dwave_12optimization_5model_Model *, dwave::optimization::Node *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_8(__pyx_t_1, "__pyx_fuse_1symbol_from_ptr", (void (**)(void))&__pyx_fuse_1__pyx_f_5dwave_12optimization_7symbols_symbol_from_ptr, "PyObject *(struct __pyx_obj_5dwave_12optimization_5model_Model *, dwave::optimization::Array *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_model(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_model},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "model",
      __pyx_k_Nonlinear_models_are_especially, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initmodel(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initmodel(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_model(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_model(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_model(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'model' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("model", __pyx_methods, __pyx_k_Nonlinear_models_are_especially, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "model" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_model(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_dwave__optimization__model) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "dwave.optimization.model")) {
      if (unlikely((PyDict_SetItemString(modules, "dwave.optimization.model", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely((__Pyx_modinit_function_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "dwave/optimization/model.pyx":26
 * """
 * 
 * import contextlib             # <<<<<<<<<<<<<<
 * import collections.abc
 * import functools
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_contextlib, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_contextlib, __pyx_t_2) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":27
 * 
 * import contextlib
 * import collections.abc             # <<<<<<<<<<<<<<
 * import functools
 * import itertools
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections_abc, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collections, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":28
 * import contextlib
 * import collections.abc
 * import functools             # <<<<<<<<<<<<<<
 * import itertools
 * import json
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_functools, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_functools, __pyx_t_2) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":29
 * import collections.abc
 * import functools
 * import itertools             # <<<<<<<<<<<<<<
 * import json
 * import numbers
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_itertools, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itertools, __pyx_t_2) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":30
 * import functools
 * import itertools
 * import json             # <<<<<<<<<<<<<<
 * import numbers
 * import operator
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_json, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_json, __pyx_t_2) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":31
 * import itertools
 * import json
 * import numbers             # <<<<<<<<<<<<<<
 * import operator
 * import struct
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_numbers, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numbers, __pyx_t_2) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":32
 * import json
 * import numbers
 * import operator             # <<<<<<<<<<<<<<
 * import struct
 * import tempfile
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_operator, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_operator, __pyx_t_2) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":33
 * import numbers
 * import operator
 * import struct             # <<<<<<<<<<<<<<
 * import tempfile
 * import weakref
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_struct, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_struct, __pyx_t_2) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":34
 * import operator
 * import struct
 * import tempfile             # <<<<<<<<<<<<<<
 * import weakref
 * import zipfile
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_tempfile, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tempfile, __pyx_t_2) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":35
 * import struct
 * import tempfile
 * import weakref             # <<<<<<<<<<<<<<
 * import zipfile
 * 
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_weakref, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weakref, __pyx_t_2) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":36
 * import tempfile
 * import weakref
 * import zipfile             # <<<<<<<<<<<<<<
 * 
 * import numpy as np
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_zipfile, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_zipfile, __pyx_t_2) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":38
 * import zipfile
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * from cpython cimport Py_buffer
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_numpy, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":50
 * 
 * 
 * __all__ = ["Model"]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_Model);
  __Pyx_GIVEREF(__pyx_n_u_Model);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_Model)) __PYX_ERR(0, 50, __pyx_L1_error);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_2) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":53
 * 
 * 
 * @contextlib.contextmanager             # <<<<<<<<<<<<<<
 * def locked(model):
 *     """Context manager that hold a locked model and unlocks it when the context is exited."""
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_contextlib); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_contextmanager); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_1locked, 0, __pyx_n_s_locked, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj_)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_locked, __pyx_t_4) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":87
 *         self._data_sources = []
 * 
 *     def add_constraint(self, ArraySymbol value):             # <<<<<<<<<<<<<<
 *         """Add a constraint to the model.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_3add_constraint, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_add_constraint, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_add_constraint, __pyx_t_4) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":108
 *         self._graph.add_constraint(value.array_ptr)
 * 
 *     def binary(self, shape=None):             # <<<<<<<<<<<<<<
 *         r"""Create a binary symbol as a decision variable.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_5binary, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_binary, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__57);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_binary, __pyx_t_4) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":127
 *         return BinaryVariable(self, shape)
 * 
 *     def constant(self, array_like):             # <<<<<<<<<<<<<<
 *         r"""Create a constant symbol.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_7constant, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_constant, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_constant, __pyx_t_4) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":149
 *         return Constant(self, array_like)
 * 
 *     def decision_state_size(self):             # <<<<<<<<<<<<<<
 *         r"""An estimated size, in bytes, of the model's decision states.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_9decision_state_size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_decision_state_size, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_decision_state_size, __pyx_t_4) < 0) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":164
 *         return sum(sym.state_size() for sym in self.iter_decisions())
 * 
 *     def disjoint_bit_sets(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_sets):             # <<<<<<<<<<<<<<
 *         """Create a disjoint-sets symbol as a decision variable.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_11disjoint_bit_sets, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_disjoint_bit_sets, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_disjoint_bit_sets, __pyx_t_4) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":199
 *         return main, sets
 * 
 *     def disjoint_lists(self, Py_ssize_t primary_set_size, Py_ssize_t num_disjoint_lists):             # <<<<<<<<<<<<<<
 *         """Create a disjoint-lists symbol as a decision variable.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_13disjoint_lists, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_disjoint_lists, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_disjoint_lists, __pyx_t_4) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":230
 *         return main, lists
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_file(cls, file, *,
 *                   check_header = True,
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "dwave/optimization/model.pyx":232
 *     @classmethod
 *     def from_file(cls, file, *,
 *                   check_header = True,             # <<<<<<<<<<<<<<
 *                   ):
 *         """Construct a model from the given file.
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_check_header, Py_True) < 0) __PYX_ERR(0, 230, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":230
 *         return main, lists
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_file(cls, file, *,
 *                   check_header = True,
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_15from_file, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_from_file, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_from_file, __pyx_t_2) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_from_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_from_file, __pyx_t_4) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":331
 *         return model
 * 
 *     def integer(self, shape=None, lower_bound=None, upper_bound=None):             # <<<<<<<<<<<<<<
 *         r"""Create an integer symbol as a decision variable.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_17integer, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_integer, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_integer, __pyx_t_4) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":357
 *         return IntegerVariable(self, shape, lower_bound, upper_bound)
 * 
 *     def _header_data(self, *, only_decision, max_num_states=float('inf')):             # <<<<<<<<<<<<<<
 *         """The header data associated with the model (but not the states)."""
 *         num_nodes = self.num_decisions() if only_decision else self.num_nodes()
 */
  __pyx_t_5 = __Pyx_PyUnicode_AsDouble(__pyx_n_u_inf); if (unlikely(__pyx_t_5 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L1_error)
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_k__16 = __pyx_t_4;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyUnicode_AsDouble(__pyx_n_u_inf); if (unlikely(__pyx_t_5 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_max_num_states, __pyx_t_2) < 0) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_19_header_data, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model__header_data, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_header_data, __pyx_t_2) < 0) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":372
 *         )
 * 
 *     def into_file(self, file, *,             # <<<<<<<<<<<<<<
 *                   Py_ssize_t max_num_states = 0,
 *                   bool only_decision = False,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_max_num_states, __pyx_int_0) < 0) __PYX_ERR(0, 372, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":374
 *     def into_file(self, file, *,
 *                   Py_ssize_t max_num_states = 0,
 *                   bool only_decision = False,             # <<<<<<<<<<<<<<
 *                   ):
 *         """Serialize the model into an existing file.
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_only_decision, Py_False) < 0) __PYX_ERR(0, 372, __pyx_L1_error)

  /* "dwave/optimization/model.pyx":372
 *         )
 * 
 *     def into_file(self, file, *,             # <<<<<<<<<<<<<<
 *                   Py_ssize_t max_num_states = 0,
 *                   bool only_decision = False,
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_21into_file, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_into_file, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_into_file, __pyx_t_4) < 0) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":497
 *                         node._state_into_zipfile(zf, directory, i)
 * 
 *     cpdef bool is_locked(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Lock status of the model.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_23is_locked, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_is_locked, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_is_locked, __pyx_t_4) < 0) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":507
 *         return self._lock_count > 0
 * 
 *     def iter_constraints(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all constraints in the model.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_25iter_constraints, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_iter_constraints, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_iter_constraints, __pyx_t_4) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":523
 *             yield symbol_from_ptr(self, self._graph.constraints()[i])
 * 
 *     def iter_decisions(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all decision variables in the model.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_28iter_decisions, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_iter_decisions, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_iter_decisions, __pyx_t_4) < 0) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":550
 *                     return
 * 
 *     def iter_symbols(self):             # <<<<<<<<<<<<<<
 *         """Iterate over all symbols in the model.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_31iter_symbols, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_iter_symbols, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_iter_symbols, __pyx_t_4) < 0) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":565
 *             yield symbol_from_ptr(self, self._graph.nodes()[i].get())
 * 
 *     def list(self, n : int):             # <<<<<<<<<<<<<<
 *         """Create a list symbol as a decision variable.
 * 
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_n, __pyx_n_s_int) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_34list, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_list, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_list, __pyx_t_2) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":584
 *         return ListVariable(self, n)
 * 
 *     def lock(self):             # <<<<<<<<<<<<<<
 *         """Lock the model.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_36lock, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_lock, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_lock, __pyx_t_2) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":628
 *         return locked(self)
 * 
 *     def minimize(self, ArraySymbol value):             # <<<<<<<<<<<<<<
 *         """Set the objective value to minimize.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_38minimize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_minimize, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_minimize, __pyx_t_2) < 0) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":660
 *         self.objective = value
 * 
 *     cpdef Py_ssize_t num_constraints(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Number of constraints in the model.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_40num_constraints, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_num_constraints, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_num_constraints, __pyx_t_2) < 0) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":678
 *         return self._graph.num_constraints()
 * 
 *     cpdef Py_ssize_t num_decisions(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Number of independent decision nodes in the model.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_42num_decisions, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_num_decisions, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_num_decisions, __pyx_t_2) < 0) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":697
 *         return self._graph.num_decisions()
 * 
 *     cpdef Py_ssize_t num_nodes(self) noexcept:             # <<<<<<<<<<<<<<
 *         """Number of nodes in the directed acyclic graph for the model.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_44num_nodes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_num_nodes, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__84)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_num_nodes, __pyx_t_2) < 0) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":717
 *         return self._graph.num_nodes()
 * 
 *     def num_symbols(self):             # <<<<<<<<<<<<<<
 *         """Number of symbols tracked by the model.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_46num_symbols, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_num_symbols, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_num_symbols, __pyx_t_2) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":740
 *         return self.num_nodes()
 * 
 *     def quadratic_model(self, ArraySymbol x, quadratic, linear=None):             # <<<<<<<<<<<<<<
 *         """Create a quadratic model from an array and a quadratic model.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_48quadratic_model, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_quadratic_model, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__57);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_quadratic_model, __pyx_t_2) < 0) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":767
 * 
 * 
 *     def set(self, Py_ssize_t n, Py_ssize_t min_size = 0, max_size = None):             # <<<<<<<<<<<<<<
 *         """Create a set symbol as a decision variable.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_50set, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_set, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__90);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_set, __pyx_t_2) < 0) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":789
 *         return SetVariable(self, n, min_size, n if max_size is None else max_size)
 * 
 *     def state_size(self):             # <<<<<<<<<<<<<<
 *         """An estimate of the size, in bytes, of all states in the model.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_52state_size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_state_size, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_state_size, __pyx_t_2) < 0) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":806
 *         return sum(sym.state_size() for sym in self.iter_symbols())
 * 
 *     def to_file(self, **kwargs):             # <<<<<<<<<<<<<<
 *         """Serialize the model to a new file-like object.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_54to_file, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_to_file, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_to_file, __pyx_t_2) < 0) __PYX_ERR(0, 806, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":817
 *         return file
 * 
 *     def to_networkx(self):             # <<<<<<<<<<<<<<
 *         """Convert the model to a NetworkX graph.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_56to_networkx, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_to_networkx, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_to_networkx, __pyx_t_2) < 0) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "dwave/optimization/model.pyx":870
 *         return G
 * 
 *     def unlock(self):             # <<<<<<<<<<<<<<
 *         """Release a lock, decrementing the lock count.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_58unlock, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model_unlock, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Model, __pyx_n_s_unlock, __pyx_t_2) < 0) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Model);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_60__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model___reduce_cython, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._graph cannot be converted to a Python object for pickling"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_5Model_62__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Model___setstate_cython, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":967
 *         self._states.swap(states)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         """Clear any saved states.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6States_5clear, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_States_clear, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__100)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_States, __pyx_n_s_clear, __pyx_t_2) < 0) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_States);

  /* "dwave/optimization/model.pyx":1004
 *         return move(states)
 * 
 *     def from_file(self, file, *, bool replace = True, check_header = True):             # <<<<<<<<<<<<<<
 *         """Construct states from the given file.
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_replace, Py_True) < 0) __PYX_ERR(0, 1004, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_check_header, Py_True) < 0) __PYX_ERR(0, 1004, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6States_7from_file, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_States_from_file, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_States, __pyx_n_s_from_file, __pyx_t_4) < 0) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_States);

  /* "dwave/optimization/model.pyx":1037
 *         self.attach_states(move(model.states.detach_states()))
 * 
 *     def from_future(self, future, result_hook):             # <<<<<<<<<<<<<<
 *         """Populate the states from the result of a future computation.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6States_9from_future, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_States_from_future, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__104)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_States, __pyx_n_s_from_future, __pyx_t_4) < 0) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_States);

  /* "dwave/optimization/model.pyx":1054
 *         self._result_hook = result_hook
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Initialize any uninitialized states."""
 *         self.resolve()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6States_11initialize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_States_initialize, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__106)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_States, __pyx_n_s_initialize, __pyx_t_4) < 0) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_States);

  /* "dwave/optimization/model.pyx":1066
 *             model._graph.initialize_state(self._states[i])
 * 
 *     def into_file(self, file):             # <<<<<<<<<<<<<<
 *         """Serialize the states into an existing  file.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6States_13into_file, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_States_into_file, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_States, __pyx_n_s_into_file, __pyx_t_4) < 0) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_States);

  /* "dwave/optimization/model.pyx":1088
 *         return m
 * 
 *     def resize(self, Py_ssize_t n):             # <<<<<<<<<<<<<<
 *         """Resize the number of states.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6States_15resize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_States_resize, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_States, __pyx_n_s_resize, __pyx_t_4) < 0) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_States);

  /* "dwave/optimization/model.pyx":1118
 *         self._states.resize(n)
 * 
 *     cpdef resolve(self):             # <<<<<<<<<<<<<<
 *         """Block until states are retrieved from any pending future computations.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6States_17resolve, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_States_resolve, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_States, __pyx_n_s_resolve, __pyx_t_4) < 0) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_States);

  /* "dwave/optimization/model.pyx":1135
 *             result_hook(self._model(), future)
 * 
 *     cpdef Py_ssize_t size(self) except -1:             # <<<<<<<<<<<<<<
 *         """Number of model states.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6States_19size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_States_size, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__112)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_States, __pyx_n_s_size, __pyx_t_4) < 0) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_States);

  /* "dwave/optimization/model.pyx":1151
 *         return self._states.size()
 * 
 *     def to_file(self):             # <<<<<<<<<<<<<<
 *         """Serialize the states to a new file-like object."""
 *         self.resolve()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6States_21to_file, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_States_to_file, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__113)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_States, __pyx_n_s_to_file, __pyx_t_4) < 0) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_States);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6States_23__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_States___reduce_cython, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._states cannot be converted to a Python object for pickling"
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6States_25__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_States___setstate_cython, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__115)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":1174
 *         self.expired_ptr = node_ptr.expired_ptr()
 * 
 *     def equals(self, other):             # <<<<<<<<<<<<<<
 *         """Compare whether two nodes are identical.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_3equals, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol_equals, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__117)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_equals, __pyx_t_4) < 0) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "dwave/optimization/model.pyx":1191
 *         return all(p.equals(q) for p, q in zip(self.iter_predecessors(), other.iter_predecessors()))
 * 
 *     cpdef bool expired(self) noexcept:             # <<<<<<<<<<<<<<
 *         return deref(self.expired_ptr)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_5expired, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol_expired, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__118)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_expired, __pyx_t_4) < 0) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "dwave/optimization/model.pyx":1194
 *         return deref(self.expired_ptr)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def _from_zipfile(cls, zf, directory, Model model, predecessors):
 *         """Construct a node from a compressed file.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_7_from_zipfile, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol__from_zipfile, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__120)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_from_zipfile, __pyx_t_4) < 0) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);
  __Pyx_GetNameInClass(__pyx_t_4, (PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_from_zipfile); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_from_zipfile, __pyx_t_2) < 0) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "dwave/optimization/model.pyx":1217
 *         return cls(*predecessors)
 * 
 *     def has_state(self, Py_ssize_t index = 0):             # <<<<<<<<<<<<<<
 *         """Return the initialization status of the indexed state.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_9has_state, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol_has_state, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__122)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__123);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_has_state, __pyx_t_2) < 0) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "dwave/optimization/model.pyx":1248
 *         return <bool>(self.model.states._states[index][self.node_ptr.topological_index()])
 * 
 *     def _into_zipfile(self, zf, directory):             # <<<<<<<<<<<<<<
 *         """Store node-specific information to a compressed file.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_11_into_zipfile, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol__into_zipfile, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__125)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_into_zipfile, __pyx_t_2) < 0) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "dwave/optimization/model.pyx":1266
 *         pass
 * 
 *     def iter_predecessors(self):             # <<<<<<<<<<<<<<
 *         """Iterate over a node's predecessors in the model.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_13iter_predecessors, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol_iter_predecessors, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_iter_predecessors, __pyx_t_2) < 0) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "dwave/optimization/model.pyx":1289
 *             inc(it)
 * 
 *     def iter_successors(self):             # <<<<<<<<<<<<<<
 *         """Iterate over a node's successors in the model.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_16iter_successors, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol_iter_successors, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_iter_successors, __pyx_t_2) < 0) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "dwave/optimization/model.pyx":1311
 *             inc(it)
 * 
 *     def maybe_equals(self, other):             # <<<<<<<<<<<<<<
 *         """Compare to another node.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_19maybe_equals, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol_maybe_equals, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__128)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_maybe_equals, __pyx_t_2) < 0) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "dwave/optimization/model.pyx":1356
 *         return MAYBE
 * 
 *     def reset_state(self, Py_ssize_t index):             # <<<<<<<<<<<<<<
 *         """Reset the state of a node and any successor symbols.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_21reset_state, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol_reset_state, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__130)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_reset_state, __pyx_t_2) < 0) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "dwave/optimization/model.pyx":1400
 *         self.model._graph.recursive_reset(self.model.states._states[index], self.node_ptr)
 * 
 *     def shares_memory(self, other):             # <<<<<<<<<<<<<<
 *         """Determine if two symbols share memory.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_23shares_memory, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol_shares_memory, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__132)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_shares_memory, __pyx_t_2) < 0) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "dwave/optimization/model.pyx":1418
 *             )
 * 
 *     def _state_from_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         # unlike node serialization, by default we raise an error because if
 *         # this is being called, it must have a state
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_25_state_from_zipfile, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol__state_from_zipfile, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__134)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_state_from_zipfile, __pyx_t_2) < 0) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "dwave/optimization/model.pyx":1423
 *         raise NotImplementedError(f"{type(self).__name__} has not implemented state deserialization")
 * 
 *     def _state_into_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         # unlike node serialization, by default we raise an error because if
 *         # this is being called, it must have a state
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_27_state_into_zipfile, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol__state_into_zipfile, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_state_into_zipfile, __pyx_t_2) < 0) __PYX_ERR(0, 1423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "dwave/optimization/model.pyx":1428
 *         raise NotImplementedError(f"{type(self).__name__} has not implemented state serialization")
 * 
 *     def state_size(self):             # <<<<<<<<<<<<<<
 *         """Return an estimated size, in bytes, of the node's state.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_29state_size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol_state_size, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__136)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_state_size, __pyx_t_2) < 0) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "dwave/optimization/model.pyx":1444
 *         return 0
 * 
 *     def topological_index(self):             # <<<<<<<<<<<<<<
 *         """Topological index of the node.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_31topological_index, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol_topological_index, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_Symbol, __pyx_n_s_topological_index, __pyx_t_2) < 0) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_Symbol);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_33__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol___reduce_cython, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__138)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6Symbol_35__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Symbol___setstate_cython, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1471
 * # For now we raise a RuntimeError for name conflicts. We could handle that in
 * # various ways if it ever becomes a problem.
 * _node_subclasses = dict()             # <<<<<<<<<<<<<<
 * def _register_node_subclasses():
 *     def register(cls):
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_node_subclasses, __pyx_t_2) < 0) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1472
 * # various ways if it ever becomes a problem.
 * _node_subclasses = dict()
 * def _register_node_subclasses():             # <<<<<<<<<<<<<<
 *     def register(cls):
 *         if cls.__name__ in _node_subclasses:
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_4_register_node_subclasses, 0, __pyx_n_s_register_node_subclasses, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__141)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_register_node_subclasses, __pyx_t_2) < 0) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1488
 * 
 * 
 * def _split_indices(indices):             # <<<<<<<<<<<<<<
 *     """Given a set of indices, made up of slices, integers, and array symbols,
 *     create two consecutive indexing operations that can be passed to
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_6_split_indices, 0, __pyx_n_s_split_indices, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__143)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_split_indices, __pyx_t_2) < 0) __PYX_ERR(0, 1488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dwave/optimization/model.pyx":1618
 *         return Subtract(self, rhs)
 * 
 *     def all(self):             # <<<<<<<<<<<<<<
 *         """Create an :class:`~dwave.optimization.symbols.All` symbol.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_21all, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol_all, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__145)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_all_2, __pyx_t_2) < 0) __PYX_ERR(0, 1618, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1626
 *         return All(self)
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Max` symbol.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_23max, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol_max, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__147)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_max, __pyx_t_2) < 0) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1634
 *         return Max(self)
 * 
 *     def maybe_equals(self, other):             # <<<<<<<<<<<<<<
 *         """Compare to another symbol.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_25maybe_equals, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol_maybe_equals, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__149)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_maybe_equals, __pyx_t_2) < 0) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1675
 *         return MAYBE
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Min` symbol.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_27min, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol_min, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__151)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_min, __pyx_t_2) < 0) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1683
 *         return Min(self)
 * 
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         """Return the number of dimensions for a symbol."""
 *         return self.array_ptr.ndim()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_29ndim, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol_ndim, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__152)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_ndim, __pyx_t_2) < 0) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1687
 *         return self.array_ptr.ndim()
 * 
 *     def prod(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Prod` symbol.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_31prod, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol_prod, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__154)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_prod, __pyx_t_2) < 0) __PYX_ERR(0, 1687, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1695
 *         return Prod(self)
 * 
 *     def reshape(self, *shape):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Reshape` symbol.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_33reshape, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol_reshape, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__156)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_reshape, __pyx_t_2) < 0) __PYX_ERR(0, 1695, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1722
 *             return Reshape(self, shape[0])
 * 
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         """Return the shape of the symbol.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_35shape, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol_shape, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__158)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_shape, __pyx_t_2) < 0) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1740
 *         return tuple(shape[i] for i in range(shape.size()))
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         r"""Return the number of elements in the symbol.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_37size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol_size, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__159)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_size, __pyx_t_2) < 0) __PYX_ERR(0, 1740, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1757
 *         return self.array_ptr.size()
 * 
 *     def state(self, Py_ssize_t index = 0, *, bool copy = True):             # <<<<<<<<<<<<<<
 *         """Return the state of the node.
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_copy, Py_True) < 0) __PYX_ERR(0, 1757, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_39state, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol_state, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__161)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__123);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_state, __pyx_t_4) < 0) __PYX_ERR(0, 1757, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1801
 *         return np.array(StateView(self, index), copy=copy)
 * 
 *     def _state_from_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         fname = directory + "array.npy"
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_41_state_from_zipfile, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol__state_from_zipfile, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__163)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_state_from_zipfile, __pyx_t_4) < 0) __PYX_ERR(0, 1801, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1821
 *         self.set_state(state_index, state)
 * 
 *     def _state_into_zipfile(self, zf, directory, Py_ssize_t state_index):             # <<<<<<<<<<<<<<
 *         # do this first to get any potential error messages out of the way
 *         # todo: use a view not a copy
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_43_state_into_zipfile, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol__state_into_zipfile, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__165)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_state_into_zipfile, __pyx_t_4) < 0) __PYX_ERR(0, 1821, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1830
 *             np.save(f, array, allow_pickle=False)
 * 
 *     def state_size(self):             # <<<<<<<<<<<<<<
 *         """Return an estimated byte-size of the state.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_45state_size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol_state_size, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__167)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_state_size, __pyx_t_4) < 0) __PYX_ERR(0, 1830, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1860
 *         return sizeinfo.max.value() * self.array_ptr.itemsize()
 * 
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         """Return the stride length, in bytes, for traversing a symbol.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_47strides, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol_strides, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__169)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_strides, __pyx_t_4) < 0) __PYX_ERR(0, 1860, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "dwave/optimization/model.pyx":1879
 *         return tuple(strides[i] for i in range(strides.size()))
 * 
 *     def sum(self):             # <<<<<<<<<<<<<<
 *         """Create a :class:`~dwave.optimization.symbols.Sum` symbol.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_49sum, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol_sum, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__171)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_ArraySymbol, __pyx_n_s_sum, __pyx_t_4) < 0) __PYX_ERR(0, 1879, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_ArraySymbol);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_51__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol___reduce_cython, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__172)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.array_ptr,self.expired_ptr,self.node_ptr cannot be converted to a Python object for pickling"
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_11ArraySymbol_53__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArraySymbol___setstate_cython, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__173)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_9StateView_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StateView___reduce_cython, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__175)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_StateView, __pyx_n_s_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_StateView);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_StateView, (type(self), 0x60fdced, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_StateView__set_state(self, __pyx_state)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_9StateView_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StateView___setstate_cython, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__176)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5dwave_12optimization_5model_StateView, __pyx_n_s_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_5dwave_12optimization_5model_StateView);

  /* "(tree fragment)":1
 * def __pyx_unpickle_StateView(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_5dwave_12optimization_5model_8__pyx_unpickle_StateView, 0, __pyx_n_s_pyx_unpickle_StateView, NULL, __pyx_n_s_dwave_optimization_model, __pyx_d, ((PyObject *)__pyx_codeobj__178)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_StateView, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dwave/optimization/model.pyx":1
 * # Copyright 2024 D-Wave Systems Inc.             # <<<<<<<<<<<<<<
 * #
 * #    Licensed under the Apache License, Version 2.0 (the "License");
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(35); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_add_constraint_line_87, __pyx_kp_u_Add_a_constraint_to_the_model_Ar) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_binary_line_108, __pyx_kp_u_Create_a_binary_symbol_as_a_deci) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_constant_line_127, __pyx_kp_u_Create_a_constant_symbol_Args_ar) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_decision_state_size_line_1, __pyx_kp_u_An_estimated_size_in_bytes_of_th) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_disjoint_bit_sets_line_164, __pyx_kp_u_Create_a_disjoint_sets_symbol_as) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_disjoint_lists_line_199, __pyx_kp_u_Create_a_disjoint_lists_symbol_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_integer_line_331, __pyx_kp_u_Create_an_integer_symbol_as_a_de) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_iter_constraints_line_507, __pyx_kp_u_Iterate_over_all_constraints_in) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_iter_decisions_line_523, __pyx_kp_u_Iterate_over_all_decision_variab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_iter_symbols_line_550, __pyx_kp_u_Iterate_over_all_symbols_in_the) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_list_line_565, __pyx_kp_u_Create_a_list_symbol_as_a_decisi) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_lock_line_584, __pyx_kp_u_Lock_the_model_No_new_symbols_ca) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_minimize_line_628, __pyx_kp_u_Set_the_objective_value_to_minim) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_num_constraints_line_660, __pyx_kp_u_Number_of_constraints_in_the_mod) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_num_decisions_line_678, __pyx_kp_u_Number_of_independent_decision_n) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_num_nodes_line_697, __pyx_kp_u_Number_of_nodes_in_the_directed) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_num_symbols_line_717, __pyx_kp_u_Number_of_symbols_tracked_by_the) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_quadratic_model_line_740, __pyx_kp_u_Create_a_quadratic_model_from_an) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_set_line_767, __pyx_kp_u_Create_a_set_symbol_as_a_decisio) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_state_size_line_789, __pyx_kp_u_An_estimate_of_the_size_in_bytes) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Model_to_networkx_line_817, __pyx_kp_u_Convert_the_model_to_a_NetworkX) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_States_clear_line_967, __pyx_kp_u_Clear_any_saved_states_Clears_an) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_States_resize_line_1088, __pyx_kp_u_Resize_the_number_of_states_If_n) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_States_size_line_1135, __pyx_kp_u_Number_of_model_states_Examples) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Symbol_iter_predecessors_line_12, __pyx_kp_u_Iterate_over_a_node_s_predecesso) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Symbol_iter_successors_line_1289, __pyx_kp_u_Iterate_over_a_node_s_successors) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Symbol_reset_state_line_1356, __pyx_kp_u_Reset_the_state_of_a_node_and_an) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_Symbol_topological_index_line_14, __pyx_kp_u_Topological_index_of_the_node_Re) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ArraySymbol_maybe_equals_line_16, __pyx_kp_u_Compare_to_another_symbol_Args_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ArraySymbol_reshape_line_1695, __pyx_kp_u_Create_a_class_dwave_optimizatio) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ArraySymbol_shape_line_1722, __pyx_kp_u_Return_the_shape_of_the_symbol_E) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ArraySymbol_size_line_1740, __pyx_kp_u_Return_the_number_of_elements_in) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ArraySymbol_state_line_1757, __pyx_kp_u_Return_the_state_of_the_node_Arg) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ArraySymbol_state_size_line_1830, __pyx_kp_u_Return_an_estimated_byte_size_of) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ArraySymbol_strides_line_1860, __pyx_kp_u_Return_the_stride_length_in_byte) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init dwave.optimization.model", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init dwave.optimization.model");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* pep479 */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {
    PyObject *exc, *val, *tb, *cur_exc;
    __Pyx_PyThreadState_declare
    #ifdef __Pyx_StopAsyncIteration_USED
    int is_async_stopiteration = 0;
    #endif
    CYTHON_MAYBE_UNUSED_VAR(in_async_gen);
    cur_exc = PyErr_Occurred();
    if (likely(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration))) {
        #ifdef __Pyx_StopAsyncIteration_USED
        if (in_async_gen && unlikely(__Pyx_PyErr_GivenExceptionMatches(cur_exc, __Pyx_PyExc_StopAsyncIteration))) {
            is_async_stopiteration = 1;
        } else
        #endif
            return;
    }
    __Pyx_PyThreadState_assign
    __Pyx_GetException(&exc, &val, &tb);
    Py_XDECREF(exc);
    Py_XDECREF(val);
    Py_XDECREF(tb);
    PyErr_SetString(PyExc_RuntimeError,
        #ifdef __Pyx_StopAsyncIteration_USED
        is_async_stopiteration ? "async generator raised StopAsyncIteration" :
        in_async_gen ? "async generator raised StopIteration" :
        #endif
        "generator raised StopIteration");
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__3);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* RaiseUnboundLocalError */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* RaiseClosureNameError */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* PyObjectLookupSpecial */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result;
    if (unlikely(!s)) return NULL;
    result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + (unsigned long)b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* RaiseKeywordRequired */
static void __Pyx_RaiseKeywordRequired(const char* func_name, PyObject* kw_name) {
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() needs keyword-only argument %U", func_name, kw_name);
        #else
        "%s() needs keyword-only argument %s", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* ModInt[Py_ssize_t] */
static CYTHON_INLINE Py_ssize_t __Pyx_mod_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* PySequenceMultiply */
static PyObject* __Pyx_PySequence_Multiply_Generic(PyObject *seq, Py_ssize_t mul) {
    PyObject *result, *pymul = PyInt_FromSsize_t(mul);
    if (unlikely(!pymul))
        return NULL;
    result = PyNumber_Multiply(seq, pymul);
    Py_DECREF(pymul);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PySequence_Multiply(PyObject *seq, Py_ssize_t mul) {
#if CYTHON_USE_TYPE_SLOTS
    PyTypeObject *type = Py_TYPE(seq);
    if (likely(type->tp_as_sequence && type->tp_as_sequence->sq_repeat)) {
        return type->tp_as_sequence->sq_repeat(seq, mul);
    } else
#endif
    {
        return __Pyx_PySequence_Multiply_Generic(seq, mul);
    }
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__30;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSsize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* UnicodeConcatInPlace */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        int ret;
        __Pyx_GIVEREF(*p_left);
        ret = PyUnicode_Resize(p_left, new_len);
        __Pyx_GOTREF(*p_left);
        if (unlikely(ret != 0))
            return NULL;
        #if PY_VERSION_HEX >= 0x030d0000
        if (unlikely(PyUnicode_CopyCharacters(*p_left, left_len, right, 0, right_len) < 0)) return NULL;
        #else
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        #endif
        __Pyx_INCREF(*p_left);
        __Pyx_GIVEREF(*p_left);
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
#if !(CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2)
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
#endif
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
#if CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2
    PyObject *args[2] = {obj, arg};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_Call2Args;
    return PyObject_VectorcallMethod(method_name, args, 2 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
#endif
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* GetAttr3 */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    int res = PyObject_GetOptionalAttr(o, n, &r);
    return (res != 0) ? r : __Pyx_NewRef(d);
#else
  #if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
  #endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
#endif
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}
#endif

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* SetVTable */
static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_8
#define __PYX_HAVE_RT_ImportType_3_0_8
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_8 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_8 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (unlikely(methoddescr_type == NULL)) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (unlikely(!meth)) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* GetNameInClass */
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* pybytes_as_double */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj) {
    PyObject *float_value;
#if PY_MAJOR_VERSION >= 3
    float_value = PyFloat_FromString(obj);
#else
    float_value = PyFloat_FromString(obj, 0);
#endif
    if (likely(float_value)) {
#if CYTHON_ASSUME_SAFE_MACROS
        double value = PyFloat_AS_DOUBLE(float_value);
#else
        double value = PyFloat_AsDouble(float_value);
#endif
        Py_DECREF(float_value);
        return value;
    }
    return (double)-1;
}
static const char* __Pyx__PyBytes_AsDouble_Copy(const char* start, char* buffer, Py_ssize_t length) {
    int last_was_punctuation = 1;
    Py_ssize_t i;
    for (i=0; i < length; i++) {
        char chr = start[i];
        int is_punctuation = (chr == '_') | (chr == '.') | (chr == 'e') | (chr == 'E');
        *buffer = chr;
        buffer += (chr != '_');
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyBytes_AsDouble_inf_nan(const char* start, Py_ssize_t length) {
    int matches = 1;
    char sign = start[0];
    int is_signed = (sign == '+') | (sign == '-');
    start += is_signed;
    length -= is_signed;
    switch (start[0]) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            matches &= (start[1] == 'a' || start[1] == 'A');
            matches &= (start[2] == 'n' || start[2] == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            matches &= (start[1] == 'n' || start[1] == 'N');
            matches &= (start[2] == 'f' || start[2] == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            matches &= (start[3] == 'i' || start[3] == 'I');
            matches &= (start[4] == 'n' || start[4] == 'N');
            matches &= (start[5] == 'i' || start[5] == 'I');
            matches &= (start[6] == 't' || start[6] == 'T');
            matches &= (start[7] == 'y' || start[7] == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static CYTHON_INLINE int __Pyx__PyBytes_AsDouble_IsSpace(char ch) {
    return (ch == 0x20) | !((ch < 0x9) | (ch > 0xd));
}
CYTHON_UNUSED static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length) {
    double value;
    Py_ssize_t i, digits;
    const char *last = start + length;
    char *end;
    while (__Pyx__PyBytes_AsDouble_IsSpace(*start))
        start++;
    while (start < last - 1 && __Pyx__PyBytes_AsDouble_IsSpace(last[-1]))
        last--;
    length = last - start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyBytes_AsDouble_inf_nan(start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    digits = 0;
    for (i=0; i < length; digits += start[i++] != '_');
    if (likely(digits == length)) {
        value = PyOS_string_to_double(start, &end, NULL);
    } else if (digits < 40) {
        char number[40];
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((digits + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                                return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                                return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                                return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (size_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (size_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (size_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (size_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (size_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((size_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((size_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__179);
    }
    return name;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CoroutineBase */
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_CLEAR(exc_state->exc_value);
#else
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
#endif
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(PyObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    CYTHON_MAYBE_UNUSED_VAR(closing);
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_value) {
        #if CYTHON_COMPILING_IN_PYPY
        #else
        PyObject *exc_tb;
        #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
        exc_tb = PyException_GetTraceback(exc_state->exc_value);
        #elif PY_VERSION_HEX >= 0x030B00a4
        exc_tb = ((PyBaseExceptionObject*) exc_state->exc_value)->traceback;
        #else
        exc_tb = exc_state->exc_traceback;
        #endif
        if (exc_tb) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
            #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
            Py_DECREF(exc_tb);
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body(self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
#if CYTHON_COMPILING_IN_PYPY
    CYTHON_UNUSED_VAR(exc_state);
#else
    PyObject *exc_tb;
    #if PY_VERSION_HEX >= 0x030B00a4
    if (!exc_state->exc_value) return;
    exc_tb = PyException_GetTraceback(exc_state->exc_value);
    #else
    exc_tb = exc_state->exc_traceback;
    #endif
    if (likely(exc_tb)) {
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
        #if PY_VERSION_HEX >= 0x030B00a4
        Py_DECREF(exc_tb);
        #endif
    }
#endif
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject* gen, PyObject *retval) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
#if PY_VERSION_HEX < 0x030d00A1
            _PyGen_SetStopIterationValue(result);
#else
            if (!PyTuple_Check(result) && !PyExceptionInstance_Check(result)) {
                PyErr_SetObject(PyExc_StopIteration, result);
            } else {
                PyObject *exc = __Pyx_PyObject_CallOneArg(PyExc_StopIteration, result);
                if (likely(exc != NULL)) {
                    PyErr_SetObject(PyExc_StopIteration, exc);
                    Py_DECREF(exc);
                }
            }
#endif
        }
        Py_DECREF(result);
        result = NULL;
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (unlikely(PyErr_Occurred())) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(meth);
            if (unlikely(!retval))
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (unlikely(PyErr_Occurred())) {
                    gen->is_running = 0;
                    return NULL;
                }
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = __Pyx_PyObject_Call(meth, args, NULL);
            } else {
                PyObject *cargs[4] = {NULL, typ, val, tb};
                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (unlikely(!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb)))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_VISIT(exc_state->exc_value);
#else
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
#endif
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))
#else
        Py_TYPE(gen)->tp_del(self);
        if (unlikely(Py_REFCNT(self) > 0))
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    __Pyx_PyHeapTypeObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (likely(--self->ob_refcnt == 0)) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_name, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context)
{
    PyObject *frame = self->gi_frame;
    CYTHON_UNUSED_VAR(context);
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    #if PY_VERSION_HEX >= 0x030B00a4
    gen->gi_exc_state.exc_value = NULL;
    #else
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
    #endif
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (unlikely(!module)) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), 0, 0},
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CoroutineObject, gi_weakreflist), READONLY, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_GeneratorType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_Coroutine_dealloc},
    {Py_tp_traverse, (void *)__Pyx_Coroutine_traverse},
    {Py_tp_iter, (void *)PyObject_SelfIter},
    {Py_tp_iternext, (void *)__Pyx_Generator_Next},
    {Py_tp_methods, (void *)__pyx_Generator_methods},
    {Py_tp_members, (void *)__pyx_Generator_memberlist},
    {Py_tp_getset, (void *)__pyx_Generator_getsets},
    {Py_tp_getattro, (void *) __Pyx_PyObject_GenericGetAttrNoDict},
#if CYTHON_USE_TP_FINALIZE
    {Py_tp_finalize, (void *)__Pyx_Coroutine_del},
#endif
    {0, 0},
};
static PyType_Spec __pyx_GeneratorType_spec = {
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    __pyx_GeneratorType_slots
};
#else
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_Generator_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_GeneratorType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_GeneratorType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
#endif
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction_3_0_8
#define __PYX_HAVE_RT_ImportFunction_3_0_8
static int __Pyx_ImportFunction_3_0_8(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
